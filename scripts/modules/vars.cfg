string
   str.length() : returns like len(str) the length of the string
   str.upper() : returns like upper(str) the uppercase version and also modifies the str
   str.lower() : returns like lower(str) the lowercase version and also modifies the str
   str.find(Search,[Start]) : returns like Find(string, search, start) the index of the first occurance of 'search' after 'start' within str but unlike the basic.em function the Start parameter is optional if not given it searches the whole string
   str.join(array) : returns a string which is the concatenation of the array elements, seperated by str
   SplitWords( str, delimiter := " ", max_split := -1 )
   str.format() : accepts the following format
				{:x} for hex representation
				{:o} for octal
				{:b} for binary
	
	          Add a # to get notation prefix:
	          E.g. "{:x}".format(10) -> "a"
			       "{:#x}".format(10) -> "0xa"
				   
			  Parameters can be simple:   
			  "You have {} gold coins".format(120) -> "You have 120 gold coins"
			
			  and are unpacked implicitly by their order:
				"{} hits {} for {} of damage".format("John", "Bob", 120) -> "John hits Bob for 120 of damage"
			
			  However you can specify parameters explicitly (first argument is at 1):
				"You hit {2} for {1} damage".format(120, "John Doe") -> "You hit John Doe for 120 damage"
				
			  Format allows accessing object members:
     			"Spell {1.spell_name} requires reagents: {1.reagents}".format(struct{spell_name:="Fire Wrath", "Ba, Bm, Ga"}) 
				       -> "Spell Fire Wrath requires reagents: Ba, Bm, Ga"

			  Implicit members also work:
			    "{name} you hit level {level}".format(struct{name:="Jane Doe", level:=4}) 
						-> "Jane Doe you hit level 4"

			  Character or item members are accessed the same way:
			    "{1.name}, your shield {2.desc} has {2.hp} hp".format(who, who.shield)" 

array
   array.Size() - This returns the number of elements in the array.
   array.Insert(index , value) - inserts a new element, value, at the specified index.
   array.Erase(index) - deletes the element with the specified index.
   array.Shrink(nelems) - erases all but the first nelems elements in the array.
   array.Append(value) - adds this element to the end of the array.
   array.Reverse() - reverses the order of the array.
   array.Sort() - sorts the array.
   array.cycle([count]) - will move array backwards or forwards in-place as it were a conveyor belt. {1, 2, 3}.cycle() ->  {3, 1, 2}
   array{"a","b","c","d","e"}[2,4] will return array{"b","c","d"}
   array.randomentry() -  shortcut for var entry:=array[RandomInt(array.size())+1];
   Min/Max math module works with array.
   _elem_iter = index on foreach, while
   
struct
  struct .? and .- as shortcut for .exists() and .erase()
   
dictionary
  dictionary.size()        : number of elements
  dictionary.erase( key )  : erase an element
  dictionary.insert( key, value ) : insert an element
    (equivalent of dictionary[key] := value;)
  dictionary.exists( key ) : check for existence of a key
  dictionary.keys()        : return an array of all keys
  	"options" -> dictionary{
		"1"-> dictionary{
			"Gender" ->  Array{"Macho", "Femea"},
			"Alignment" ->  Array{"evil", "good", "neutral"},
			"MoveMode" ->  Array{"L", "S", "A"}
		}
