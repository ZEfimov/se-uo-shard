/* $Id: skillwin.src 402 2005-10-04 09:33:15Z panosl $
 *
 * Purpose
 * This script is called when a player clicks the skill button in his paperdoll.
 *
 * Parameters
 * who:     Reference to the character who clicked the skill button
 *
 * Return value: Ignored
 *
 */
use uo;
use basic;

include ":charactercreation:characters";
include ":charactercreation:feats";
include ":gumps:gumps";
include ":gumps:gump_prompts";
include ":gumps:gumps_ex";
include ":gumps:text_const";
include ":taming:taming";
include "include/say";
include "include/utils";
include "include/client";
include ":gumps:requestgump";
include ":gumps:htmlgump";
include ":crafting:craft_props";
include ":charactercreation:proficiencies";
include ":mounts:mounts";

enum SKILLGUMP_SIZE
   MAX_WIDTH := 700,
   MAX_HEIGHT := 500,
endenum

CONST GF_CHANGE_PAGE := 2;
CONST GF_CHANGE_PAGE_TAME := 3;

// CONST GF_HITS_BTN := 5;
// CONST GF_MANA_BTN := 6;
// CONST GF_STAM_BTN := 7;
// CONST GF_CHANGE_CLASS := 8;
CONST GF_NEW_PROFICIENCY := 9;

CONST GF_BKG_REM_BTN := 200;
CONST GF_BKG_ADD_BTN := 100;

CONST GF_ATTR_UPGRADE_BTN := 900;

var ficharp_data_file := DFOpenDataFile("ficharp", DF_CREATE);
var ficharp_elem;

var profCfg := ReadConfigFile(":charactercreation:config/proficiencias");
var classCfg := ReadConfigFile(":charactercreation:config/classes");
var attributes := AP_ListAttributesByType("Stat");

function buildGodGump(byref gump, god, level, power)
   GFResizePic(gump, 684, 148, 5170, 138, 352); //background
   GFHtmlShadowed(gump, 737, 181, 50, 20, "#FFFFFF", "Deus", 5);
   GFHtmlShadowed(gump, 728-2, 200, 55, 20, "#FFFFFF", "<center>{}".format(god), 4);
   GFGumpPic(gump, 772, 184, 59, 0); // bar
   GFGumpPic(gump, 703, 183, 57, 0); // bar

   var god_feats := GetGodFeats(god);

   foreach hab in god_feats
      var color := 0;
      if (level < hab.Level) color := 1000; endif
      
      GFGumpPic(gump, 736-7, 221+((_hab_iter-1) * 49), cint(hab.Icon), color);
      GFTooltipText(gump, BuildFeatToolTip(hab, 0, power));
      GFTextLine(gump, 743-7, 245+((_hab_iter-1) * 49), 1000, "Lv{}".format(hab.Level));

      sleepms(2);
   endforeach
endfunction

/*
** Skill Gump Functions
**/

/*
** Function to display the skill attribute sheet for a character.
**
** @param {object} gump - The gump object to display the skill attribute sheet.
** @param {object} targ - The target object for which the skill attribute sheet is being displayed.
** @param {object} chardata - The character data object containing information about the character.
** @param {int} base_x - The base x-coordinate for positioning the skill attribute sheet.
** @param {int} base_y - The base y-coordinate for positioning the skill attribute sheet.
**
** @return {void} - This function does not return a value.
*/

function SkillAttributeSheet(byref gump, targ, chardata, base_x := 0, base_y := 0)
   // SkillAttributeSheet(gump, targ, chardata, 25, 27);
   GFResizePic(gump, base_x, base_y, ALTERNATE_MENU_SCROLL_BACKGROUND, 202, 208);

   GFHtmlShadowed(gump, base_x+67, base_y+25, 185, 20, HTML_BLACK, "Atributos", 5, HTML_WHITE);

   base_y -= 5;
   // Headers
   GFHtmlLine(gump, base_x+35, base_y+45, 185, 20, HTML_DARKGRAY, "Atrib", 2);
   GFHtmlLine(gump, base_x+80, base_y+45, 185, 20, HTML_DARKGRAY, "Pontos", 2);
   GFHtmlLine(gump, base_x+130, base_y+45, 185, 20, HTML_DARKGRAY, "Mod", 2);
   base_y -= 5;
   
   foreach attr in attributes
      var attrElem := AP_GetAttributeDataElem(attr);
      var alias := upper(translateAttribute(attr)[1, 3]);
      var attr_value := targ.getStat(attr, RETURN_TRUE);
      var attr_mod := targ.getStat(attr, RETURN_MOD);

      GFTextLine(gump, base_x+35, base_y+65+((_attr_iter-1) * 20), DEFAULT_FONT_COLOR, alias);
      GFTooltipText(gump, GetConfigString(attrElem, "Description"));
      GFTextLine(gump, base_x+90, base_y+65+((_attr_iter-1) * 20), DEFAULT_FONT_COLOR, $"{attr_value}");
      GFTextLine(gump, base_x+130, base_y+65+((_attr_iter-1) * 20), DEFAULT_FONT_COLOR, $"{attr_mod}");
      if (chardata.vitalpoints >= 1)
         GFAddButton(gump, base_x+155, base_y+60+((_attr_iter-1) * 21), G_PLUS_BTN_ALTERNATE, G_PLUS_BTN_ALTERNATE, GF_CLOSE_BTN, GF_ATTR_UPGRADE_BTN+_attr_iter);
      else
         GFGumpPic(gump, base_x+155, base_y+60+((_attr_iter-1) * 21), G_PLUS_BTN_ALTERNATE, 1000);
         GFTooltipText(gump, "Você não tem mais pontos de atributo disponíveis.");
      endif
      sleepms(2);
   endforeach
endfunction

/*
** Function to display character sheet for skills
**/

/*
** @param {object} gump - The gump object to display the character sheet.
** @param {object} targ - The target object for which the character sheet is being displayed.
** @param {object} chardata - The character data object containing information about the character.
** @param {int} base_x - The base x-coordinate for positioning the character sheet.
** @param {int} base_y - The base y-coordinate for positioning the character sheet.
**
** @return {void} - This function does not return a value.
*/

function SkillCharacterSheet(byref gump, targ, chardata, base_x := 0, base_y := 0)
   GFResizePic(gump, base_x, base_y, ALTERNATE_MENU_SCROLL_BACKGROUND, 190, 195);
   GFTextMid(gump, base_x+5, base_y+25, 185, HIGHLIGHT_FONT_COLOR, $"{targ.getName()}");


   GFGumpPic(gump, base_x+125, base_y+60, 0x5DD3, 1000);
   GFTooltipText(gump, "Habilidade Indisponível");

    if (chardata.raca)
      GFTextLine(gump, base_x+24, base_y+45, DEFAULT_FONT_COLOR, $"Raça: {targ.getRace(1)}");
      var race_habs := GetRaceFeats(chardata.raca);
      foreach hab in race_habs
         GFGumpPic(gump, base_x+125, base_y+60+ ((_hab_iter-1) * 49), hab.Icon, 0 );
         GFTooltipText(gump, BuildFeatToolTip(hab, 0, 0)); // TODO: power
      endforeach
   else
      GFTextLine(gump, base_x+582, base_y+61, DEFAULT_FONT_COLOR, "Raça: Indefinida");
   endif

   GFTextLine(gump, base_x+24, base_y+65, DEFAULT_FONT_COLOR, $"Reflexo: {getResistBonus(targ, "Reflex")}");
   GFTooltipText(gump, $"Capacidade de reagir rapidamente a estímulos e evitar ataques ou efeitos que exigem agilidade e percepção.<br><basefont color={HTML_YELLOW}>(DEX+SAB)/2");
   GFTextLine(gump, base_x+24, base_y+85, DEFAULT_FONT_COLOR, $"Fortitude: {getResistBonus(targ, "Fortitude")}");
   GFTooltipText(gump, $"Resistência física e robustez para suportar danos, doenças e outros efeitos que afetam o corpo e a saúde.<br><basefont color={HTML_YELLOW}>(FOR+CON)/2");
   GFTextLine(gump, base_x+24, base_y+105, DEFAULT_FONT_COLOR, $"Vontade: {getResistBonus(targ, "Will")}");
   GFTooltipText(gump, $"Força de espírito e determinação para resistir a influências mentais, magias e efeitos que tentam dominar a mente ou emoções.<br><basefont color={HTML_YELLOW}>(INT+CAR) / 2");
endfunction

function SkillProfienciesSheet(byref gump, who, chardata, base_x := 0, base_y := 0)
	GFTextLine(gump, base_x, base_y, HIGHLIGHT_FONT_COLOR, "Proficiências");

   for i := 1 to 4
  	   GFGumpPicTiled(gump, base_x, base_y+18+(i * 18), 224, 1, 2700);
      sleepms(2);
   endfor

   if (!chardata.proficiencias)
      chardata.proficiencias := array{};
   endif

   var profienciesText := "".join(chardata.proficiencias);
   GFHtmlShadowed(gump, base_x, base_y+20, 224, 80, HTML_WHITE, $"{profienciesText}", 2);
   GFTooltipText(gump, "Quando um personagem possui a perícia adequada para uma arma ou armadura, ele pode manejá-la ou vesti-la sem sofrer penalidades em suas ações ou movimentos.");
   // var x_mod := base_x;
   // var y_mod := base_y+20;
   // foreach item in (chardata.proficiencias)
	//    GFTextLine(gump, 458+x_mod, 324+y_mod, 1152, item);
   //    x_mod += 130;
   //    if (x_mod > 130)
   //       x_mod := 0;
   //       y_mod += 20;
   //    endif
   // endforeach

   // if (chardata.proficiencias.size() < 4 || chardata.points)
   //    GFAddButton(gump, 523-2, 432, 0x80E, 0x80E, GF_CLOSE_BTN, GF_NEW_PROFICIENCY);
   //    GFHTMLArea(gump,  523, 432, 115, 25, "<basefont color=#006400><center>Nova Proficiência", 1);
   // endif
endfunction


function SkillClassSheet(byref gump, targ, chardata, base_x := 0, base_y := 0, power := 0)
   GFResizePic(gump, base_x, base_y, DEFAULT_FOREGROUND, 623, 151);
   var level := chardata.level;

   foreach classe in (chardata.classes)
      GFPage(gump, _classe_iter);
      var elem := FindConfigElem(classCfg, classe.id);
      if (!elem) continue; endif

         var feats := GetClassFeats(classe.id, elem);
         
         // adjust on x 53 and y 177
         GFGumpPic(gump, base_x+15+40, base_y+5+30, cint(elem.Icon), 0); // hab
         GFHtmlShadowed(gump, base_x+15+26, base_y+5+8, 100, 20, HTML_BLACK, "<center>{}".format(classe.id), 5, HTML_WHITE);
         
         // exp bar
         if (classe.level >= 4)
            GFGumpPicTiled(gump, base_x+15+26, base_y+5+97, 96, 8, 9753);
         else
            GFBuildBar(gump, base_x+15+26, base_y+5+97, 96, classe.exp, GetClassMaxExp(classe));
         endif

         GFTextLine(gump, base_x+15+56, base_y+5+103, DEFAULT_FONT_COLOR, "Lv. {}".format(cint(classe.level)));
         GFTooltipText(gump, "Experiência de sua classe.<br>Para avançar o level de sua classe, você deve falar com um NPC de classe.<br>Mate monstros e use suas habilidades para aumentar sua experiência e disponibilizar novas habilidades.");

      // Belt Buttons
      if (chardata.classes.size() > 1)
         GFAddButton(gump, base_x+10, base_y+70, G_PAGE_BTN_L, G_PAGE_BTN_L, GF_PAGE_BTN, GF_CHANGE_PAGE-1);
         GFAddButton(gump, base_x+590, base_y+70, G_PAGE_BTN_R, G_PAGE_BTN_R, GF_PAGE_BTN, _classe_iter >= chardata.classe.size() ? GF_CHANGE_PAGE : GF_CHANGE_PAGE+1);
      endif
      // Hab Buttons

      var cur_group := 1;
      var x := base_x+160;
      var y := base_y+38;

      for (cur_group := 1; cur_group <= 4; cur_group += 1)
         GFHtmlShadowed(gump, x+25, y-20, 80, 20, HTML_GRAY, $"Grupo {cur_group}", 4, HTML_WHITE);
         var i;
         // var feat_list := FindAllElemInArray(feats, struct{ Group := cur_group }) + FindAllElemInArray(extrahabs, struct{ Group := cur_group });
         var feat_list := FindAllElemInArray(feats, struct{ Group := cur_group });
         for (i := 1; i <= 4; i += 1)
            var hab := feat_list[i];

            if (hab)
               var color := 0;
               if ( (level < hab.Level || cint(classe.level) < hab.Group))
                  // color := 2114; // TODO: block the hab, bing it back!
                  color := 1000; // block the hab
               elseif (!(hab.FeatId in classe.habs))
                  color := 0;  //
               endif

               // if ((color != 2114) && who == targ) // TODO: GMs can see player sheet
               if ((color == 1000))
                  GFGumpPic(gump, x, y-2, hab.Icon, color);
               else
                  GFAddButton(gump, x, y-2, hab.Icon, hab.Icon, GF_CLOSE_BTN, 300+hab.FeatID); // hab
               endif
               // GFGumpPic(gump, x, y-2, hab.Icon, color);  // TODO: gray icon, bring it back!
               GFTooltipText(gump, BuildFeatToolTip(hab, !(hab.FeatId in classe.habs), power));
            else
               GFGumpPic(gump, x, y, 0x5DD3, 2114);
               GFTooltipText(gump, "Habilidade Indisponível");
               // GFGumpPic(gump, x+2, y+8, 27, 1000);
            endif

            if (i == 2)
               x -= 48;
               y += 45;
            else
               x += 48;
            endif

            sleepms(2);
         endfor

         if (cur_group < 4)
            GFGumpPicTiled(gump, x+3, y-20, 1, 39, 2701);  // divisor
         endif
         x += 10;
         y -= 45;
         sleepms(2);
      endfor

      sleepms(2);
   endforeach

   GFPage(gump, 0);
   GFHtmlShadowed(gump, base_x+210, base_y+126, 300, 20, HTML_DARKGREEN, "Use suas habilidades através da barra de atalhos", 2, HTML_WHITE);
endfunction

   /* 
   * Function to display the skill job sheet in the gump interface.
   * 
   * @param {int} gump - The gump interface to display the skill job sheet.
   * @param {object} targ - The target object.
   * @param {object} chardata - The character data object containing level and experience points.
   * @param {int} base_x - The base x-coordinate for positioning the skill job sheet.
   * @param {int} base_y - The base y-coordinate for positioning the skill job sheet.
   * 
   * @return {void} - This function does not return a value.
   */

function SkillJobSheet(byref gump, targ, chardata, subclass := "", power := 0, base_x := 0, base_y := 0)
   var charlevel := chardata.level;
   GFResizePic(gump, base_x, base_y, DEFAULT_FOREGROUND, 601, 84);

   if (!subclass)
      GFHtmlShadowed(gump, base_x+260, base_y+30, 150, 20, HTML_DARKGRAY, "Não Escolhido", 4, HTML_WHITE);
      GFTooltipText(gump, "Você pode aprender uma nova profissão com um NPC ou outro player!");
      return;
   endif
   
   var feats := GetClassFeats(subclass.id);
   var x := base_x+20;
   var y := base_y+20;
   GFHtmlShadowed(gump, x, y, 92, 20, "#FFFFFF", "{}".format(subclass.id), 5);

   if (subclass.level >= 3)
      GFGumpPicTiled(gump, x, y+35, 96, 8, 9753);
   else
      GFBuildBar(gump, x, y+35, 96, subclass.exp, GetClassMaxExp(subclass));
   endif
   GFTextLine(gump, x, y+17, 1000, "Lv. {}".format(subclass.level));
   GFTooltipText(gump, "Experiência de sua profissão.<br> Faça missões e tarefas relacionadas a sua profissão para aumentar sua experiência e disponibilizar novas habilidades.");
   
   var cur_group := 1;
   var x_pos := x+102;
   foreach hab in feats
      if (hab.Group != cur_group)
         GFGumpPicTiled(gump, x_pos+5, y+9, 1, 25, 2114);  // divisor
         cur_group := hab.Group;
         x_pos += 15;
      endif

      var color := 0;
      
      if ( (charlevel < hab.Level || cint(subclass.level) < hab.Group) && targ.cmdlevel < 3 )
         color := 2114;
      elseif (!(hab.FeatId in subclass.habs))
         color := 1000;
      endif
      
      // if (color != 2114 && who == targ) // TODO: GMs can see player sheet
      if (color != 2114)
         GFAddButton(gump,  x_pos, y-2, hab.Icon, hab.Icon, GF_CLOSE_BTN, 300+hab.FeatID); // hab
      endif

      // GFGumpPic(gump, x_pos, y-2, hab.Icon, color); // hab
      GFTooltipText(gump, BuildFeatToolTip(hab, !(hab.FeatId in subclass.habs), power));
      x_pos += 46;
      sleepms(2);
   endforeach
endfunction

   /* 
   * Function to display the skill level and experience sheet in the gump interface.
   * 
   * @param {int} gump - The gump interface to display the skill level and experience sheet.
   * @param {object} targ - The target object.
   * @param {object} chardata - The character data object containing level and experience points.
   * @param {int} base_x - The base x-coordinate for positioning the skill level and experience sheet.
   * @param {int} base_y - The base y-coordinate for positioning the skill level and experience sheet.
   * 
   * @return {void} - This function does not return a value.
   */

function SkillLevelExpSheet(byref gump, targ, chardata, base_x := 0, base_y := 0)
   // Exp Bar
   GFBuildBar(gump, base_x+22, base_y+25, 386, chardata.exppoints, targ.getMaxExp());
   GFTooltipText(gump, "Experiëncia de personagem é adquirida executando diversas tarefas como: matar monstros, criar itens, escrevendo livros e usando habilidades.");
   
   // Level
   GFGumpPic(gump, base_x, base_y, 10506, 0); // shield bg
   GFGumpPic(gump, base_x+15, base_y, 10508, 0); // shield bg
   GFTextLine(gump, base_x+9, base_y+9, GREEN_FONT_COLOR, $"{chardata.level}");
   GFTooltipText(gump, "Level do personagem");
endfunction

function buildPageHeader(byref gump, targ, title, base_x := 230, base_y := 13)
   GFResizePic(gump, base_x, base_y, DEFAULT_MENU_BACKGROUND, 220, 59);
   GFTextMid(gump, base_x+20, base_y+18, 208, DEFAULT_FONT_COLOR, title);

   var hBtnY := base_y + 22;
	GFAddButton(gump, base_x+185, hBtnY, 2224, 2224, GF_CLOSE_BTN, GF_CHANGE_PAGE);
   if (HaveFeatSecondary(targ, 53))
	   GFAddButton(gump, base_x+17, hBtnY, 2223, 2223, GF_CLOSE_BTN, GF_CHANGE_PAGE_TAME);
   endif
endfunction

   /* 
   * Function to send the skill gump to the player.
   * 
   * @param {int} gump - The gump interface to send the skill gump to.
   * @param {object} who - The player object to send the skill gump to.
   * @param {object} chardata - The character data object containing player's level and experience points.
   * @param {object} targ - The target object.
   * @param {int} power - The power level of the skill gump.
   * 
   * @return {void} - This function does not return a value.
   */
function SendSkillGump(gump, who, chardata, targ, power);
   buildPageHeader(gump, targ, "Ficha de Personagem");

   SkillAttributeSheet(gump, targ, chardata, 25, 27);
   SkillProfienciesSheet(gump, targ, chardata, 236, 79);
   SkillCharacterSheet(gump, targ, chardata, 463, 27);

   SkillLevelExpSheet(gump, targ, chardata, 240, 198);

   // Class and Job connector
   GFDivisorVertical(gump, 41, 260, 350);

   SkillClassSheet(gump, targ, chardata, 27, 239);

   for i := 1 to 3
      var jY := ((i-1)*90);
      GFDivisorHorizontal(gump, 41, 430+jY, 50, G_DIVISOR_LINE);
      SkillJobSheet(gump, targ, chardata, chardata.subclasses[i], power, 49, 395+jY);
   endfor

   // GFHtmlShadowed(gump, 153, 77, 60, 20, "#FFFFFF", "Pontos", 5);
	// GFTextLine(gump, 164, 93, 0, "{}".format(chardata.points));

   // GFTooltipText(gump, "Pontos são gastos para aprender habilidades de classe e subclasse.");
	// GFTextLine(gump, 67, 122, 0, "Exp:");
   
   // if (chardata.vitalpoints > 0 && who == targ) AddVitalIncreaseButtons(gump); endif


	// GFGumpPic(gump, 223, 63, 105, 0);
   // GFTooltipText(gump, "Este é seu valor máximo de vida, sem nenhum modificador.");
   // GFHtmlShadowed(gump, 285, 76, 60, 20, "#FFFFFF", "Vida", 5);
	// GFTextLine(gump, 285, 94, 0, "{}".format(chardata.hits));
	// GFGumpPic(gump, 325, 67, 111, 0);
   // GFHtmlShadowed(gump, 379, 74, 60, 20, "#FFFFFF", "Mana", 5);
   // GFTooltipText(gump, "Este é seu valor máximo de mana, sem nenhum modificador. Mana é usado em habilidades mágicas.");
	// GFTextLine(gump, 382, 94, 0, "{}".format(chardata.mana));
	// GFGumpPic(gump, 422, 69, 107, 0);
   // GFHtmlShadowed(gump, 477, 76, 60, 20, "#FFFFFF", "Vigor", 5);
   // GFTooltipText(gump, "Este é seu valor máximo de vigor, sem nenhum modificador. Vigor é usado para tarefas físicas e algumas habilidades.");
	// GFTextLine(gump, 482, 93, 0, "{}".format(chardata.stam));

   // buildGodGump(gump, chardata.god, chardata.level, power);
   
	// GFTextLine(gump, 196, 501, 0, "Coloque seu mouse sobre os icones para ver descrições detalhadas");
   
	return GFSendGump(who, gump);
endfunction

function SendBackgroundGump(gump, who, edit, targ)
   buildPageHeader(gump, targ, "Histórico");
	var valores := ficharp_elem.GetProp("Ficha");

	GFTextLine(gump, 43, 70, 2212, "Característica do Personagem (Max. 6)");
	GFHTMLArea(gump, 43, 89, 610, 115, OrganizarTexto(valores, "Caracteristicas"), 1, 1);
   
   if (edit)
      if (len(valores.Caracteristicas) < 6) 
         GFAddButton(gump, 616, 69, G_PLUS_BTN, G_PLUS_BTN, GF_CLOSE_BTN, GF_BKG_ADD_BTN+1);
      else
         GFGumpPic(gump, 616, 69, G_PLUS_BTN, 1000);
      endif

      if (len(valores.Caracteristicas)) 
         GFAddButton(gump, 635, 69, G_MINUS_BTN, G_MINUS_BTN, GF_CLOSE_BTN, GF_BKG_REM_BTN+1); 
      else 
         GFGumpPic(gump, 635, 69, G_MINUS_BTN, 1000);
      endif
   endif

	GFTextLine(gump, 41, 208, 2212, "Anotações do Jogador");
	GFHTMLArea(gump, 41, 227, 370, 124, OrganizarTexto(valores, "Anotacoes"), 1, 1);
   if (edit)
      GFAddButton(gump, 378, 207, 55, 55, GF_CLOSE_BTN, GF_BKG_ADD_BTN+2);
      if (len(valores.Anotacoes)) GFAddButton(gump, 396, 207, 56, 56, GF_CLOSE_BTN, GF_BKG_REM_BTN+2);
      else GFGumpPic(gump, 396, 207, 56, 1000); endif
   endif


	GFTextLine(gump, 41, 353, 1000, "Grandes Feitos / Anotações da Staff");
	GFHTMLArea(gump, 41, 371, 369, 116, OrganizarTexto(valores, "Feitos"), 1, 1);
   if (edit > 2)
      GFAddButton(gump, 378, 353, 55, 55, GF_CLOSE_BTN, GF_BKG_ADD_BTN+3);
      if (len(valores.Feitos)) GFAddButton(gump, 396, 353, 56, 56, GF_CLOSE_BTN, GF_BKG_REM_BTN+3); endif
   endif

   GFTextLine(gump, 416, 207, 1000, "Avaliações de Interpretação");
	GFHTMLArea(gump, 416, 227, 282, 261, OrganizarTexto(valores, "Avaliacoes"), 1, 1);

	return GFSendGump(who, gump);
endfunction

function fichaSetProp(who, prop, value)
	var ficharp_data_file := DFOpenDataFile("ficharp", DF_CREATE);
	var ficharp_elem := DFFindElement(ficharp_data_file, Hex(who.serial), DF_NO_CREATE);
	
	var setvalue := ficharp_elem.SetProp(prop, value);
	
	return setvalue;
	
endfunction

function OrganizarTexto(valores, prop)
	var texto := "<BASEFONT COLOR=#330000>";

	var i := 1;
	foreach valor in (valores[prop])
		texto := texto+i+". "+valor+"<br>";
		i+=1;
		sleepms(5);
	endforeach
	
	return texto;
endfunction

function HandleSkillPage(who, byref chardata, res, targ)
   if (res >= 300 && res <= 450)
      var hab := getFeatById(res - 300, "RETURN_CLASS");
      var i := FindInArray(chardata[hab.ClassType], struct{ id := hab.Class });
      if (!i) 
         return SendSysMessageEx(who, "{} não encontrado: {}".format(hab.ClassType, hab.Class)); 
      endif

      chardata := GetObjProperty(who, "chardata");
      if (!(hab.FeatId in chardata[hab.ClassType][i].habs))
         if (chardata.points < hab.PointCost)
            return SendSysMessageEx(who, "Você não tem os {} pontos necessários para adquirir essa habilidade".format(hab.PointCost));
         endif

         if (YesNo(who, "Deseja mesmo adquirir esta habilidade? Custará {} pontos".format(hab.PointCost)))
            chardata := GetObjProperty(who, "chardata");
            if (chardata.points < hab.PointCost)
               return SendSysMessageEx(who, "Você não tem os {} pontos necessários para adquirir essa habilidade".format(hab.PointCost));
            endif
            chardata.points -= hab.PointCost;
            chardata[hab.ClassType][i].habs.append(hab.FeatId);
            if (hab.FeatId == 69) AP_SetTrueStat(who, "Strength", 26); endif // Braços Fortes
            SetObjProperty(who, "chardata", chardata);
         endif
      elseif (hab.ClassType == "classes" && !(hab.FeatId in chardata[hab.ClassType][i].selected_habs))
         var is_changing := 0;
         var hab_index := chardata[hab.ClassType][i].selected_habs.size() + 1;
         foreach hab_id in (chardata[hab.ClassType][i].selected_habs)
            var hab_obj := getFeatById(hab_id);
            if (hab_obj.Group == hab.Group)
               hab_index := _hab_id_iter;
               is_changing := 1;
               break;
            endif
            sleepms(2);
         endforeach

         if (is_changing)
            if (TS_GetCooldown(who, "HabUsed"))
               return SendSysMessageEx(who, "Você deve aguardar 5 minutos fora de combate para trocar habilidades.", SSM_FAIL);
            endif
         endif
         
         var old_hab_id := chardata[hab.ClassType][i].selected_habs[hab_index];
         chardata[hab.ClassType][i].selected_habs[hab_index] := hab.FeatId;
         SetObjProperty(who, "chardata", chardata);

         var hotbar := GetObjProperty(who, "hotbar");
         var hotbar_i := 1;
         while (hotbar_i)
            hotbar_i := FindInArray(hotbar.shortcuts, struct{ id := old_hab_id });
            if (hotbar_i)
               hotbar.shortcuts[hotbar_i] := struct{ id := hab.FeatId };
            endif
            sleepms(2);
         endwhile

         SetObjProperty(who, "hotbar", hotbar);
         CloseGump( who, 0x945, 1 );

      else
         SendSysMessageEx(who, "Use essa habilidade através da barra de atalhos.", SSM_INFO);
      endif
   elseif (res == GF_NEW_PROFICIENCY)
      LearnProfiency(who, targ, chardata);
   elseif (res >= GF_ATTR_UPGRADE_BTN)
      chardata := GetObjProperty(who, "chardata");
      if (chardata.vitalpoints < 1) // Vital = Attribute
         return SendSysMessageEx(who, "Você não tem mais pontos de atributo disponíveis.");
      endif
      var attr := attributes[res - GF_ATTR_UPGRADE_BTN];
      who.SetStat(attr, 1, SS_ADD);

      chardata.vitalpoints -= 1;
      SetObjProperty(who, "chardata", chardata);
      RecalcVitals(who, RECALC_NO_INTRINSIC_MOD);
   // elseif (res == GF_MANA_BTN)
   //    chardata := GetObjProperty(who, "chardata");
   //    if (chardata.vitalpoints < 1)
   //       return SendSysMessageEx(who, "Você não tem mais pontos de vitalidade disponíveis.");
   //    endif
   //    chardata.mana += 50;
   //    chardata.vitalpoints -= 1;
   //    SetObjProperty(who, "chardata", chardata);
   //    RecalcVitals(who, RECALC_NO_INTRINSIC_MOD);
   // elseif (res == GF_STAM_BTN)
   //    chardata := GetObjProperty(who, "chardata");
   //    if (chardata.vitalpoints < 1)
   //       return SendSysMessageEx(who, "Você não tem mais pontos de vitalidade disponíveis.");
   //    endif
   //    chardata.stam += 10;
   //    chardata.vitalpoints -= 1;
   //    SetObjProperty(who, "chardata", chardata);
   //    RecalcVitals(who, RECALC_NO_INTRINSIC_MOD);
   // elseif (res == GF_CHANGE_CLASS)
      // changeClass(who, targ, chardata);
   endif
endfunction

function HandleBackgroundPage(who, res, targ)
   var tips := array{"Caracteristicas", "Anotacoes", "Feitos"};
   if (res[0] >= GF_BKG_REM_BTN)
      res := cint(res[0] - GF_BKG_REM_BTN);
      res := tips[res];
      
      var value := ficharp_elem.GetProp("Ficha");
      var opts := array{};
      foreach value in (value[res])
         opts.append("Linha {}".format(_value_iter));
         sleepms(2);
      endforeach

      opts.append("Cancelar");
      
      var apagar := RadioGump(who, 0, 0, "Quais linhas deseja apagar?", opts, 1, len(opts));
      if (apagar != len(opts))
          value[res].erase(apagar);
          fichaSetProp(targ, "Ficha", value);
      endif
   elseif (res[0] >= GF_BKG_ADD_BTN)
      res := cint(res[0] - GF_BKG_ADD_BTN);
      res := tips[res];

      var value := ficharp_elem.GetProp("Ficha");
      var resposta := GumpPromptMultiLine(who);
      if (resposta)
         value[res].append(resposta);
         var teste := fichaSetProp(targ, "Ficha", value);
         
         if (res == "Feitos")
            PrintTextPrivate(targ, "*Você recebeu uma anotação da Staff!*", targ, SSM_INFO);
            PrintTextPrivate(targ, "*Você recebeu uma anotação da Staff!*", who, SSM_INFO);			
         endif
      endif
   endif
endfunction

function LearnProfiency(who, targ, byref chardata)
   var opts := array{};
   foreach prof_name in GetConfigStringKeys(profCfg)
      if (!(prof_name in chardata.proficiencias))
         opts.append(prof_name);
      endif
      sleepms(2);
   endforeach

   var extra := "";
   if (chardata.proficiencias.size() >= 4)
      extra := " (Custará 1 ponto de personagem)";
   endif

   var new_prof := QuestionsGump(who, array{
      struct{ title := "Qual Proficiência deseja aprender?{}".format(extra), radio := opts }
   });

   if (!new_prof || !new_prof[1]|| new_prof[1] == "Cancelar") return; endif

   new_prof := new_prof[1];

   if (chardata.proficiencias.size() >= 4)
      if (!YesNo(who, "Aprender a proficiência {} custará 1 Ponto de Personagem. Deseja continuar?"))
         return;
      endif
   endif

   chardata := GetObjProperty(targ, "chardata");
   if (!chardata.proficiencias) chardata.proficiencias := array{}; endif
   
   if (chardata.proficiencias.size() >= 4)
      if (!chardata.points)
         SendSysMessageEx(who, "Pontos insuficientes para comprar esta proficiencia", SSM_FAIL);
      endif
      chardata.points -= 1;
   endif

   chardata.proficiencias.append(new_prof);
   SendSysMessageEx(who, "Proficiência {} aprendida.".format(new_prof));
   SetObjProperty(targ, "chardata", chardata);
endfunction


function changeClass(who, targ, byref chardata)
   var classes := struct{};
   foreach classe_name in GetConfigStringKeys(classCfg)
      var classe := FindConfigElem(classCfg, classe_name);
      if (classe.Caminho && classe.Type == "Main") 
         if (!classes[classe.Caminho]) classes[classe.Caminho] := array{}; endif
         classes[classe.Caminho].append(struct{
            caminho := classe.Caminho,
            type := classe.Type,
            id := classe_name,
            level := 1,
            icon := cint(classe.Icon)
         });
      endif
      sleepms(2);
   endforeach

	var gump := GFCreateGump();

   GFSetID(gump, GUMPID_SKILLLIST);
	GFResizePic(gump, 13, 13, 9380, 600, 296);
	GFGumpPicTiled(gump, 36, 45, 530, 10, 50); // margem
	GFGumpPicTiled(gump, 39, 266, 523, 10, 50); // margem
   GFHtmlShadowed(gump, 240, 59, 150, 20, "#FFFFFF", "Selecione uma classe:", 5);

   var x := 0;
   foreach caminho in (classes.keys())
      GFHtmlShadowed(gump, 60+x, 104, 132, 20, "#FFD300", "<center>Caminho do {}".format(caminho), 4);

      foreach classe in (classes[caminho])
         if (FindInArray(chardata.classes, struct{ id := classe.id }) || who.cmdlevel >= 3);
	         GFAddButton(gump,51+x, 133, classe.icon, classe.icon+1, GF_CLOSE_BTN, "{}{}".format(_caminho_iter, _classe_iter)); // cancel
         else
            GFGumpPic(gump, 51+x, 133, classe.icon, 1000);
         endif
         GFHtmlShadowed(gump, 45+x, 197, 78, 20, "#FFFFFF", "<center>{}".format(classe.id), 4);

         if (_classe_iter != classes[caminho].size())
            x += 56;
	         GFGumpPicTiled(gump, 69+x, 146, 1, 39, 2701); // divisor
         endif

         x += 35;
         sleepms(2);
      endforeach

      x += 60;
      sleepms(2);
   endforeach
   
	GFAddButton(gump, 280, 229, 2072, 2072, GF_CLOSE_BTN, 1); // cancel

	var res := GFSendGump(who, gump)[0];
   if (res < 10)
      return;
   endif

   res := cstr(res);
   var caminho := classes.keys()[cint(res[1])];
   var classe := classes[caminho][cint(res[2])];

   var current_class := chardata.classes[1];
   var new_class := FindInArray(chardata.classes, struct{ id := classe.id });
   if (!new_class)
      chardata.classes.append(struct{ id := classe.id, habs := array{}, selected_habs := array{}, exp := 0 });
      new_class := chardata.classes.size();
   endif

   chardata.classes[1] := chardata.classes[new_class];
   chardata.classes[new_class] := current_class;
   chardata.current_class := classe.id;
   SetObjProperty(who, "chardata", chardata);
endfunction


program skillwin(who, targ, page)
   _resolveParams(who, targ, page);
   var cur_page := 0;
   if (page) 
      cur_page := 1;
   endif

   if (!targ) 
      targ := who;
   endif

   if (CloseGump( who, GUMPID_SKILLLIST) || GetObjProperty(who, "criandochar"))
      return;
   endif

   if (GetScriptCooldown(who, "skillwin")) return 0; endif

   var chardata := GetObjProperty(targ, "chardata");

   ficharp_elem := DFFindElement(ficharp_data_file, Hex(targ.serial), DF_NO_CREATE);
   if (!ficharp_elem)
      ficharp_elem := DFFindElement(ficharp_data_file, Hex(targ.serial), DF_CREATE);
      var ficha := struct;
      ficha.+Caracteristicas := array{};
      ficha.+Feitos          := array{};
      ficha.+Anotacoes       := array{};
      ficha.+Avaliacoes      := array{};
      fichaSetProp(targ, "Ficha", ficha);
   endif

   var baseGump := GFCreateGump();
   GFSetID(baseGump, GUMPID_SKILLLIST);
	GFResizePic(baseGump, 13, 13, DEFAULT_BACKGROUND, 654, 660);

   var res := 1;
   while (who.connected && res)
      if (cur_page == 0)
         var power := CalculateRawDamage(targ, 0, targ.weapon);
         res := SendSkillGump(baseGump, who, chardata, targ, power)[0];
      elseif (cur_page == 1)
         res := SendBackgroundGump(baseGump, who, _ifElse(who.cmdlevel >= 3, 3, 1), targ)[0];
      elseif (cur_page == 2)
         res := PetSkillGump(who, targ)[0];
      endif
      
      if (res == GF_CHANGE_PAGE)
         cur_page := !cur_page;
      elseif (res == GF_CHANGE_PAGE_TAME)
         cur_page := _ifElse(!cur_page, 2, 0);
      elseif (res)
         if (cur_page == 0)
            HandleSkillPage(who, chardata, res, targ);
         elseif(cur_page == 1)
            HandleBackgroundPage(who, res, targ);
         elseif(cur_page == 2)
            HandleTamingPage(who, res, targ);
         endif
      endif

      sleepms(20);
   endwhile
endprogram
