/* $Id: skillwin.src 402 2005-10-04 09:33:15Z panosl $
 *
 * Purpose
 * This script is called when a player clicks the skill button in his paperdoll.
 *
 * Parameters
 * who:     Reference to the character who clicked the skill button
 *
 * Return value: Ignored
 *
 */
use uo;
use basic;

include ":charactercreation:characters";
include ":charactercreation:feats";
include ":tn:tngumps";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":gumps:yesno";
include ":taming:taming";
include "include/say";
include "include/utils";
include "include/client";
include ":gumps:requestgump";
include ":gumps:htmlgump";
include ":crafting:craft_props";

CONST GF_CHANGE_PAGE := 2;
CONST GF_CHANGE_PAGE_TAME := 3;

CONST GF_HITS_BTN := 5;
CONST GF_MANA_BTN := 6;
CONST GF_STAM_BTN := 7;
CONST GF_CHANGE_CLASS := 8;

CONST GF_BKG_REM_BTN := 200;
CONST GF_BKG_ADD_BTN := 100;

var ficharp_data_file := DFOpenDataFile("ficharp", DF_CREATE);
var ficharp_elem;

function buildSubClass(who, targ, charlevel, byref gump, subclass, x, y)
   if (!subclass)
      GFHtmlShadowed(gump, 307, y+15, 150, 20, "#FFFFFF", "Sem subclasse", 4);
      return;
   endif
   
   var feats := GetClassFeats(subclass.id);
   GFHtmlShadowed(gump, x-16, y, 92, 20, "#FFFFFF", "<center>{}".format(subclass.id), 5);
   if (subclass.level >= 3)
      GFGumpPicTiled(gump, x-19, y+19, 96, 8, 9753);
   else
      buildExpBar(gump, x-19, y+19, 96, subclass.exp, GetClassMaxExp(subclass));
   endif
   GFTextLine(gump, x+14, y+29, 1000, "Lv. {}".format(subclass.level));
   
   var cur_group := 1;
   var x_pos := x+114;
   var power := CalculateRawDamage(targ, 0, targ.weapon);
   foreach hab in feats
      if (hab.Group != cur_group)
         GFGumpPicTiled(gump, x_pos+5, y+9, 1, 20, 2701);  // divisor
         cur_group := hab.Group;
         x_pos += 15;
      endif

      var color := 0;
      if (!(hab.FeatId in subclass.habs) && (who.cmdlevel < 3 && who != targ))
         color := 1000; 
      endif
      
      if (color != 1000 || (charlevel >= hab.Level && cint(subclass.level) >= hab.Group) && who == targ)
         GFAddButton(gump,  x_pos, y-2, hab.Icon, hab.Icon, GF_CLOSE_BTN, 300+hab.FeatID); // hab
      endif

      GFGumpPic(gump, x_pos, y-2, hab.Icon, color); // hab
      GFTooltipText(gump, BuildFeatToolTip(hab, !(hab.FeatId in subclass.habs), power));
      x_pos += 46;
      sleepms(2);
   endforeach
endfunction

function buildClass(who, targ, charlevel, byref gump, classe, extrahabs := array{})
   var classCfg := ReadConfigFile(":charactercreation:config/classes");
   var elem := FindConfigElem(classCfg, classe.id);
   if (!elem) return; endif

   var feats := GetClassFeats(classe.id, elem);

   GFAddButton(gump, 64, 177, cint(elem.Icon), cint(elem.Icon)+1, GF_CLOSE_BTN, GF_CHANGE_CLASS); // hab
   GFHtmlShadowed(gump, 50, 155, 100, 20, "#FFFFFF", "<center>{}".format(classe.id), 5);
   if (classe.level >= 4)
      GFGumpPicTiled(gump, 50, 244, 96, 8, 9753);
   else
      buildExpBar(gump, 50, 244, 96, classe.exp, GetClassMaxExp(classe));
   endif
   GFTooltipText(gump, "Experiência de sua classe. Faça missões e tarefas relacionadas a sua classe para aumentar sua experiência e disponibilizar novas habilidades.");
   GFTextLine(gump, 79, 250, 1000, "Lv. {}".format(cint(classe.level)));
   
   var cur_group := 1;
   var x := 174;
   var y := 178;

   var power := CalculateRawDamage(targ, 0, targ.weapon);
   for (cur_group := 1; cur_group <= 4; cur_group += 1)
      var i;
      var feat_list := FindAllElemInArray(feats, struct{ Group := cur_group }) + FindAllElemInArray(extrahabs, struct{ Group := cur_group });
      for (i := 1; i <= 4; i += 1)
         var hab := feat_list[i];

         if (hab)
            var color := 0;
            if (hab.FeatId in classe.selected_habs)
               color := 75;
            elseif (!(hab.FeatId in classe.habs) && (who.cmdlevel < 3 && who != targ))
               color := 1000; 
            endif

            if (color == 0 || (charlevel >= hab.Level && cint(classe.level) >= hab.Group) && who == targ)
               GFAddButton(gump, x, y-2, hab.Icon, hab.Icon, GF_CLOSE_BTN, 300+hab.FeatID); // hab
            endif
            GFGumpPic(gump, x, y-2, hab.Icon, color); // hab
            GFTooltipText(gump, BuildFeatToolTip(hab, !(hab.FeatId in classe.habs), power));
         else
            GFGumpPic(gump, x, y, 0x5DD3, 1000);
            GFTooltipText(gump, "Habilidade Indisponível");
            // GFGumpPic(gump, x+2, y+8, 27, 1000);
         endif

         if (i == 2)
            x -= 48;
            y += 45;
         else
            x += 48;
         endif

         sleepms(2);
      endfor

      GFGumpPicTiled(gump, x+3, 197, 1, 39, 2701);  // divisor
      x += 10;
      y -= 45;
      sleepms(2);
   endfor

   GFGumpPic(gump, 603, 192, 0x5DD3, 1000);
   GFTooltipText(gump, "Habilidade Indisponível");
endfunction

function buildGodGump(byref gump, god, level)
   GFResizePic(gump, 684, 148, 5170, 138, 352); //background
   GFHtmlShadowed(gump, 737, 181, 50, 20, "#FFFFFF", "Deus", 5);
   GFHtmlShadowed(gump, 728-2, 200, 55, 20, "#FFFFFF", "<center>{}".format(god), 4);
   GFGumpPic(gump, 772, 184, 59, 0); // bar
   GFGumpPic(gump, 703, 183, 57, 0); // bar

   var god_feats := GetGodFeats(god);

   foreach hab in god_feats
      var color := 0;
      if (level < hab.Level) color := 1000; endif
      
      GFGumpPic(gump, 736-7, 221+((_hab_iter-1) * 49), cint(hab.Icon), color);
      GFTooltipText(gump, BuildFeatToolTip(hab));
      GFTextLine(gump, 743-7, 245+((_hab_iter-1) * 49), 1000, "Lv{}".format(hab.Level));

      sleepms(2);
   endforeach
endfunction

function AddVitalIncreaseButtons(byref gump)
   GFAddButton(gump, 269, 107, 55, 55, GF_CLOSE_BTN, GF_HITS_BTN);
   GFTooltipText(gump, "Clique para aumentar sua vida em 100");
   GFAddButton(gump, 366, 107, 55, 55, GF_CLOSE_BTN, GF_MANA_BTN);
   GFTooltipText(gump, "Clique para aumentar sua mana em 50");
   GFAddButton(gump, 468, 107, 55, 55, GF_CLOSE_BTN, GF_STAM_BTN);
   GFTooltipText(gump, "Clique para aumentar seu vigor em 10");
endfunction

function buildExpBar(byref gump, x, y, width, value, maxexp) 
   GFGumpPicTiled(gump, x, y, width, 8, 0x2616);

   var exp_width := cint((value * width) / maxexp);
   GFGumpPicTiled(gump, x, y, exp_width, 8, 9751);
endfunction

function SendSkillGump(who, chardata, targ)
   var gump := GFCreateGump();

   GFSetID(gump, GUMPID_SKILLLIST);
	GFResizePic(gump, 13, 13, 9380, 712, 510);

   GFHtmlShadowed(gump, 297+15, 45, 150, 20, "#FFFFFF", "Ficha de Personagem", 4);
	GFAddButton(gump, 425+13, 49, 2224, 2224, GF_CLOSE_BTN, GF_CHANGE_PAGE);
   if (HaveFeatSecondary(targ, 53))
	   GFAddButton(gump, 275+10, 48, 2223, 2223, GF_CLOSE_BTN, GF_CHANGE_PAGE_TAME);
   endif
	GFGumpPic(gump, 46, 60, 112, 0);
   GFTooltipText(gump, "Este é o level do seu personagem, seguido pelos pontos de habilidade disponíveis. Pontos são gastos para aprender habilidades de classe e subclasse.");
   GFHtmlShadowed(gump, 99, 77, 60, 20, "#FFFFFF", "Level", 5);
	GFTextLine(gump, 113, 93, 0, "{}".format(chardata.level));
   GFHtmlShadowed(gump, 153, 77, 60, 20, "#FFFFFF", "Pontos", 5);
	GFTextLine(gump, 164, 93, 0, "{}".format(chardata.points));
   GFTooltipText(gump, "Pontos são gastos para aprender habilidades de classe e subclasse.");
	GFTextLine(gump, 67, 122, 0, "Exp:");
   buildExpBar(gump, 101, 129, 576, chardata.exppoints, targ.getMaxExp());
   GFTooltipText(gump, "Experiëncia de personagem é adquirida executando diversas tarefas como: matar monstros, criar itens, escrevendo livros e usando habilidades.");
   
   if (chardata.vitalpoints > 0 && who == targ) AddVitalIncreaseButtons(gump); endif

   if (chardata.raca)
      GFHtmlShadowed(gump, 582, 61, 90, 20, "#FFFFFF", "<center>Raça: {}".format(targ.getRace(1)), 4);
      var race_habs := GetRaceFeats(chardata.raca);
      foreach hab in race_habs
         GFGumpPic(gump, 580 + ((_hab_iter-1) * 49), 81, hab.Icon, 0 ); //hab
         GFTooltipText(gump, BuildFeatToolTip(hab));
      endforeach
   else
      GFHtmlShadowed(gump, 582, 61, 90, 20, "#FFFFFF", "<center>Raça Indefinida", 4);
   endif

	GFGumpPic(gump, 37, 136, 57, 0); // bar
	GFGumpPicTiled(gump, 65, 136, 607, 21, 58); //bar
	GFGumpPic(gump, 667, 136, 59, 0); // bar

	GFTextLine(gump, 186, 156, 0, "Habilidade 1");
	GFTextLine(gump, 292, 157, 0, "Habilidade 2");
	GFTextLine(gump, 396, 156, 0, "Habilidade 3");
	GFTextLine(gump, 503, 155, 0, "Habilidade 4");
	GFTextLine(gump, 604, 155, 0, "Ultimate");

   buildClass(who, targ, chardata.level, gump, chardata.classes[1], array{});

	GFGumpPic(gump, 37, 274, 57, 0); // bar
	GFGumpPicTiled(gump, 67, 274, 607, 21, 58); //bar
	GFGumpPic(gump, 667, 274, 59, 0); //bar

   buildSubClass(who, targ, chardata.level, gump, chardata.subclasses[1], 141, 297);

	GFGumpPic(gump, 94, 350, 57, 0); // bar
	GFGumpPicTiled(gump, 123, 350, 501, 21, 58); // bar
	GFGumpPic(gump, 624, 350, 59, 0); // bar

   buildSubClass(who, targ, chardata.level, gump, chardata.subclasses[2], 141, 368);

	GFGumpPic(gump, 93, 421, 57, 0); // bar
	GFGumpPicTiled(gump, 122, 421, 501, 21, 58); // bar
	GFGumpPic(gump, 623, 421, 59, 0); // bar

   buildSubClass(who, targ, chardata.level, gump, chardata.subclasses[3], 141, 439);

	GFGumpPic(gump, 223, 63, 105, 0);
   GFTooltipText(gump, "Este é seu valor máximo de vida, sem nenhum modificador.");
   GFHtmlShadowed(gump, 285, 76, 60, 20, "#FFFFFF", "Vida", 5);
	GFTextLine(gump, 285, 94, 0, "{}".format(chardata.hits));
	GFGumpPic(gump, 325, 67, 111, 0);
   GFHtmlShadowed(gump, 379, 74, 60, 20, "#FFFFFF", "Mana", 5);
   GFTooltipText(gump, "Este é seu valor máximo de mana, sem nenhum modificador. Mana é usado em habilidades mágicas.");
	GFTextLine(gump, 382, 94, 0, "{}".format(chardata.mana));
	GFGumpPic(gump, 422, 69, 107, 0);
   GFHtmlShadowed(gump, 477, 76, 60, 20, "#FFFFFF", "Vigor", 5);
   GFTooltipText(gump, "Este é seu valor máximo de vigor, sem nenhum modificador. Vigor é usado para tarefas físicas e algumas habilidades.");
	GFTextLine(gump, 482, 93, 0, "{}".format(chardata.stam));

   buildGodGump(gump, chardata.god, chardata.level);
   
	GFTextLine(gump, 196, 501, 0, "Coloque seu mouse sobre os icones para ver descrições detalhadas");

	return GFSendGump(who, gump);
endfunction

function SendBackgroundGump(who, edit, targ)
	var valores := ficharp_elem.GetProp("Ficha");
   var gump := GFCreateGump();
   GFSetID(gump, GUMPID_SKILLLIST);
	GFResizePic(gump, 13, 13, 9380, 712, 510);

   GFHtmlShadowed(gump, 299+5, 45, 180, 20, "#FFFFFF", "Background do Personagem", 4);
	GFAddButton(gump, 275+5, 48, 2223, 2223, GF_CLOSE_BTN, GF_CHANGE_PAGE);

	GFTextLine(gump, 43, 70, 2212, "Característica do Personagem (Max. 6)");
	GFHTMLArea(gump, 43, 89, 654, 115, OrganizarTexto(ficharp_elem, valores, "Caracteristicas"), 1, 1);
   if (edit)
      if (len(valores.Caracteristicas) < 6) 
         GFAddButton(gump, 663, 69, 55, 55, GF_CLOSE_BTN, GF_BKG_ADD_BTN+1);
      else
         GFGumpPic(gump, 663, 69, 55, 1000);
      endif
      if (len(valores.Caracteristicas)) GFAddButton(gump, 681, 69, 56, 56, GF_CLOSE_BTN, GF_BKG_REM_BTN+1); 
      else GFGumpPic(gump, 681, 69, 56, 1000); endif
      
   endif

	GFTextLine(gump, 41, 208, 2212, "Anotações do Jogador");
	GFHTMLArea(gump, 41, 227, 370, 124, OrganizarTexto(ficharp_elem, valores, "Anotacoes"), 1, 1);
   if (edit)
      GFAddButton(gump, 378, 207, 55, 55, GF_CLOSE_BTN, GF_BKG_ADD_BTN+2);
      if (len(valores.Anotacoes)) GFAddButton(gump, 396, 207, 56, 56, GF_CLOSE_BTN, GF_BKG_REM_BTN+2);
      else GFGumpPic(gump, 396, 207, 56, 1000); endif
   endif


   GFTextLine(gump, 416, 207, 1000, "Avaliações de Interpretação");
	GFHTMLArea(gump, 416, 227, 282, 261, OrganizarTexto(ficharp_elem, valores, "Avaliacoes"), 1, 1);

	GFTextLine(gump, 41, 353, 1000, "Grandes Feitos / Anotações da Staff");
	GFHTMLArea(gump, 41, 371, 369, 116, OrganizarTexto(ficharp_elem, valores, "Feitos"), 1, 1);
   if (edit > 2)
      GFAddButton(gump, 378, 353, 55, 55, GF_CLOSE_BTN, GF_BKG_ADD_BTN+3);
      if (len(valores.Feitos)) GFAddButton(gump, 396, 353, 56, 56, GF_CLOSE_BTN, GF_BKG_REM_BTN+3); endif
   endif

	return GFSendGump(who, gump);
endfunction

function fichaSetProp(who, prop, value)
	var ficharp_data_file := DFOpenDataFile("ficharp", DF_CREATE);
	var ficharp_elem := DFFindElement(ficharp_data_file, Hex(who.serial), DF_NO_CREATE);
	
	var setvalue := ficharp_elem.SetProp(prop, value);
	
	return setvalue;
	
endfunction

function OrganizarTexto(ficharp_elem, valores, prop)
	var texto := "<BASEFONT COLOR=#330000>";

	var i := 1;
	foreach valor in (valores[prop])
		texto := texto+i+". "+valor+"<br>";
		i+=1;
		sleepms(5);
	endforeach
	
	return texto;
endfunction

function PegarResposta(who)
	var gump := GFCreateGump();
	var num_lines := 14;
	var msg_array := array;
	var y_pos := 80;
	var i;

	GFResizePic(gump, 0, 0, 3600, 420, 405-10);
	GFResizePic(gump, 15, 15, 0x13BE, 390, 55);
	GFTextMid(gump, 15, 20, 390, 1153, "Descreva sua nova linha.");
	GFTextMid(gump, 60, 40, 330, 1153, "Você pode usar <i></i> para itálico e <b></b> para negrito!");
	GFResizePic(gump, 15, 70+280+2, 0x13BE, 390, 28);
	GFAddButton(gump, 200, 70+280+5, 2075, 2074, GF_CLOSE_BTN, 20);
	GFResizePic(gump, 15, 70, 0xA3C, 390, 280);
	for ( i:=1; i<=num_lines; i:=i+1 )
		msg_array.Append(GFTextEntry(gump, 20, y_pos, 396, 20, 1153, ""));
		y_pos := y_pos+19;
	endfor
	
	var input := GFSendGump(who, gump);

	if (input[0] == 20)
		var i;
		for ( i:=1; i<=msg_array.Size(); i:=i+1 )
			var line := GFExtractData(input, msg_array[i]);
			if ( line )
				line := " "+line;
				msg_array[i] := line;
			else
				msg_array[i] := "";
			endif
		endfor
	
		//Clear off empty lines.
		for ( i := msg_array.Size(); i>=1; i:=i-1 )
			if ( Len(msg_array[i]) <= 0 )
				msg_array.Erase(i);
			endif
			SleepMS(5);
		endfor
		
		var text := "";
		for ( i:=1; i<=msg_array.Size(); i:=i+1 )
			text := text + msg_array[i];
			SleepMS(5);
		endfor
		return text;
	endif
endfunction

program skillwin(who, targ)
   _resolveParams(who, targ);
   if (!targ) targ := who; endif

   if (CloseGump( who, GUMPID_SKILLLIST) || GetObjProperty(who, "criandochar"))
      return;
   endif

   var chardata := GetObjProperty(targ, "chardata");

   ficharp_elem := DFFindElement(ficharp_data_file, Hex(targ.serial), DF_NO_CREATE);
   if (!ficharp_elem)
      ficharp_elem := DFFindElement(ficharp_data_file, Hex(targ.serial), DF_CREATE);
      var ficha := struct;
      ficha.+Caracteristicas := array{};
      ficha.+Feitos          := array{};
      ficha.+Anotacoes       := array{};
      ficha.+Avaliacoes      := array{};
      fichaSetProp(targ, "Ficha", ficha);
   endif

   var cur_page := 0;
   var res := 1;
   while (who.connected && res)
      if (cur_page == 0)
         res := SendSkillGump(who, chardata, targ)[0];
      elseif (cur_page == 1)
         res := SendBackgroundGump(who, _ifElse(who.cmdlevel >= 3, 3, 1), targ)[0];
      elseif (cur_page == 2)
         res := PetSkillGump(who, targ)[0];
      endif
      
      if (res == GF_CHANGE_PAGE)
         cur_page := !cur_page;
      elseif (res == GF_CHANGE_PAGE_TAME)
         cur_page := _ifElse(!cur_page, 2, 0);
      elseif (res)
         if (cur_page == 0)
            HandleSkillPage(who, chardata, res, targ);
         elseif(cur_page == 1)
            HandleBackgroundPage(who, res, targ);
         elseif(cur_page == 2)
            HandleTamingPage(who, res, targ);
         endif
      endif

      sleepms(2);
   endwhile
endprogram

function HandleSkillPage(who, byref chardata, res, targ)
   if (res >= 300)
      var hab := getFeatById(res - 300, "RETURN_CLASS");
      var i := FindInArray(chardata[hab.ClassType], struct{ id := hab.Class });
      if (!i) 
         return SendSysMessageEx(who, "{} não encontrado: {}".format(hab.ClassType, hab.Class)); 
      endif

      chardata := GetObjProperty(who, "chardata");
      if (!(hab.FeatId in chardata[hab.ClassType][i].habs))
         if (chardata.points < hab.PointCost)
            return SendSysMessageEx(who, "Você não tem os {} pontos necessários para adquirir essa habilidade".format(hab.PointCost));
         endif

         if (YesNo(who, "Deseja mesmo adquirir esta habilidade? Custará {} pontos".format(hab.PointCost)))
            chardata := GetObjProperty(who, "chardata");
            if (chardata.points < hab.PointCost)
               return SendSysMessageEx(who, "Você não tem os {} pontos necessários para adquirir essa habilidade".format(hab.PointCost));
            endif
            chardata.points -= hab.PointCost;
            chardata[hab.ClassType][i].habs.append(hab.FeatId);
            SetObjProperty(who, "chardata", chardata);
         endif
      elseif (hab.ClassType == "classes" && !(hab.FeatId in chardata[hab.ClassType][i].selected_habs))
         var hab_index := chardata[hab.ClassType][i].selected_habs.size() + 1;
         foreach hab_id in (chardata[hab.ClassType][i].selected_habs)
            var hab_obj := getFeatById(hab_id);
            if (hab_obj.Group == hab.Group)
               hab_index := _hab_id_iter;
               break;
            endif
            sleepms(2);
         endforeach
         var old_hab_id := chardata[hab.ClassType][i].selected_habs[hab_index];
         chardata[hab.ClassType][i].selected_habs[hab_index] := hab.FeatId;
         SetObjProperty(who, "chardata", chardata);

         var hotbar := GetObjProperty(who, "hotbar");
         var hotbar_i := 1;
         while (hotbar_i)
            hotbar_i := FindInArray(hotbar.shortcuts, struct{ id := old_hab_id });
            if (hotbar_i)
               hotbar.shortcuts[hotbar_i] := struct{ id := hab.FeatId };
            endif
            sleepms(2);
         endwhile

         SetObjProperty(who, "hotbar", hotbar);
         CloseGump( who, 0x945, 1 );

      else
         SendSysMessageEx(who, "Use essa habilidade através da barra de atalhos.", SSM_INFO);
      endif
   elseif (res == GF_HITS_BTN)
      chardata := GetObjProperty(who, "chardata");
      if (chardata.vitalpoints < 1)
         return SendSysMessageEx(who, "Você não tem mais pontos de vitalidade disponíveis.");
      endif
      chardata.hits += 120;
      chardata.vitalpoints -= 1;
      SetObjProperty(who, "chardata", chardata);
      RecalcVitals(who, RECALC_NO_INTRINSIC_MOD);
   elseif (res == GF_MANA_BTN)
      chardata := GetObjProperty(who, "chardata");
      if (chardata.vitalpoints < 1)
         return SendSysMessageEx(who, "Você não tem mais pontos de vitalidade disponíveis.");
      endif
      chardata.mana += 50;
      chardata.vitalpoints -= 1;
      SetObjProperty(who, "chardata", chardata);
      RecalcVitals(who, RECALC_NO_INTRINSIC_MOD);
   elseif (res == GF_STAM_BTN)
      chardata := GetObjProperty(who, "chardata");
      if (chardata.vitalpoints < 1)
         return SendSysMessageEx(who, "Você não tem mais pontos de vitalidade disponíveis.");
      endif
      chardata.stam += 10;
      chardata.vitalpoints -= 1;
      SetObjProperty(who, "chardata", chardata);
      RecalcVitals(who, RECALC_NO_INTRINSIC_MOD);
   elseif (res == GF_CHANGE_CLASS)
      changeClass(who, chardata);
   endif
endfunction

function HandleBackgroundPage(who, res, targ)
   var tips := array{"Caracteristicas", "Anotacoes", "Feitos"};
   if (res[0] >= GF_BKG_REM_BTN)
      res := cint(res[0] - GF_BKG_REM_BTN);
      res := tips[res];
      
      var value := ficharp_elem.GetProp("Ficha");
      var opts := array{};
      foreach value in (value[res])
         opts.append("Linha {}".format(_value_iter));
         sleepms(2);
      endforeach

      opts.append("Cancelar");
      
      var apagar := RadioGump(who, 0, 0, "Quais linhas deseja apagar?", opts, 1, len(opts));
      if (apagar != len(opts))
          value[res].erase(apagar);
          fichaSetProp(targ, "Ficha", value);
      endif
   elseif (res[0] >= GF_BKG_ADD_BTN)
      res := cint(res[0] - GF_BKG_ADD_BTN);
      res := tips[res];

      var value := ficharp_elem.GetProp("Ficha");
      var resposta := PegarResposta(who);
      if (resposta)
         value[res].append(resposta);
         var teste := fichaSetProp(targ, "Ficha", value);
         
         if (res == "Feitos")
            PrintTextPrivate(targ, "*Você recebeu uma anotação da Staff!*", targ, SSM_INFO);
            PrintTextPrivate(targ, "*Você recebeu uma anotação da Staff!*", who, SSM_INFO);			
         endif
      endif
   endif
endfunction


function changeClass(who, byref chardata)
   var classCfg := ReadConfigFile(":charactercreation:config/classes");
   var classes := struct{};
   foreach classe_name in GetConfigStringKeys(classCfg)
      var classe := FindConfigElem(classCfg, classe_name);
      if (classe.Caminho && classe.Type == "Main") 
         if (!classes[classe.Caminho]) classes[classe.Caminho] := array{}; endif
         classes[classe.Caminho].append(struct{
            caminho := classe.Caminho,
            type := classe.Type,
            id := classe_name,
            level := 1,
            icon := cint(classe.Icon)
         });
      endif
      sleepms(2);
   endforeach

	var gump := GFCreateGump();

   GFSetID(gump, GUMPID_SKILLLIST);
	GFResizePic(gump, 13, 13, 9380, 600, 296);
	GFGumpPicTiled(gump, 36, 45, 530, 10, 50); // margem
	GFGumpPicTiled(gump, 39, 266, 523, 10, 50); // margem
   GFHtmlShadowed(gump, 240, 59, 150, 20, "#FFFFFF", "Selecione uma classe:", 5);

   var x := 0;
   foreach caminho in (classes.keys())
      GFHtmlShadowed(gump, 60+x, 104, 132, 20, "#FFD300", "<center>Caminho do {}".format(caminho), 4);

      foreach classe in (classes[caminho])
         if (FindInArray(chardata.classes, struct{ id := classe.id }) || who.cmdlevel >= 3);
	         GFAddButton(gump,51+x, 133, classe.icon, classe.icon+1, GF_CLOSE_BTN, "{}{}".format(_caminho_iter, _classe_iter)); // cancel
         else
            GFGumpPic(gump, 51+x, 133, classe.icon, 1000);
         endif
         GFHtmlShadowed(gump, 45+x, 197, 78, 20, "#FFFFFF", "<center>{}".format(classe.id), 4);

         if (_classe_iter != classes[caminho].size())
            x += 56;
	         GFGumpPicTiled(gump, 69+x, 146, 1, 39, 2701); // divisor
         endif

         x += 35;
         sleepms(2);
      endforeach

      x += 60;
      sleepms(2);
   endforeach
   
	GFAddButton(gump, 280, 229, 2072, 2072, GF_CLOSE_BTN, 1); // cancel

	var res := GFSendGump(who, gump)[0];
   if (res < 10)
      return;
   endif

   res := cstr(res);
   var caminho := classes.keys()[cint(res[1])];
   var classe := classes[caminho][cint(res[2])];

   var current_class := chardata.classes[1];
   var new_class := FindInArray(chardata.classes, struct{ id := classe.id });
   if (!new_class)
      chardata.classes.append(struct{ id := classe.id, habs := array{}, selected_habs := array{}, exp := 0 });
      new_class := chardata.classes.size();
   endif

   chardata.classes[1] := chardata.classes[new_class];
   chardata.classes[new_class] := current_class;
   chardata.current_class := classe.id;
   SetObjProperty(who, "chardata", chardata);
endfunction
