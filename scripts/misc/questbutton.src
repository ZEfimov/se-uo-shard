use uo;
use basic;

include ":charactercreation:characters";
include ":tn:tngumps";
include ":gumps:gumps";
include ":quest:quest";
include ":gumps:gumps_ex";
include ":gumps:yesno";
include "include/say";
include "include/utils";
include "include/client";
include "include/colormap";

var quest_n := 1;
var itemdesc := ReadConfigFile(":*:itemdesc");

function BuildQuestInfo(who, byref gump, quest := struct{})
   var quest_progress := GetObjProperty(who, "quest_progress");
	//Quest BG
	GFGumpPic(gump, 303, 21, 1248, 0);
   GFHTMLArea(gump, 336, 74, 150, 20, "<BASEFONT SIZE=4 COLOR=#A0A0A0>DESCRIÇÃO");
   GFHtmlShadowed(gump, 342, 96, 233, 20, "#FFD300", "{}".format(quest.title), 5);
	
	foreach id in (quest.conditions)
      var condition := FindElemInArray(quest_progress, struct{ id := id });
      var y := (_id_iter-1) * 20;
      var title := condition.type;
      if (!title)
         title := "Erro ao pegar condição";
      endif

      title[" Monstro"] := "";
      title[" Item"] := "";

      if (condition.type["Coletar"])
         if (condition.qty - CheckItemAmount(who, condition.item_objtype) <= 0)
            condition.done := 1;
         endif
      elseif (condition.qty && cint(condition.qty) - cint(condition.progress) <= 0)
         condition.done := 1;
      endif

      if (condition.qty)
         title += " {}".format(condition.qty);
      endif

      if (condition.customname)
         title += " {}".format(condition.customname);
      elseif (condition.template)
         var npc_template := NPC_GetNPCConfig(condition.template);
         title += " {}".format(npc_template.Name);
      elseif (condition.item_objtype)
         var item := FindConfigElem(itemdesc, hex(condition.item_objtype));
         if (!item) item := FindConfigElem(itemdesc, cint(condition.item_objtype)); endif
         title += " {}".format(item.desc);
      endif

      var color := 1000;
      if (condition.done)
         color := 2451;
      endif
      GFTextLine(gump, 371, 120+y, _ifElse(condition.done, 1152, 1000), _ifElse(condition.done, title + " [Completo]", title));

      GFGumpPic(gump, 352, 121+y, 4033, _ifElse(condition.done, 2451, 1000));
      sleepms(2);
   endforeach
	
	var description := quest.description;
   if (quest.rewards);
      var reward_text := "";
      foreach reward in (quest.rewards)
         reward_text += "{}<br>".format(reward.type);
         sleepms(2);
      endforeach
      description += "<br><br>Recompensas:<br>{}".format(reward_text);
   endif

   GFHtmlShadowed(gump, 336, 137+(quest.conditions.size() * 20), 245, 176, "#f2984c", "{}".format(description), 4);
   // GFHTMLArea(gump, 336, 137+(quest.conditions.size() * 20), 245, 176, "<BASEFONT SIZE=4 COLOR=#2a1d03>{}".format(quest.description));
endfunction

function BuildQuestGump(who)
   var quests := GetObjProperty(who, "quests");
   if (!quests) quests := array{}; endif

	var gump := GFCreateGump(250, 200);
	
	GFPage(gump, 0);
	
	//
	GFResizePic(gump, 40, 25, 9250, 280, 390);
	
	//drag
	GFGumpPic(gump, -10, 361, 10402, 0);
	GFGumpPic(gump, 19, 194, 10422, 0);
	GFGumpPic(gump, 6, 22, 10421, 0);
	GFGumpPic(gump, 37, 15, 10420, 0);
	
	GFResizePic(gump, 110, 34, 9400, 145, 30);
   GFHtmlShadowed(gump, 154, 42, 90, 20, "#FFFFFF", "Missões", 5);

   if (quests.size())
      foreach quest in quests
         var y := ((_quest_iter-1) * 33);
         GFResizePic(gump, 54, 69+y, 5120, 252, 31);
         GFAddButton(gump, 64, 74+y, 210 + (quest_n == _quest_iter), 211, GF_CLOSE_BTN, 10+_quest_iter);
         GFTextLine(gump, 92, 74+y, 1969, "{}".format(quest.title));
      endforeach

      if (quest_n)
         var selected_quest := quests[quest_n];
         BuildQuestInfo(who, gump, selected_quest);
      endif
   else
         GFTextLine(gump, 106, 209, 1938, "Nenhuma missão disponível");
   endif

	return GFSendGump(who, gump)[0];
endfunction

program QuestButton( who )
   while (who.connected)
   var res := BuildQuestGump(who);

      if (res >= 10)
         quest_n := res - 10;
      else
         break;
      endif

      sleepms(2);
   endwhile
endprogram