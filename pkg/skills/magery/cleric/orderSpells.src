use uo;
use os;

include "include/client";
include "include/sysEvent";
include ":charactercreation:characters";
include ":charactercreation:feats";
include ":magery:clerics";
include ":magery:tnmagery";
include ":tn:tngumps";

const SPELL_BTN := 200;

program orderSpells(who, item)
   // GetObjProperty(who, "chardata").caracteristicas
   if (!who.Caracteristica("Clérigo de Anar"))
      SendSysMessageEx(who, "Você presta homenagem a Anar", SSM_INFO);
      return;
   endif

   var cfg          := ReadConfigFile(":magery:config/cleric");
   var cleric_slots := AP_GetTrueSkill(who, MILAGRE_DE_CURA) + AP_GetTrueSkill(who, MILAGRE_DE_NECROMANCIA) + 1;
   if (who.Caracteristica("Dádiva de Anar'Niel"))
      cleric_slots += 1;
   endif

   var cleric_list  := GetObjProperty(who, "cleric_list");
   if (!cleric_list)
      cleric_list := array{};
   endif

   var spell_list := array{};
   var slots_used := 0;
   foreach spell in (GetConfigIntKeys(cfg))
      sleepms(2);
      WriteSpellInfo(spell, ":magery:config/cleric");
      var spell_found := FindAllElemInArray(cleric_list, struct{ id := spell.id }, 1);
      if (spell_found)
         slots_used += cint(spell.circle * spell_found.size());
         foreach i in spell_found
            cleric_list[spell_found].circle := spell.circle;
            sleepms(2);
         endforeach
      endif

      if (spell.circle > cint(Ceil(cdbl(AP_GetTrueSkill(who, spell.pericia)) / 2)))
         continue;
      elseif (spell.type == "Auto")
         continue;
      endif
      spell_list.append(spell);
      sleepms(2);
   endforeach

   var available_slots := cleric_slots - slots_used;
   var canceled := 0;
   while (!canceled)
      RemoveUsedSpells(who, cleric_list, available_slots);
      var input := CreateClericGump(who, spell_list, available_slots);

      if (input[0] >= 200)
         if (TS_GetTimerInfo(who, "orderspell"))
            return SendSysMessageEx(who, "Você deve aguardar um pouco antes de pedir por bençãos novamente.", SSM_FAIL);
         endif
         var spell := spell_list[input[0]-200];
         var ret := StoreSpell(who, spell, cleric_list, available_slots);
         if (ret)
            item.graphic := 0x9DF2;
            sleep(2);
            item.graphic := 0x9E81;
         endif
         // play 0x9DF2
      elseif (!input[0])
         canceled := 1;
      endif
   endwhile
endprogram

function CreateClericGump(who, spell_list, available_slots)
   var gump := GFCreateGump();
   var size := spell_list.Size();
   if (size >= 1)
      size := size * 26;
   else
      size := 0;
   endif
	GFResizePic(gump, 17, 31, 9390, 359, 125+size);
	// GFHtmlShadowed(gump, 115, 70, 192, 20, "#feb98e ", "<BASEFONT Size=5>Lista de Bençãos");
	GFHTMLArea(gump, 114, 69, 192, 20, "<BASEFONT Size=5 Color=#999999 >Lista de Bençãos", 0, 0); //shadow
	GFHTMLArea(gump, 116, 71, 192, 20, "<BASEFONT Size=5 Color=#999999 >Lista de Bençãos", 0, 0); //shadow
	GFHTMLArea(gump, 115, 70, 192, 20, "<BASEFONT Size=5 Color=#ffffff >Lista de Bençãos", 0, 0);
	GFGumpPic(gump, 63, 91, 1469);
	GFGumpPic(gump, 80, 91, 1469);
	GFTextLine(gump, 63, 100, 0, "Bençãos");
	GFTextLine(gump, 259, 100, 0, "Slots");
	GFTextLine(gump, 304, 100, 0, "Receber");
	GFGumpPic(gump, 38, 103, 9773, 0);
	GFGumpPic(gump, 296, 0, 9000, 0);

   var y := 121;
   foreach spell in spell_list
      var color := "333300";
      if (!spell.pericia["Cura"])
         color := "a745a7";
      endif
      GFHTMLArea(gump, 63, y, 192, 24, "<BASEFONT color=#{}>{}".format(color, spell.name), 1, 0);
      GFToolTipText(gump, "<BASEFONT color=#{}>{}<br><BASEFONT color=#FFFFFF>{}".format(color, strreplace(spell.pericia, "_", " "), spell.description));
      GFHTMLArea(gump, 259, y, 34, 24, "<center>{}".format(spell.circle), 1, 0);
      if (available_slots >= spell.circle)
	      GFAddButton(gump, 319, y+4, 10006, 10006, GF_CLOSE_BTN, 200+_spell_iter);
      else
         GFGumpPic(gump, 319, y+5, 10006, 1891);
      endif
      sleepms(2);
      y += 26;
   endforeach

   return GFSendGump(who, gump);
endfunction

function StoreSpell(who, spellinfo, byref cleric_list, byref available_slots)
   if (available_slots-spellinfo.circle < 0)
      SendSysMessageEx(who, "Sem slots suficientes para memorizar..", SSM_FAIL);
      return 0;
   elseif (!AP_ConsumeVital(who, MANA, 2))
      SendSysMessageEx(who, "Você não consegue se concentrar em sua oração.", SSM_FAIL);
      sleep(2);
      return 0;
   endif

   var roll := rollAttrDice(who, WISDOM) + GetSkillBonus(who, spellinfo.pericia);
   if (roll > 12+(spellinfo.circle*2))
      TS_StartCooldown(who, "orderspell", 2);
      SendSysMessageEx(who, "Você teve dificuldades em conseguir a benção de anar.", SSM_FAIL);
      return 1;
   endif

   var new_spell := struct{
      "id"         := spellinfo.id,
      "powerwords" := spellinfo.powerwords,
      "circle"     := spellinfo.circle,
      "time"       := AddTimeTo(polcore().systime, 20, "minutes"),
      "used"       := 0
   };

   available_slots -= spellinfo.circle;
   cleric_list.append(new_spell);
   SetObjProperty(who, "cleric_list", cleric_list);
   SendSysMessageEx(who, "Obteu a benção de Anar.", SSM_INFO);
   return 1;
endfunction
