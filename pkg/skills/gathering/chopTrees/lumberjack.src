
use uo;
use os;
use math;

include ":attributes:attributes";
include ":datafile:datafile";
include ":gathering:settings";
include ":gathering:lumberJack";
include ":itemUtils:toolWear";
include "include/client";
include "include/facings";
include "include/say";
include "include/objtype";
include "include/sounds";

program skill_LumberJack(who,tool)
	EraseObjProperty(who, "IsMeditating");
	EraseObjProperty(who, "HealTimer");
	SendSysMessageEx(who, "Escolha a árvore para cortar.", SSM_REQUEST);
	var targ := TargetCoordinates(who);
	
	if ( !targ )
		SendSysMessageEx(who, "Cancelado.");
		return 0;
	endif

	if ( CoordinateDistance(who.x, who.y, targ.x, targ.y) > 1 )
		SendSysMessageEx(who, "Muito longe.");
		return 0;
	endif

	if ( !LJ_IsTree(targ.objtype) )
		SendSysMessageEx(who, "Isto não e uma árvore.", SSM_FAIL);
		return 0;
	endif



	var orig_x := who.x;
	var orig_y := who.y;

	//SendSysMessage(who," e" + CanChop(who, tool, targ,  orig_x, orig_y));
	while(CanChop(who, tool, targ,  orig_x, orig_y) )
		if ( !AP_ConsumeVital(who, "Stamina", 2))
			SendSysMessageEx(who, "Você esta muito cansado para continuar.", SSM_FAIL);
			break;
		endif
		ChopTree(who, tool, targ, orig_x, orig_y);
		CheckToolWear(who, tool, EXTRACAO );
		sleep(1);
		if (LJ_GetWoodAmount(who.realm, targ.x, targ.y)== 0 )
			PrintText(who, "*derruba a árvore*");
			break;
		endif
	endwhile

	SendSysMessageEx(who, "Você parou de cortar a árvore.", SSM_INFO);
endprogram

function ChopTree(who, tool, targ, orig_x, orig_y)
	var i:=1;//RandomDiceRoll("3d3");
	for ( i; i>=0; i:=i-1 )
		if ( !CanChop(who, tool, targ, orig_x, orig_y) )
			return 0;
		endif

		PerformAction(who, 0x0c);
		PlaySoundEffect(who, FLS_SFX_SKILL_LUMBERJACK);
		sleepms(1200);
	endfor

	var wood_type := GetWoodType(targ);
	var wood_amount := LJ_GetWoodAmount(who.realm, targ.x, targ.y);

	var max_wood := CInt(LJ_GetSettingsCfgElem("Settings").MaxWood);
	// The less wood there is, the more difficult it becomes.
	
	//var difficulty := CInt(105 - (100 * wood_amount / max_wood));

	var more_dif := CInt(0 + (max_wood - wood_amount));

	if (more_dif > 5)
		more_dif := 5;
	endif
	
	var difficulty := cint(GetWoodDif(targ) + more_dif);
	
	if (difficulty > 22)
		difficulty := 22;
	endif
	
	var dice_roll := rollAttrDice(who, STRENGTH) + GetSkillBonus(who, EXTRACAO);
	if ( who.cmdlevel )
		SendSysMessageEx(who, "more_dif="+more_dif);
		SendSysMessageEx(who, "MaxWood="+max_wood+"    CurWood="+wood_amount);
		SendSysMessageEx(who, "Difficulty ->"+difficulty+"    dice_roll="+dice_roll);
	endif

	if ( dice_roll > difficulty )
		var amt := cint(AP_GetStat(who, STRENGTH, RETURN_BONUS) + AP_GetTrueSkill(who, EXTRACAO));
		if (amt <= 0)
			amt := 1;
		endif
		if (amt > wood_amount)
			amt := wood_amount;
		endif
		wood_amount := cint(wood_amount - amt);
      if (wood_amount < 0)
			wood_amount := cint(0);
		endif
		LJ_SetWoodAmount(who.realm, targ.x, targ.y, wood_amount);

		var item := CreateItemInBackPack(who, cint(wood_type), cint(amt));
		if ( item.errortext )
			SendSysMessageEx(who, "Não foi possivel criar: "+wood_type+" ->"+item.errortext);
			return 0;
		else
			who.SetAchievement("oremining", 1);
			ExpGain(who, difficulty, dice_roll);
			SendSysMessageEx(who, "Você colocou a madeira na sua mochila.");
			return 1;
		endif
	endif

	SendSysMessageEx(who, "Você foi incapaz de conseguir madeira usavel dessa árvore.", SSM_FAIL);
	return 0;
endfunction

function CanChop(who, axe, targ, orig_x, orig_y)
	if ( who.hidden )
		SendSysMessageEx(who, "Você parou de cortar a árvore para ficar escondido.", SSM_INFO);
		return 0;
	elseif ( who.x != orig_x || who.y != orig_y )
		SendSysMessageEx(who, "Você parou de cortar a árvore.", SSM_INFO);
		return 0;
        elseif ( !IsFacing(who, targ.x, targ.y)  )
               SendSysMessageEx(who, "Você precisa estar virado para a árvore.", SSM_INFO);
               return 0;
	elseif ( !(axe in ListEquippedItems(who)) )
		SendSysMessageEx(who, "Você parou de cortar a árvore.", SSM_INFO);
		return 0;
	elseif ( LJ_GetWoodAmount(who.realm, targ.x, targ.y) <= 0 )
		SendSysMessageEx(who, "Esta árvore ja esta derrubada.", SSM_FAIL);
		return 0;
	elseif ( GetEquipmentByLayer(who, LAYER_MOUNT) )
		SendSysMessageEx(who, "Você não pode cortar árvore montado.", SSM_FAIL);
		return 0;
	elseif ( Distance(who, targ) > 1 )
		SendSysMessageEx(who, "Você não pode cortar de tão longe.", SSM_FAIL);
		return 0;
	endif
	return 1;
endfunction

function GetWoodDif(tree)
    case (tree.objtype)
         0xcd6:
               return 20; //pinheiro
         0xcd8:
                return 18;
         0xcda:
                return 14; //carvalho
         0xcdd:
                return 18;
         0xce0:
                return 22; //nogueira
         0xce3:
                return 22;
         0xce6:
                return 70; //salgueiro
         0xcf8:
                return 18;
         0xcfb:
                return 18;
         0xcfe:
                return 18;
         0xd01:
                return 18;
	 0x3fef:
	 0x3ff0:
	 0x3ff1:
	 0x3ff2:
	 0x3ff3:
	 0x3ff4:
	 0x3ff5:
	 0x3ff6:
		return 22;
	 0x2c0c:
	 0x2c0d:
	 0x2c10:
	 0x2c11:
	 0x2c12:
	 0x2c13:
	 0x2c14:
	 0x2c15:
	 0x2c17:
	 0x2c1c:
	 0x2c1f:
	 0x2c23:
		return 22;
    default: 
         return 10;
    endcase
endfunction

function GetWoodType(tree)
    case (tree.objtype)
         0xcd6:
               return UOBJ_PINE_LOG; //pinheiro
         0xcd8:
                return UOBJ_PINE_LOG;
         0xcda:
                return UOBJ_OAK_LOG; //carvalho
         0xcdd:
                return UOBJ_OAK_LOG;
         0xce0:
                return UOBJ_WALNUT_LOG; //nogueira
         0xce3:
                return UOBJ_WALNUT_LOG;
         0xce6:
                return UOBJ_WILLOW_LOG; //salgueiro
         0xcf8:
                return UOBJ_CYPRESS_LOG;
         0xcfb:
                return UOBJ_CYPRESS_LOG;
         0xcfe:
                return UOBJ_CYPRESS_LOG;
         0xd01:
                return UOBJ_CYPRESS_LOG;
	 0x3fef:
	 0x3ff0:
	 0x3ff1:
	 0x3ff2:
	 0x3ff3:
	 0x3ff4:
	 0x3ff5:
	 0x3ff6:
		return 0xee3b;
	 0x2c0c:
	 0x2c0d:
	 0x2c10:
	 0x2c11:
	 0x2c12:
	 0x2c13:
	 0x2c14:
	 0x2c15:
	 0x2c17:
	 0x2c1c:
	 0x2c1f:
	 0x2c23:
		return 0xee3c;
         default: 
                return UOBJ_DEFAULT_LOG;
    endcase
endfunction
