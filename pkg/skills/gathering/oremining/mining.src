
use uo;
use cfgfile;
use os;

include "include/client";
include ":datafile:datafile";
include ":attributes:attributeConstants";
include ":attributes:attributes";
include ":itemUtils:toolWear";
include ":gathering:mining";
include "include/say";
include "include/dungeons";

const MINING_ANIMATION	:= 0xB;
const MINING_SOUND	:= 0x126;


program OreMining(who, tool)

	if ( GetEquipmentByLayer(who, LAYER_MOUNT) )
		SendSysMessageEx(who, "Você não pode minerar montado.");
		return;
   elseif (who.weapon != tool)
		SendSysMessageEx(who, "Você precisa equipar a picareta para minerar.");
		return;
	endif

	SendSysMessageEx(who, "Selecione a veia de minério que você deseja minerar.", SSM_REQUEST);
	var targ := Target(who);
	
	if ( CoordinateDistance(who.x, who.y, targ.x, targ.y) > 2 )
		SendSysMessageEx(who, "Muito longe.");
		return;
   elseif (targ.objtype != 0xee99)
		SendSysMessageEx(who, "isto não é uma veia de minério.");
		return;
	endif

	var my_x := who.x;
	var my_y := who.y;
	var my_facing := who.facing;


	if (!CheckLoop(who, tool, my_x, my_y, my_facing))
		SendsysMessageEx(who, "Você parou de minerar.", SSM_FAIL);
		return;
	endif

   var stam_consume := _ifElse(HaveFeatSecondary(who, 67), 2, 5);
	while(MiningLoop(who, tool, my_x, my_y, targ, my_facing))
		CheckToolWear(who, tool, EXTRACAO);
		if (!CheckLoop(who, tool, my_x, my_y, my_facing))
			break;
		elseif (AP_GetVital(who, "Stamina") < stam_consume)
			SendSysMessageEx(who, "Você esta muito cansado para minerar.");
			break;
		endif
		AP_ConsumeVital(who, "Stamina", stam_consume);
		sleep(3);
	endwhile
	
	SendSysMessageEx(who, "Você parou de minerar.");
endprogram

function MiningLoop(who, tool, my_x, my_y, targ, my_facing)
	var i;
	for ( i:=0; i<3; i:=i+1 )
		if ( !CheckLoop(who, tool, my_x, my_y, my_facing) )
			return 0;
		endif
		PerformAction(who, MINING_ANIMATION);
		PlaySoundEffect(who, MINING_SOUND);
		sleep(1);
	endfor

   var ore_config := GetobjProperty(targ, "config");
   if (!ore_config) return SendSysMessageEx(who, "Parece não ter mais minerios aqui.", SSM_FAIL); endif
   var veil := cint(GetobjProperty(targ, "veil"));
   if (veil <= 0) return SendSysMessageEx(who, "Parece não ter mais minerios aqui.", SSM_FAIL); endif

   var has_light := HaveLightNear(who);

	if (who.cmdlevel > 2)
		SendSysMessageEx(who, "veil " + veil);
		SendSysMessageEx(who, "light " + has_light);
	endif


   var craft_amt := RandomIntMinmax(1, 3);
   if (veil < craft_amt) craft_amt := veil; endif

   var consume := craft_amt;
   if (!has_light) consume += 1; endif
   if (have_feat) consume -= 1; endif //escavação
   
   veil -= consume;
   var minerio := CreateItemInBackPack(who, cint(ore_config.minerio), craft_amt);
   minerio.movable := 1;
   if (Randomint(100) <= 30)
	   ExpGain(who, "minor");
   endif

  if (veil <= 0) veil := 0; endif
   SetObjProperty(targ, "veil", veil);

   if (veil <= 2)
      targ.graphic := 0x9CB6;
   elseif (veil <= 6)
      targ.graphic := 0x9CAA;
   endif

   if (veil <= 0)
      return 0;
   endif
   
	return 1;
endfunction


	// elseif ( !CanMine(targ, "Stone") )
	// 	var maps := GetMapsInBackpack(who);
	// 	//sendsysmessageEx(who, " " + maps);
	// 	if (maps.size() > 0)
	// 		var map := maps[1];
	// 		if (maps.size() > 1)
	// 			SendSysMessageEx(who, "Escolha o mapa que quer procurar.", SSM_REQUEST);
	// 			map := target(who);
	// 			if (!(isTreasureMap(map)))
	// 				return;
	// 			endif
	// 		endif
	// 		DigForMap(who, targ, map);
	// 		return;
	// 	else
	// 		SendSysMessageEx(who, "Você não pode minerar aqui.", SSM_FAIL);
	// 		return;
	// 	endif