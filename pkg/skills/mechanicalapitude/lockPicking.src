use uo;
use os;
use cfgfile;
use util;

include "include/objtype";
//include "include/OLD/sound";
include ":itemutils:canAccess";
include ":attributes:attributeConstants";
include ":attributes:attributes";
include "include/say";
include ":charactercreation:habilidades";
include ":gumps:yesno";

var stones := array{6255, 6250, 6251, 6252, 6253, 6254, 6249, 6256};
var stands := array{"", "", "", "", ""};
var last   := array{};
var enigma := array{};

program skill_lockpicking( me, lockpick )

	EraseObjProperty(me, "IsMeditating");
	EraseObjProperty(me, "HealTimer");
	var inhidden;
	if (me.hidden && !TemHabilidade(me, "Maos Rapidas"))
		me.hidden := 0;
	endif
	
	if (!maolivre(me, 2))
		return 0;
	endif

	if(!can_access(me, lockpick))
		return;
	endif

	if(lockpick.movable == 0)
		SendSysMessageEx(me, "Voce nao pode usar isto.", SSM_FAIL);
		return;
	endif

	if (!ReserveItem(lockpick))
		return;
	endif
	SendSysMessageEx(me, "O que voce deseja fazer com isto?", SSM_REQUEST);
	var chest := Target(me);
	if (!chest)
		SendSysMessageEx(me,"Cancelado.", SSM_FAIL);
		return;
	endif
	if ( (!Accessible(me,chest)) || (!Accessible(me,lockpick)) )
		SendSysMessageEx(me, "Voce nao alcanca o alvo!", SSM_FAIL);
		return;
	endif
	if ( Distance(me, chest) > 2)
		SendSysMessageEx(me, "Voce esta muito distante.", SSM_FAIL);
		return;
	endif

	if (GetObjProperty(chest,"level"))
		PickTreasureChest(me, lockpick, chest); //funciona tanto pra chests quando pra portas
	else
		SendSysMessageEx(me, "Esse nao e um alvo valido.", SSM_FAIL);
		ReleaseItem(lockpick);
	endif

endprogram

function PickTreasureChest(me, lockpick, chest)
	var lvl := CInt(GetObjProperty(chest,"level"));
	if (!chest.locked)
		SendSysMessageEx(me,"O alvo nao parece estar tracado.", SSM_INFO);
		return;
	endif
	PrintText(me, "*arrombando a fechadura*");
	var puzzle := mastermind(me, lockpick, chest, lvl);
	if (puzzle == "bestchance")
		sleepms(250);
		var diff;
		case (lvl)
			1: diff := 25;
			2: diff := 50;
			3: diff := 70;
			4: diff := 85;
			5: diff := 96;
			6: diff := 110;
			default: diff := 45; 
		endcase
		var check := SkillCheck(me, MECHANICALAPITUDE, diff);
		if ( check > 0 )
			SucessLockPick(me, chest);
		else
			SendSysMessageEx(me, "Voce falhou em arrombar a fechadura.", SSM_FAIL);
			if (!temHabilidade(me, "Inquebravel"))
				PlaySoundEffect(chest,0xef);
				SendSysMessageEx(me,"Sua gazua quebrou!", SSM_FAIL);
				SubtractAmount(lockpick,1);
				return;
			endif
		endif
	elseif (puzzle == 2)
		SendSysMessageEx(me, "Suas Gazuas acabaram.", SSM_FAIL);
	elseif (puzzle == 3)
		SendSysMessageEx(me, "Voce parou de tentar arrombar a fechadura.", SSM_FAIL);
	elseif (puzzle)
		SucessLockPick(me, chest);
	else
		SendSysMessageEx(me, "Voce falhou em arrombar a fechadura.", SSM_FAIL);
	endif
	ReleaseItem(lockpick);
endfunction

function SucessLockPick(me, chest)
	PlaySoundEffect(chest, 0x0200);
	PrintTextAbovePrivate(chest,"*Destrancado!*",me);
	SetObjProperty(chest, "arrombado", "" + me.name);
	SetObjProperty(chest, "locktime", ReadGameClock());
	set_critical(1);
	chest.locked := 0;
	set_critical(0);
	
	if (TemHabilidade(me, "Toque de Ouro"))
		CreateItemInContainer(chest, 0xba63, randomdiceroll("5d25"));
	endif
	
endfunction

function mastermind(who, lockpick, chest, lvl)
	if(TemHabilidade(who, "Chaveiro"))
		stones.Erase(7);
		stones.Erase(7);
	endif
	enigma := RandomSet(who, lvl);
	
	var diff;
	case (lvl)
		1: diff := 10;
		2: diff := 30;
		3: diff := 50;
		4: diff := 60;
		5: diff := 80;
		6: diff := 100;
		default: diff := 30; 
	endcase

while(who.connected)

	var gump := GFCreateGump(50, 50, 500, 400);

	GFResizePic(gump, 0, 0, 3500, 500, 400);

	GFGumpPic(gump, 30, 30, 103 );

	GFTextLine(gump, 100, 50, 998, "A");
	GFTextLine(gump, 75, 70, 998, "LockPicking");
	GFTextLine(gump, 90, 90, 998, "Puzzle");

	GFTextLine(gump, 200, 40, 194, "Escolha a sequencia correta dos cilindros");
	GFTextLine(gump, 200, 60, 194, "necessaria para abrir a tranca.");
	GFTextLine(gump, 200, 100, 194, "Cuidado! Uma tentativa errada pode ser fatal!");


	//GFTextLine(gump, 30, 370, 37, "Tentativas restantes: " +counter);

//---------------------------------------------------------------------

	GFResizePic(gump,30,150,5100,30,30);

	GFAddButton(gump, 70, 160, 5032, 5032, GF_CLOSE_BTN, 11 );	//button left
	GFTilePic(gump, 25, 160, 6255 );		//white

	GFResizePic(gump,30,200,5100,30,30);
	GFAddButton(gump, 70, 210, 5032, 5032, GF_CLOSE_BTN, 12 );	//button left
	GFTilePic(gump, 25, 210, 6250 );		//blue

	GFResizePic(gump,30,250,5100,30,30);
	GFAddButton(gump, 70, 260, 5032, 5032, GF_CLOSE_BTN, 13 );	//button left
	GFTilePic(gump, 25, 260, 6251 );		//green

	GFResizePic(gump,30,300,5100,30,30);
	GFAddButton(gump, 70, 310, 5032, 5032, GF_CLOSE_BTN, 14 );	//button left
	GFTilePic(gump, 25, 310, 6252 );		//orange

//--------------------------------------------------------------------

	GFResizePic(gump,440,150,5100,30,30);
	GFAddButton(gump, 420, 160, 5032, 5032, GF_CLOSE_BTN, 15 );	//button right
	GFTilePic(gump, 435, 160, 6253 );		//purple

	
	GFResizePic(gump,440,200,5100,30,30);
	GFAddButton(gump, 420, 210, 5032, 5032, GF_CLOSE_BTN, 16 );	//button right
	GFTilePic(gump, 435, 210, 6254 );		//red

	if(!TemHabilidade(who, "Chaveiro"))
	GFResizePic(gump,440,250,5100,30,30);
	GFAddButton(gump, 420, 260, 5032, 5032, GF_CLOSE_BTN, 17 );	//button right
	GFTilePic(gump, 435, 260, 6249 );		//black


	GFResizePic(gump,440,300,5100,30,30);
	GFAddButton(gump, 420, 310, 5032, 5032, GF_CLOSE_BTN, 18 );	//button right
	GFTilePic(gump, 435, 310, 6256 );		//yellow
	endif

//---------------------------------------------- previus quess ------
	
	GFTextLine(gump,120, 215, 188, "Sua tentativa anterior: ");
	GFResizePic(gump,260,210,5100,120,30);

	if(last[1])
		GFTilePic(gump, 260, 220, last[1] );
	endif
	if(last[2])
		GFTilePic(gump, 280, 220, last[2] );
	endif
	if(last[3])
		GFTilePic(gump, 300, 220, last[3] );
	endif
	if(last[4])
		GFTilePic(gump, 320, 220, last[4] );
	endif
	if(last[5])
		GFTilePic(gump, 340, 220, last[5] );
	endif
	
	
	if (gethablevel(who, lvl))
		if(enigma[1])
			stands[1] := enigma[1];
		endif
		if(enigma[2])
			stands[2] := enigma[2];
		endif
		if(enigma[3])
			stands[3] := enigma[3];
		endif
	
	endif
//----------------------------------------- stands -----------

	GFTilePic(gump, 107, 260, 2818 );
	GFTilePic(gump, 109, 259, 2818 );
	GFTilePic(gump, 113, 259, 2816 );
	GFTilePic(gump, 110, 262, 2816 );
	GFTilePic(gump, 110, 260, 1310 );

	GFTilePic(gump, 167, 260, 2818 );
	GFTilePic(gump, 169, 259, 2818 );
	GFTilePic(gump, 173, 259, 2816 );
	GFTilePic(gump, 170, 262, 2816 );
	GFTilePic(gump, 170, 260, 1310 );

	GFTilePic(gump, 227, 260, 2818 );
	GFTilePic(gump, 229, 259, 2818 );
	GFTilePic(gump, 233, 259, 2816 );
	GFTilePic(gump, 230, 262, 2816 );
	GFTilePic(gump, 230, 260, 1310 );

	GFTilePic(gump, 287, 260, 2818 );
	GFTilePic(gump, 289, 259, 2818 );
	GFTilePic(gump, 293, 259, 2816 );
	GFTilePic(gump, 290, 262, 2816 );
	GFTilePic(gump, 290, 260, 1310 );

	GFTilePic(gump, 347, 260, 2818 );
	GFTilePic(gump, 349, 259, 2818 );
	GFTilePic(gump, 353, 259, 2816 );
	GFTilePic(gump, 350, 262, 2816 );
	GFTilePic(gump, 350, 260, 1310 );

//------------------------------------------------- stones on stands
	if(stands[1])
		GFTilePic(gump, 110, 275, stands[1] );
	endif
	if(stands[2])
		GFTilePic(gump, 170, 275, stands[2] );
	endif
	if(stands[3])
		GFTilePic(gump, 230, 275, stands[3] );
	endif
	if(stands[4])
		GFTilePic(gump, 290, 275, stands[4] );
	endif
	if(stands[5])
		GFTilePic(gump, 350, 275, stands[5] );
	endif

// ---------------------------------------------------- radio under stands
	GFSetRadioGroup(gump, 1);
	GFRadioButton(gump, 118, 325, 2151, 2154, 0, 101 );
	GFRadioButton(gump, 178, 325, 2151, 2154, 0, 102 );
	GFRadioButton(gump, 238, 325, 2151, 2154, 0, 103 );
	GFRadioButton(gump, 298, 325, 2151, 2154, 0, 104 );
	GFRadioButton(gump, 358, 325, 2151, 2154, 0, 105 );


	GFAddButton(gump, 225, 365, 2130, 2129, GF_CLOSE_BTN, 999 );	//	O K
	
	GFAddButton(gump, 400, 360, 2424, 2426, GF_CLOSE_BTN, 1000 );	//	DEFAULT


	var Res := GFSendGump(who, gump);

	if(Res[0] < 1)
		if(YesNo(who, "Deseja mesmo cancelar ?"))
			return 3;
		else
			continue;
		endif
	endif

	if(Res[0] > 10 && Res[0] < 20)
		foreach key in (Res.keys)
			if(key > 100 && key < 106)
				if (stones[res[0]-10] in stands)
					SendSysMessageEx(who, "Nao e possí­vel usar os mesmos cilindros!", SSM_FAIL);
				else
					stands[key-100] := stones[res[0]-10];
				endif
			endif
		endforeach
	endif

	if(res[0] == 999)
		PrintText(who, "*arrombando a fechadura*");
		if(stands[1] && stands[2] && stands[3] && stands[4] && stands[5])
			if(CheckAnswer(who, lvl))
				return 1;
			endif
			PlaySoundEffect(chest,0xef);
			if (!temHabilidade(who, "Inquebravel"))
				SubtractAmount(lockpick,1);
				SendSysMessageEx(who,"Sua gazua quebrou!", SSM_FAIL);
				if (lockpick.amount < 1)
					return 2;
				endif
			endif
			last := stands;
			//stands := {"", "", "", "", ""};
			
			var check := SkillCheck(who, MECHANICALAPITUDE, diff);
			SendSysMessage(who, "check: " + check); //DELETAR
			if (check <= -20)
				return 0;
			endif
		endif
	elseif(res[0] == 1000)
		return "bestchance";
	endif


endwhile

endfunction


function RandomSet(who, lvl)

	var temp := array{};
	var stonerandom;
	var tempstone := stones;
	
	//setar resoluÃ§Ã£o do enigma
	var i;
	var stonenumbers := 9;
	if (gethablevel(who, lvl))
		stonenumbers := 7;
	endif
	for (i:=1;i<=5;i+=1)
		stonerandom := RandomInt(stonenumbers-i)+1;
		temp[i] := tempstone[stonerandom];
		tempstone.Erase(stonerandom);	
	endfor

//developer debug  
	if(who.cmdlevel > 4)
		var gump := GFCreateGump(50, 50, 200, 100);
		GFResizePic(gump,0,0,3500,200,100);
		GFTilePic(gump, 30, 30, temp[1] );
		GFTilePic(gump, 60, 30, temp[2] );
		GFTilePic(gump, 90, 30, temp[3] );
		GFTilePic(gump, 120, 30, temp[4] );
		GFTilePic(gump, 150, 30, temp[5] );
		GFSendGump(who, gump);
	endif

	return temp;

endfunction


function CheckAnswer(who, lvl)

	var x;
	var hits := 0;
	var colors := 0;
	var desc;
	var desc2;
	var EnigmaTemp := enigma;
	var StandsTemp := stands;

	for(x := 1; x <= 5; x := x + 1)
		if(StandsTemp[x])
			if(StandsTemp[x] == EnigmaTemp[x])
				hits := hits + 1;
				EnigmaTemp[x] := -10;
				StandsTemp[x] := -20;
			endif
		endif
	endfor

	for(x := 1; x <= 5; x := x + 1)
//		if(StandsTemp[x])
			if(StandsTemp[x] in EnigmaTemp)
				if (gethablevel(who, lvl))
					if (x > 3)
						colors := colors + 1;
					endif
				else
					colors := colors + 1;
				endif
				EnigmaTemp[FindInArray(EnigmaTemp, StandsTemp[x])] := -10;
				StandsTemp[x] := -20;
			endif
//		endif
	endfor
	
	case(colors)
		0: 		desc2 := "Nenhum elemento em cor correta.";
		1: 		desc2 := "Um elemento esta em cor correta.";
		default:	desc2 := CInt(colors)+" elementos estao em cores corretas.";
	endcase
	
	
	if(hits == 5)
		return 1;
	else
		SendSysMessageEx(who, "Sua combinacao falhou!", SSM_FAIL);
		SendSysMessageEx(who, desc2, SSM_INFO);
		sleepms(30);
	endif
	
	return 0;

endfunction

function gethablevel(who, lvl)
	if ((TemHabilidade(who, "Arrombador Novico") && lvl == 1)
		or (TemHabilidade(who, "Arrombador Aprendiz") && lvl == 2)
		or (TemHabilidade(who, "Arrombador Perito") && lvl == 3)
		or (TemHabilidade(who, "Arrombador Habil") && lvl == 4)
		or (TemHabilidade(who, "Arrombador Mestre") && (lvl == 5 || lvl == 6)))
		return 1;
	endif
	return 0;
endfunction