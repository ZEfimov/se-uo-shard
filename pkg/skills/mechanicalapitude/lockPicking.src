use uo;
use os;
use cfgfile;
use util;

include "include/objtype";
//include "include/OLD/sound";
include ":itemutils:canAccess";
include ":attributes:attributeConstants";
include ":attributes:attributes";
include "include/say";
include ":gumps:yesno";

program skill_lockpicking( me, lockpick )
   doLockpick(me, lockpick);
endprogram

function doLockpick(me, lockpick)
	var inhidden;

   if (!maolivre(me, 2))
		return 0;
	elseif(!can_access(me, lockpick))
		return;
	elseif(lockpick.movable == 0)
		SendSysMessageEx(me, "Você não pode usar isto.", SSM_FAIL);
		return;
	elseif (!ReserveItem(lockpick))
		return;
	endif

   if (me.hidden && HaveFeatSecondary(me, 50))
      me.hidden := 0;
   endif

	SendSysMessageEx(me, "O que você deseja fazer com isto?", SSM_REQUEST);
	var chest := Target(me);
	if (!chest)
		SendSysMessageEx(me,"Cancelado.", SSM_FAIL);
		return;
	elseif ( (!Accessible(me,chest)) || (!Accessible(me,lockpick)) )
		SendSysMessageEx(me, "Você não alcanca o alvo!", SSM_FAIL);
		return;
	elseif ( Distance(me, chest) > 2)
		SendSysMessageEx(me, "Você esta muito distante.", SSM_FAIL);
		return;
   endif

   if ( !AP_ConsumeVital(me, STAMINA, 10) )
		SendSysMessageEx(me, "Você está cansado demais para tentar isso.", SSM_FAIL);
		return;
	endif

	if (GetObjProperty(chest,"level"))
		PickTreasureChest(me, lockpick, chest); //funciona tanto pra chests quando pra portas
	else
		SendSysMessageEx(me, "Esse não é um alvo valido.", SSM_FAIL);
		ReleaseItem(lockpick);
	endif
endfunction

function PickTreasureChest(me, lockpick, chest)
	if (!chest.locked || Getobjproperty(chest, "broken"))
		SendSysMessageEx(me,"O alvo não parece estar tracado.", SSM_INFO);
		return;
	endif

	PrintText(me, "*arrombando a fechadura*");
   if (GetObjProperty(chest, "protected") && !me.hidden)
      var event := struct{
         "type" := EVID_TAUNT,
         "source" := me
      };

      foreach monster in ListMobilesNearLocationEx(chest.x, chest.y, chest.z, 12, LISTEX_FLAG_NORMAL|LISTEX_FLAG_HIDDEN|LISTEX_FLAG_NPC_ONLY)
         if (GetObjProperty(monster, "guild"))
            if (CheckLineOfSight(monster, me))
               SendEvent(monster, struct{ "type" := 0x78455, source := me});
            endif
         elseif (!monster.master)
            SendEvent(monster, event);
         endif
         sleepms(2);
      endforeach
   else
      foreach monster in ListMobilesNearLocationEx(chest.x, chest.y, chest.z, 12, LISTEX_FLAG_NORMAL|LISTEX_FLAG_HIDDEN|LISTEX_FLAG_NPC_ONLY)
         if (GetObjProperty(monster, "guild") && CheckLineOfSight(monster, me))
            SendEvent(monster, struct{ "type" := 0x78455, source := me});
         endif
         sleepms(2);
      endforeach
   endif
   
	sleepms(250);
	var diff := (CInt(GetObjProperty(chest,"level")) +1) * 10;
	if ( Randomint(100) >= diff )
		SucessLockPick(me, chest);
      ExpGain(me, "major");
      me.SetAchievement("trap", 1);
      
      var time_respawn := AddTimeTo(ReadGameClock(), 25+RandomDiceRoll("3d20"), "minutes");
      SetObjProperty(chest, "spawned_time", time_respawn);
	else
		SendSysMessageEx(me, "Você falhou em arrombar a fechadura.", SSM_FAIL);
		PlaySoundEffect(chest,0xef);
      
      if (HaveFeat(me, "Gazua Inquebrável"))
         if (randomint(101) <= 50)
	         ReleaseItem(lockpick);
            return;
         endif
	   endif

		SendSysMessageEx(me,"Sua gazua quebrou!", SSM_FAIL);
		SubtractAmount(lockpick,1);
	endif
	ReleaseItem(lockpick);
endfunction

function SucessLockPick(me, chest)
	PlaySoundEffect(chest, 0x0200);
	PrintTextAbovePrivate(chest,"*Destrancado!*",me);
	SetObjProperty(chest, "arrombado", "" + me.name);
	SetObjProperty(chest, "locktime", ReadGameClock());
	set_critical(1);
	chest.locked := 0;
	set_critical(0);
	
	// if (HaveFeat(me, "Toque de Ouro"))
	// 	CreateItemInContainer(chest, 0xeed, randomdiceroll("5d25"));
	// endif
	
endfunction
