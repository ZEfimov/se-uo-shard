/* $Id: toolTips.src 104 2006-05-25 22:14:15Z montuz $
 *	Description: AOS Tooltips. Starter script.
 *	This packet takes awhile to get used to.
 */

use uo;
use basic;
use cfgfile;

include ":attributes:attributes";
include ":magery:tnmagery";
include ":yggdrasil:boss";

const OFFSET_OBJECT_SERIAL   := 0x05;
const OFFSET_CLILOC_ID       := 0x0F;
const OFFSET_LENGTH_ID       := 0x13;
const OFFSET_UNICODE_TEXT    := 0x14;

const WHITE  := "<BASEFONT COLOR=#FFFFFF>";
const RED    := "<BASEFONT COLOR=#FF4C4C>";
const BLUE   := "<BASEFONT COLOR=#4169E1>";
const ORANGE := "<BASEFONT COLOR=#FFA500>";
const LIGHTGRAY := "<BASEFONT COLOR=#D3D3D3>";

function TranslateAtt(attribute)
	case (attribute.lower())
		"strength": return "Força";
		"dexterity": return "Destreza";
		"intelligence": return "Inteligência";
		"wisdom": return "Sabedoria";
		"constitution": return "Constituição";
		default: return attribute;
	endcase
endfunction

function getQuality(num)
	if (num >= 1.1)
		return "Excepcional";
	elseif(num  > 0.8)
		return "Normal";
	else
		return "Ruim";
	endif
endfunction

function getCondition(item)
	var c := cdbl(item.hp) / cdbl(item.maxhp);

	if (c > 0.9)
		return "Boa";
	elseif (c > 0.6)
		return "Pouco Danificada";
	elseif (c > 0.3)
		return "Bastante Danificada";
	else
		return "Quebradiça";
	endif
endfunction



function TranslateCritical(crit)
	if (crit == "damage3")
		return "Dano Triplo";
	elseif (crit == "damage2")
		return "Dano Duplo";
	elseif (crit == "armorignore")
		return "Ignorar Armadura";
	elseif ( crit == "stun")
		return "Ataque Atordoante";
	elseif (Crit == "bleed")
		return "Alvejar Ponto Vital";
	endif
endfunction


function GetCriticalInfo(entry)
	var criticals := GetconfigStringArray(entry, "CriticalHitScripts");

	var critstr := "";
	
	var str;
	foreach crit in criticals
		critstr := critstr + TranslateCritical(lower(str)) + "";
	endforeach

	return critstr;
endfunction

function TranslateHit(crit)
	if (crit == "antimountedhit")
		return "Anti-montaria";
	elseif (crit == "chargehit")
		return "Carga";
	elseif (crit == "concussionhit")
		return "Concussão";
	elseif ( crit == "freearmorhit")
		return "Movimento Livre";
	elseif (crit == "heighthit")
		return "Diferença de Altura";
	elseif ( crit == "QueimaRoupa")
		return "Tiro a Queima Roupa";
	elseif ( crit == "pushback")
		return "Golpe Esmagador";
	elseif ( crit == "passivedisarm")
		return "Disarme Passivo";
	endif
endfunction

function GetHitsInfo(entry)
	var criticals := GetconfigStringArray(entry, "HitScripts");
	var critstr := "";
	
	foreach crit in criticals
		critstr := critstr + TranslateHit(lower(crit)) + "";
	endforeach

	return critstr;
endfunction

function getVelStringDesc(elem, item)
	if(speed >= 39)
		return "Extrema";
	elseif(speed >= 34)
		return "Muito rapida";
	elseif(speed >= 30)
		return "Rapida";
	elseif(speed >= 26)
		return "Mediana";
	elseif(speed >= 21)
		return "Lenta";
	elseif(speed >= 20)
		return "Lentissima";
	else
		return "Extremamente Lenta";
	endif
endfunction


program Install()
	 Print("INSTALLING: Outgoing Tooltip PH...");
	 return 1;
endprogram

exported function MegaCliloc( who, byref packet )
	var item := SystemFindObjectBySerial(packet.GetInt32(OFFSET_OBJECT_SERIAL));
	if ( item )

		packet.SetSize(15);//primeira parte do packet eh tamanho 15

		var Object_Name;
		//var Text_Color := "CBA300";

		if( item.IsA(POLCLASS_MOBILE) )
			Object_Name := item.name;

         if (GetObjProperty(item, "facecovered"))
            if (!who.cmdlevel)
               Object_Name := "Desconhecido";
            else
               Object_Name := "{} [Desconhec.]".format(Object_Name);
            endif
         endif

			var raca := GetObjProperty(item, "chardata").raca;
			if (!Object_Name["Desconhecido"] && raca)
				Object_Name := "{} [{}]".format(Object_Name, raca);
			endif
			
			if (item.npctemplate && IsBoss(item))
            Object_Name :=  "<BASEFONT COLOR=#CBA300>{}".format(Object_Name);
			endif
			
         if (item.dead && !who.cmdlevel)
            Object_Name := "Fantasminha";
         endif
			// Let's get the characters hightlight color.
			// This is just an example, NPC's and stuff will still have to be added
			// ofcourse. :)
			// Setting the text color for the object's name will only show 
			// if the object's name has changed. So it's been left commented out for now.
			//if (xObject.murderer)
			//	Text_Color := "FF0000";
			//elseif (xObject.criminal)
			//	Text_Color := "666666";
			//else
			//	Text_Color := "00CCFF";
			//endif
		elseif ( item.IsA(POLCLASS_ITEM) )
			Object_Name := item.desc;

         var trap_list := GetObjProperty(item, "TrapList");
         if (trap_list && GetObjProperty(item, "trapSpoted"))
            Object_Name := "{} [{} armadilha]".format(Object_Name, trap_list.size());
         endif

         if ((item.isA(POLCLASS_WEAPON) || item.isA(POLCLASS_ARMOR)) && item.hp == 0)
            Object_Name := "{} [danificado]".format(Object_Name);
         endif
		endif

		// If you try to break a new line in the first cliloc(below) it doesn't
		// display right for some reason.
		// If you want to change the color of the Object's name.
		// Use this. 
		// Object_Name := CAscZ("<BASEFONT COLOR=#" + Text_Color + ">" + Object_Name);

		Object_Name := CAscZ(Object_Name);

		packet.SetInt32(OFFSET_CLILOC_ID, 1042971);
		packet.SetUnicodeString(OFFSET_UNICODE_TEXT, Object_Name, 1);
		// I've noticed that this packet is only sent if this value has changed
		// from the last time it was checked. And using html to change the size doesn't work
		// for some reason. Maybe a core/client issue?
		packet.SetInt16(OFFSET_LENGTH_ID, Object_Name.Size() * 2);

		// Start of Loop.

		// This is where you'll be putting all your properties. <br> to break a new line.
		// You wont need to add anymore cliloc id's because you can just add all the props
		// into one string.
		var xDesc  := "";
		var desc   := GetObjProperty(item, "description");
		var descmods := GetObjProperty(item, "descmod");

		if((descmods!=error) && (desc == error))
			 desc:="";
		endif

		 if(descmods != error)
			foreach descmod in descmods
				desc:=desc + descmod ;
			endforeach
		 endif
		 
		if (len(desc) > 85)
			desc := desc[1, 85];
		endif
		if (desc!=error && desc != "")
			xDesc += "{}{}<br>".format(WHITE, desc);
		endif

		if (item.IsA(POLCLASS_MOBILE) && item.acctname)
			var deathpoint := AP_GetVital(item, "DP");
         if (deathpoint < 30)
            xDesc += "{}{}x Gravemente Ferido<br>".format(WHITE, Ceil((30-deathpoint)/10));
         endif
		elseif (item.isa(POLCLASS_WEAPON) || item.isa(POLCLASS_ARMOR))
			var cond := GetCondition(item);
         xDesc += "Condição: {}<br>".format(cond);
         xDesc += "Qualidade: {}<br>".format(getQuality(item.quality));

			var cfg  := ReadConfigFile(":*:itemdesc");
			var elem := FindConfigElem(cfg, item.objtype);
			if (elem.DamageType)
				xDesc += "Tipo: {}<br>".format(elem.DamageType);
			endif

			if (item.isA(POLCLASS_WEAPON))
				if (elem.strrequired)
					xDesc += "Força Mínima: {}<br>".format(elem.strrequired);
				endif
            if (elem.intrequired)
					xDesc += "Inteligência Mínima: {}<br>".format(elem.intrequired);
            endif
				if (who.cmdlevel > 3)
					xDesc += "Dano: {}<br>".format(elem.damage);
					xDesc += "Velocidade: {}<br>".format(elem.speed);
				endif
				xDesc += "Atributo: {}<br>".format(TranslateAtt(cstr(item.attribute)));
				// xDesc += "Velocidade: " + GetVelStringDesc(elem, item) + "";
				var crits := GetCriticalInfo(elem);
				if (crits != "")
					xDesc += RED + crits;
				endif

				var hits :=  GetHitsInfo(elem);
				if (hits != "")
					xDesc += ORANGE + hits;
				endif

			elseif (item.isA(POLCLASS_ARMOR))
				if (cint(elem.strrequired) > 0)
					xDesc += "Força Mínima: {}<br>".format(elem.strrequired);
				endif

				if (who.cmdlevel > 3)
					xDesc += "AR: {}<br>".format(elem.AR);
				endif
			endif
		endif

      var madeof := GetObjProperty(item, "madeof");
      if (madeof)
         xDesc += "{}Feito com: {}{}<br>".format(WHITE, ORANGE, madeof);
      endif

      var inscripted := GetObjProperty(item, "inscripted");
      if (inscripted)
         xDesc += "{}{}<br>".format(BLUE, inscripted);
      endif

		var pplmage := GetObjProperty(item, "magicwho"); //research
		if ( pplmage != error && typeof(pplmage) == "Array")
         var pocaoname := GetObjProperty(item, "pocaoname");
         if (pocaoname && (who.serial in pplmage))
            xDesc +="{}{}<br>".format(WHITE, pocaoname);
         endif

			if (who.serial in pplmage)
				if (item.isMagicWeapon())
					var charges := cint(GetObjProperty(item, "charges"));
					xDesc += WHITE + "Cargas: {}<br>".format(charges);
				endif

				var mods := GetObjProperty(item, "equip");
				if (mods != error)
					foreach mod in (mods.keys())
						xDesc += "{}{}<br>".format(BLUE, getbonusname(mod));
					endforeach
				endif

				if (item.dmg_mod > 0 )
					xDesc += BLUE + "Bônus Dano<br>";
				endif
				// if (item.hp_mod > 0)
				// 	xDesc += BLUE + "Bônus Item PVs";
				// endif
				var hitsscripts := GetObjProperty(item, "HitScripts");
				if (hitsscripts != error)
					foreach hits in hitsscripts
						if (hits == ":combat:weaponHitScripts/FireHit")
							xDesc += "{}Dano de Fogo<br>".format(BLUE);
						elseif ( hits == ":combat:weaponHitScripts/IceHit")
							xDesc += "{}Dano de Gelo<br>".format(BLUE);
						elseif ( hits == ":combat:weaponHitScripts/LightningHit")
							xDesc += "{}Dano de Energia<br>".format(BLUE);
						endif
					endforeach
				endif

				var spell_list := GetObjProperty(item, "spell_list");
				if (spell_list != error && spell_list.size() > 0)
					xDesc += "{} Magias<br>".format(ORANGE);
					var active_spell := GetObjProperty(item, "active_spell");
					foreach spell in spell_list
						if (spell == 0)
					      xDesc += "{}SLOT PERDIDO<br>".format(LIGHTGRAY);
							continue;
						elseif (xDesc.search(GetSpellName(spell)))
							xDesc += "I";
						elseif (active_spell == spell)
							xDesc += WHITE;
						else
							xDesc += BLUE;
						endif

						xDesc += "{}<br>".format(GetSpellName(spell));
                  sleepms(2);
					endforeach

               var total_slots := GetObjProperty(item, "magicslot") - spell_list.size();
               for i := 1 to total_slots
					   xDesc += "{}SLOT VAZIO<br>".format(LIGHTGRAY);
                  sleepms(2);
               endfor
				endif
			endif
		endif
		
      if (xDesc.length() > 4)
         XDesc := SubStrReplace(xDesc, "", XDesc.length()-3);
      endif
		xDesc := CAscZ(xDesc);

		if ( xDesc.Size() > 0 )
			// Cliloc ID if these two ID's match it'll only show one line.
			packet.SetInt32(packet.GetSize() - 1, 1070722);

			// Get the offset of where the next text size
			var Length_ID := packet.GetSize();
			packet.SetUnicodeString(packet.GetSize() + 1, xDesc, 1);

			// SetUnicodeString adds 00 BYTE[1] at the start of the Unicode offset, which messes with the length offset.
			// Setting the length of the unicode text below will fix that issue. Same deal as above.
			packet.SetInt16(Length_ID, xDesc.Size() * 2);
		endif

		// End of loop.

		packet.SetInt32(packet.GetSize(), 0);
	endif

	return 0;

endfunction

function getbonusname(mod)
	if (mod == "strmod")
		return "Bônus For";
	elseif (mod == "dexmod")
		return "Bônus Des";
	elseif (mod == "intmod")
		return "Bônus Int";
	elseif (mod == "conmod")
		return "Bônus Cons";
	elseif (mod == "hitsmod")
		return "Bônus HP";
	elseif (mod == "manamod")
		return "Bônus Mana";
	elseif (mod == "stammod")
		return "Bônus Stam";
	elseif (mod == "PhysicalResistMod")
		return "Resistencia Fisica";
	elseif (mod == "ColdResistMod")
		return "Resistencia Frio";
	elseif (mod == "FireResistMod")
		return "Resistencia Fogo";
	elseif (mod == "EnergyResistMod")
		return "Resistencia Energia";
	elseif (mod == "PoisonResistMod")
		return "Resistencia Veneno";
	elseif (mod == "ColdDamageMod")
		return "Dano por Frio";
	elseif (mod == "FireDamageMod")
		return "Dano por Fogo";
	elseif (mod == "EnergyDamageMod")
		return "Dano por Energia";
	elseif (mod == "PoisonDamageMod")
		return "Dano por Veneno";
	elseif (mod == "hp_mod")
		return "Bônus Item PVs";
	else
		return "Bonus " + mod;
	endif
endfunction
