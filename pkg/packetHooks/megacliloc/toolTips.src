/* $Id: toolTips.src 104 2006-05-25 22:14:15Z montuz $
 *	Description: AOS Tooltips. Starter script.
 *	This packet takes awhile to get used to.
 */

use uo;
use basic;
use cfgfile;

include ":attributes:attributes";
include ":magery:tnmagery";
include ":yggdrasil:boss";
include ":crafting:craft_props";
include ":crafting:excep_gump";
include ":charactercreation:feats";
include "include/colormap";

const OFFSET_OBJECT_SERIAL   := 0x05;
const OFFSET_CLILOC_ID       := 0x0F;
const OFFSET_LENGTH_ID       := 0x13;
const OFFSET_UNICODE_TEXT    := 0x14;

program Install()
	 Print("INSTALLING: Outgoing Tooltip PH...");
	 return 1;
endprogram

exported function MegaCliloc( who, byref packet )
	var item := SystemFindObjectBySerial(packet.GetInt32(OFFSET_OBJECT_SERIAL));
	if ( item )

		packet.SetSize(15);//primeira parte do packet eh tamanho 15

		var Object_Name;
		//var Text_Color := "CBA300";

		if( item.IsA(POLCLASS_MOBILE) )
			Object_Name := item.name;

         if (GetObjProperty(item, "facecovered"))
            if (!who.cmdlevel)
               Object_Name := "Desconhecido";
            else
               Object_Name := "{} [Desconhec.]".format(Object_Name);
            endif
         endif

			var raca := GetObjProperty(item, "chardata").raca;
         if (item.npctemplate && !raca)
            raca :=  GetObjProperty(item, "force_race");
         endif
			if (!Object_Name["Desconhecido"] && raca)
				Object_Name := "{} [{}]".format(Object_Name, raca);
			endif
			
			if (item.npctemplate && GetObjProperty(item, "is_boss"))
            Object_Name :=  "<BASEFONT COLOR=#CBA300>{}".format(Object_Name);
			endif
			
         if (item.dead && !who.cmdlevel)
            Object_Name := "Fantasminha";
         endif
			// Let's get the characters hightlight color.
			// This is just an example, NPC's and stuff will still have to be added
			// ofcourse. :)
			// Setting the text color for the object's name will only show 
			// if the object's name has changed. So it's been left commented out for now.
			//if (xObject.murderer)
			//	Text_Color := "FF0000";
			//elseif (xObject.criminal)
			//	Text_Color := "666666";
			//else
			//	Text_Color := "00CCFF";
			//endif
		elseif ( item.IsA(POLCLASS_ITEM) )
			Object_Name := item.desc;

         var trap_list := GetObjProperty(item, "TrapList");
         if (trap_list && GetObjProperty(item, "trapSpoted"))
            Object_Name := "{} [{} armadilha]".format(Object_Name, trap_list.size());
         endif

         if ((item.isA(POLCLASS_WEAPON) || item.isA(POLCLASS_ARMOR)) && item.hp == 0)
            Object_Name := "{} [danificado]".format(Object_Name);
         endif
		endif

		// If you try to break a new line in the first cliloc(below) it doesn't
		// display right for some reason.
		// If you want to change the color of the Object's name.
		// Use this. 
		// Object_Name := CAscZ("<BASEFONT COLOR=#" + Text_Color + ">" + Object_Name);

		Object_Name := CAscZ(Object_Name);

		packet.SetInt32(OFFSET_CLILOC_ID, 1042971);
		packet.SetUnicodeString(OFFSET_UNICODE_TEXT, Object_Name, 1);
		// I've noticed that this packet is only sent if this value has changed
		// from the last time it was checked. And using html to change the size doesn't work
		// for some reason. Maybe a core/client issue?
		packet.SetInt16(OFFSET_LENGTH_ID, Object_Name.Size() * 2);

		// Start of Loop.

		// This is where you'll be putting all your properties. <br> to break a new line.
		// You wont need to add anymore cliloc id's because you can just add all the props
		// into one string.
		var xDesc  := "";
		var desc   := GetObjProperty(item, "description");
		var descmods := GetObjProperty(item, "descmod");

		if((descmods!=error) && (desc == error))
			 desc:="";
		endif

      if(descmods != error)
         foreach descmod in descmods
            desc += descmod ;
         endforeach
      endif
		 
		if (len(desc) > 85)
			desc := desc[1, 85];
		endif

		if (desc!=error && desc != "")
			xDesc += "{}{}<br>".format(WHITE, desc);
		endif

		if (item.IsA(POLCLASS_MOBILE) && item.acctname)
			var deathpoint := AP_GetVital(item, "DP");
         if (deathpoint < 40)
            xDesc += "{}{}x Gravemente Ferido<br>".format(WHITE, Ceil((40-deathpoint)/10));
         endif
		elseif (item.isa(POLCLASS_WEAPON) || item.isa(POLCLASS_ARMOR))
         xDesc += "Qualidade: {}<br>{}".format(getQuality(item.quality, 1), WHITE);

         var cfg  := ReadConfigFile(":*:itemdesc");
         var elem := FindConfigElem(cfg, item.objtype);

         if (item.isA(POLCLASS_WEAPON))
            xDesc += "{}Poder: {}<br>{}".format(YELLOW, cint(item.dmg_mod), WHITE);

            if (elem.DamageType)
               xDesc += "Tipo de Dano: {}<br>".format(TranslateDamage(elem.DamageType));
            endif
            xDesc += "Lv. Personagem: {}<br>{}".format(_ifElse((item.dmg_mod / 30)+1 <= 20, (item.dmg_mod / 30)+1, 20), WHITE);
            xDesc += "Lv. Classe: {}<br>{}".format(_ifElse((item.dmg_mod / 50)+1 <= 4, (item.dmg_mod / 50)+1, 4), WHITE);
            
            if (item.quality >= 2)
               var hits := GetWeaponFeat(elem);
               if (hits)
                  xDesc += "{}{}<br>".format(ORANGE, hits);
               endif
            endif

            if (item.quality >= 3)
               var hits := GetHitsInfo(elem);
               if (hits)
                  xDesc += "Passiva {}{}<br>".format(LIGHTGRAY, hits);
               endif
            endif
         elseif (item.isA(POLCLASS_ARMOR) && (item.resist_physical || item.resist_fire || item.resist_poison || item.resist_energy || item.resist_cold))
            var resists := array{DMG_FIRE, DMG_POISON, DMG_COLD, DMG_ENERGY, DMG_PHYSICAL};
            var res := 0;
            foreach resist in resists
               var value := item.get_member("resist_{}".format(resist));
               if (value)
                  xDesc += "Def. {}: {}<br>".format(TranslateDamage(resist), value);
                  if (value > res)
                     res := value;
                  endif
               endif
            endforeach

            xDesc += "Lv. Personagem: {}<br>{}".format(_ifElse((res / 9)+1 <= 20, (res / 9)+1, 20), WHITE);
            xDesc += "Lv. Classe: {}<br>{}".format(_ifElse((res / 15)+1 <= 4, (res / 15)+1, 4), WHITE);
         endif

      elseif (item.isA(POLCLASS_ITEM))
			var cfg  := ReadConfigFile(":farming:itemdesc");
			var elem := FindConfigElem(cfg, item.objtype);
         if (elem.PlantDifficulty)
            if (AP_GetTrueSkill(who, PLANTACAO) >= 4)
				   xDesc += "Fase adulta em {} minutos<br>".format(cint(elem.Steps) * 60);
				   xDesc += "Plantio em: {}<br>".format(GetPlantDates(GetConfigIntArray(elem, "DestroyIn")));
            endif
         endif

         if (GetObjProperty(item, "craftproperty"))
            xDesc += "{}Item de craft<br>".format(ORANGE);
         else
			   var craftcfg  := ReadConfigFile(":crafting:exceptional_cfg");
            if (craftcfg[item.objtype])
               xDesc += "{}Item de craft<br>".format(ORANGE);
            endif
         endif
		endif

      var madeof := GetObjProperty(item, "madeof");
      if (madeof)
         xDesc += "{}Feito com: {}{}<br>".format(WHITE, ORANGE, madeof);
      endif

		var pplmage := GetObjProperty(item, "magicwho"); //research
		if ( pplmage != error && typeof(pplmage) == "Array")
			if (who.serial in pplmage || who.cmdlevel >= 3)
            var pocaoname := GetObjProperty(item, "pocaoname");
            if (pocaoname)
               xDesc +="{}{}<br>".format(WHITE, pocaoname);
            endif
			endif
		endif
		
      if (xDesc.length() > 4)
         XDesc := SubStrReplace(xDesc, "", XDesc.length()-3);
      endif
		xDesc := CAscZ(xDesc);

		if ( xDesc.Size() > 0 )
			// Cliloc ID if these two ID's match it'll only show one line.
			packet.SetInt32(packet.GetSize() - 1, 1070722);

			// Get the offset of where the next text size
			var Length_ID := packet.GetSize();
			packet.SetUnicodeString(packet.GetSize() + 1, xDesc, 1);

			// SetUnicodeString adds 00 BYTE[1] at the start of the Unicode offset, which messes with the length offset.
			// Setting the length of the unicode text below will fix that issue. Same deal as above.
			packet.SetInt16(Length_ID, xDesc.Size() * 2);
		endif

		// End of loop.

		packet.SetInt32(packet.GetSize(), 0);
	endif

	return 0;

endfunction

function getbonusname(mod)
	if (mod == "strmod")
		return "Bônus For";
	elseif (mod == "dexmod")
		return "Bônus Des";
	elseif (mod == "intmod")
		return "Bônus Int";
	elseif (mod == "conmod")
		return "Bônus Cons";
	elseif (mod == "hitsmod")
		return "Bônus HP";
	elseif (mod == "manamod")
		return "Bônus Mana";
	elseif (mod == "stammod")
		return "Bônus Stam";
	elseif (mod == "PhysicalResistMod")
		return "Resistencia Fisica";
	elseif (mod == "ColdResistMod")
		return "Resistencia Frio";
	elseif (mod == "FireResistMod")
		return "Resistencia Fogo";
	elseif (mod == "EnergyResistMod")
		return "Resistencia Energia";
	elseif (mod == "PoisonResistMod")
		return "Resistencia Veneno";
	elseif (mod == "ColdDamageMod")
		return "Dano por Frio";
	elseif (mod == "FireDamageMod")
		return "Dano por Fogo";
	elseif (mod == "EnergyDamageMod")
		return "Dano por Energia";
	elseif (mod == "PoisonDamageMod")
		return "Dano por Veneno";
	elseif (mod == "hp_mod")
		return "Bônus Item PVs";
	else
		return "Bonus " + mod;
	endif
endfunction

function GetPlantDates(destroyin_array)
   if (destroyin_array.size() < 1)
      return "Todos";
   endif

   var returnvalue := "";
   if (!(1 in destroyin_array))
      returnvalue += "Verão; ";
   endif
   if (!(2 in destroyin_array))
      returnvalue += "Outono; ";
   endif
   if (!(3 in destroyin_array))
      returnvalue += "Inverno; ";
   endif
   if (!(5 in destroyin_array))
      returnvalue += "Primavera; ";
   endif

   return returnvalue;
endfunction

function LoadItemEventData()
    var df := DFOpenDataFile( ":magery:runes", DF_CREATE, DF_KEYTYPE_INTEGER);
    return df;
endfunction