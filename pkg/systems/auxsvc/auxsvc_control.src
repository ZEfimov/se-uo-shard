use uo;
use os;

include "include/json";
include "include/utils";
include ":accounts:accounts";

program auxtest( connection )
   print("Starting AUX Service");
   Set_Script_Option(SCRIPTOPT_AUXSVC_ASSUME_STRING, 1);
   // connection.transmit("Connected to shard.");
	SetGlobalProperty("aux_service_pid", GetPid());

	var ev;
	while (connection)
		if (!GetGlobalProperty("aux_service"))
			SetGlobalProperty("aux_service", connection);
		endif

		ev := wait_for_event( 20 );
		// print(ev);
		if (ev) 
         if (ev.type == 0x5) connection.transmit(packJSON(ev));
         else HandleDiscordRequests(connection, ev); endif
		endif
      sleepms(10);
	endwhile
	
	print( "aux connection closed" );
endprogram

function HandleDiscordRequests(connection, ev)
   var unpacked_js := UnpackJSON(ev.value);
   if (unpacked_js.request == "PlayersOnline")
      var prepare_to_transmit := toJson(struct{ key := "Response", value := "Numero de jogadores online: {}".format(EnumerateOnlineCharacters().size()), id := unpacked_js.id });
      connection.transmit(prepare_to_transmit);
   elseif (unpacked_js.request == "WhosOnline")
      var users := EnumerateOnlineCharacters();
      var users_name := array{};
      foreach user in users
         users_name.append(user.getName());
         sleepms(10);
      endforeach
      var prepare_to_transmit := toJson(struct{ key := "Response", value := "Lista de Players Online: {} / {}".format(users.size(), ", ".join(users_name)), id := unpacked_js.id });
      connection.transmit(prepare_to_transmit);
      
   elseif (unpacked_js.request == "RegisterAccount")
      var result := CreateNewAccount(unpacked_js.username, unpacked_js.password, 0, "ML", _ifOr(unpacked_js.email, ""));
      var prepare_to_transmit := toJson(struct{ key := "Response", value := unpacked_js.username, id := unpacked_js.id });
      if ( result.errortext )
         prepare_to_transmit := toJson(struct{ key := "Response", value := "Error: {}".format(result.errortext), id := unpacked_js.id });
      else
         prepare_to_transmit := toJson(struct{ key := "RegisterAccount", account := unpacked_js.username, password := unpacked_js.password, email := _ifOr(unpacked_js.email, ""), id := unpacked_js.id });
      endif

      connection.transmit(prepare_to_transmit);
   endif
endfunction