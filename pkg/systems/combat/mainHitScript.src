/*
 * $Id
 *
 */
use uo;
use os;
use cfgfile;

include ":attributes:attributes";
include ":ghaia:ghaiaUtil";
include ":blood:blood";
include ":combat:combat";
include ":combat:settings";
include ":timedscripts:timedScripts";
include "include/client";
include "include/facings";
include "include/damage";
include ":tn:cooldown";
include ":fls_core:packets";
include "include/say";
include "include/client";
include "include/sounds";
include ":tn:cooldown";

var item_cfg := ReadConfigFile(":*:itemdesc");

program MainHitScript( params )
	var attacker   := params[1];
	var defender   := params[2];
	var weapon     := params[3];
	var armor      := params[4];
	var wpn_a_elem := params[5];
	var bonus_dmg  := params[6];

	SetScriptController(attacker);

	if ( attacker == defender || defender.hidden )
		return 0;
	endif
	
	if ( !attacker.npctemplate && defender.npctemplate && defender.master )
		LogToFile(":fls_core:pets.log", "{} attacked {} ({})".format(attacker.acctname, defender.name, defender.npctemplate), LOG_DATETIME);
	endif


	CreateArrowInDefenderCorpse(defender, weapon);
	ApplyPoison(attacker, defender, weapon);

	var damage_type := GetDamageType(attacker, weapon, wpn_a_elem);
	var base_damage :=  CalculateRawDamage(attacker, wpn_a_elem, weapon);
   if (bonus_dmg)
      base_damage += cint(cdbl(base_damage) * (cdbl(bonus_dmg) / 100));
   endif

   var no_damage_show := 0;
	SetLastDamageInfo(defender, base_damage, 0, attacker);

	// Share the damage to the orb link (Spell)
   if (defender.my_template() == "orb")
      var serial := GetObjProperty(defender, "damage_transfer");
      if (serial)
         var mob := SystemFindObjectBySerial(serial);
         DamageFLS(mob, cint( cdbl(base_damage) * 0.8), damage_type, attacker);
         PlayMovingEffect(defender, mob, 0x22C6, 10, 10);
         PlayHurtSound(mob);
         no_damage_show := 1;
      endif
   endif

   base_damage := CalculateDefenseReduction(defender, damage_type, base_damage, armor);
	DamageFLS(defender, base_damage, DMG_FORCED, attacker, no_damage_show);
	
	PlayHurtSound(defender);
	
	// Hitscript Triggers
	WeaponHitScripts(attacker, defender, weapon, armor, base_damage, wpn_a_elem);
	ArmorHitScripts(attacker, defender, weapon, armor, base_damage);
   PassiveHitScripts(attacker, defender, weapon, armor, base_damage, wpn_a_elem);
	CriticalHitScripts(attacker, defender, weapon, armor, base_damage, wpn_a_elem);

	// Feats Trigger
	PerformDamageFeats(attacker, defender, weapon, armor, base_damage, wpn_a_elem);

	return 1;
endprogram


/**
 * Perform damage feats for the attacker and defender based on the weapon, armor, and base damage.
 * @param {object} attacker - The attacker object.
 * @param {object} defender - The defender object.
 * @param {object} weapon - The weapon used in the attack.
 * @param {object} armor - The armor worn by the defender.
 * @param {number} base_damage - The base damage dealt by the attacker.
 * @param {object} wpn_a_elem - The weapon's elemental properties.
 */
function PerformDamageFeats(attacker, defender, weapon, armor, base_damage, wpn_a_elem)
	EraseObjProperty(attacker, "#backstab");

   if (TS_GetTimerInfo(attacker, "sangue_por_sangue"))
      HealFLS(attacker, cint(base_damage/4));
   endif

	if( GetObjProperty(defender, "#chain_damage") != error && cint(GetObjProperty(defender, "#chain_damage")) > ReadGameClock() )
		var cop_mobs   := GetObjProperty(defender, "#chain_serials");
		var chain_ca   := GetObjProperty(defender, "#chain_ca");
		var chain_mage := SystemFindObjectBySerial( GetObjProperty(defender, "#mageserial") );

		foreach serial in cop_mobs
			var defender := SystemFindObjectBySerial(serial);
			var roll := rollResistDice(defender, INTELLIGENCE);
			if (roll < chain_ca)
				SetLastDamageInfo(defender, base_damage, "chain of pain", attacker);
				DamageFLS(defender, Floor(base_damage/1.5), DMG_FORCED, chain_mage);
			endif
		endforeach
	endif
endfunction

/**
 * Creates an arrow in the defender's corpse.
 * @param {object} defender - The defending object.
 * @param {object} weapon - The weapon used in the attack.
 */
function CreateArrowInDefenderCorpse(defender, weapon)
	if ( defender.IsA(POLCLASS_MOBILE) && defender.backpack )
		var chance := CInt(CS_GetSettingsCfgElem("Archery").RecoverChance);

		if ( RandomDiceRoll("1d100") <= chance )
			var ammo := GetObjProperty(weapon, "ammo");
			if ( ammo )
				CreateItemInBackPack(defender, ammo, 1);
			endif
		endif
	endif
endfunction

/**
 * Apply weapon hit scripts to the defender based on the attacker's weapon and armor.
 * @param {object} attacker - The attacker object.
 * @param {object} defender - The defender object.
 * @param {object} weapon - The weapon used by the attacker.
 * @param {object} armor - The armor worn by the defender.
 * @param {number} base_damage - The base damage dealt by the attacker.
 * @param {object} wpn_a_elem - The weapon's elemental properties.
 */
function WeaponHitScripts(attacker, defender, weapon, armor, base_damage, wpn_a_elem)
	var weapon_scripts := array{};
	var hitopt;

	if ( weapon.IsA(POLCLASS_WEAPON) )
		weapon_scripts := _IfOr(GetObjProperty(weapon, "HitScripts"), array{});
		weapon_scripts += _ifOr(GetConfigStringArray(item_cfg[weapon.objtype], "HitScripts"), array{});
	endif

	if (attacker.npctemplate)
		var npcelem := NPC_GetNPCConfig(attacker.npctemplate);
		weapon_scripts += _ifOr(GetConfigStringArray(npcelem, "HitScripts"), array{});
		weapon_scripts += _ifOr(GetObjProperty(attacker, "HitScripts"), array{});
		hitopt := GetObjProperty(attacker, "generichit");
	else
		hitopt := GetObjProperty(weapon, "generichit");
	endif

	foreach hitscript in weapon_scripts
		var script := start_script("weaponHitScripts/{}".format(hitscript), array{attacker, defender, weapon, armor, base_damage, hitopt});
		if ( !script || script.errortext )
			Print("*Attacker* Weapon {} script error starting [{}] : {}".format(weapon.name, hitscript, script.errortext));
		endif
		sleepms(2);
	endforeach

	return 1;
endfunction

/**
 * Apply passive hit scripts to the defender based on the attacker's weapon and armor.
 * @param {object} attacker - The attacker object.
 * @param {object} defender - The defender object.
 * @param {object} weapon - The weapon used by the attacker.
 * @param {object} armor - The armor worn by the defender.
 * @param {number} base_damage - The base damage dealt by the attacker.
 * @param {object} wpn_a_elem - The weapon's elemental properties.
 */
function CriticalHitScripts(attacker, defender, weapon, armor, byref base_damage, wpn_a_elem)
	var auto_critical := GetObjProperty(attacker, "#nextcritical") ? 1 : 0;
	if (auto_critical)
		EraseObjProperty(attacker, "#nextcritical");
	elseif (GetCooldown(attacker, "critical") > 0 || RandomInt(150) > cint(2 + AP_GetSkill(attacker, "Critical")))
		return 1;
	else
		SetCooldown(attacker, "critical", 10);
	endif

	var weapon_scripts := array;
	var source := weapon.IsA(POLCLASS_WEAPON) ? item_cfg[weapon.objtype] : NPC_GetNPCConfig(attacker.npctemplate);
	weapon_scripts :=  GetConfigStringArray(source, "CriticalHitScripts");

	foreach hitscript in weapon_scripts
		var script := start_script("weaponHitScripts/{}".format(hitscript), array{attacker, defender, weapon, armor, base_damage});
		if ( !script || script.errortext )
			Print("*Attacker* Weapon {} script error starting [{}] : {}".format(weapon.name, hitscript, script.errortext));
		endif
		sleepms(2);
	endforeach

   base_damage += cint(cdbl(base_damage) * 0.5);
	
	return 1;
endfunction

/**
 * Apply passive hit scripts to the defender based on the attacker's weapon and armor.
 * @param {object} attacker - The attacker object.
 * @param {object} defender - The defender object.
 * @param {object} weapon - The weapon used by the attacker.
 * @param {object} armor - The armor worn by the defender.
 * @param {number} base_damage - The base damage dealt by the attacker.
 * @param {object} wpn_a_elem - The weapon's elemental properties.
 */
function PassiveHitScripts(attacker, defender, weapon, armor, base_damage, wpn_a_elem)
   if (weapon.quality < 3) 
		return; 
	endif
   
   var cfg  := ReadConfigFile(":combat:passive_scripts");
   var elem := FindConfigElem(cfg, wpn_a_elem.Passive);
   if (!elem) 
		return;
	endif

   var chance := cint(elem.Chance);
   if (chance && RandomInt(150) > chance)  // I have no idea why 150, but it works.
		return; 
   endif

   var cooldown := cint(elem.Cooldown);
   if (cooldown)
      var cooldown_key := $"P_{wpn_a_elem.Passive}";
      if (GetCooldown(attacker, cooldown_key)) 
			return;
		endif
	
      SetCooldown(attacker, cooldown_key, cooldown);
   endif

   var script := start_script("weaponHitScripts/{}".format(wpn_a_elem.Passive), array{attacker, defender, weapon, armor, base_damage});
   if ( !script || script.errortext )
      Print("*Attacker* Weapon {} passive script error starting [{}] : {}".format(weapon.name, wpn_a_elem.Passive, script.errortext));
   endif
endfunction

/**
 * Apply armor hit scripts to the defender based on the attacker's weapon and armor.
 * @param {object} attacker - The attacker object.
 * @param {object} defender - The defender object.
 * @param {object} weapon - The weapon used by the attacker.
 * @param {object} armor - The armor worn by the defender.
 * @param {number} base_damage - The base damage dealt by the attacker.
 */

function ArmorHitScripts(attacker, defender, weapon, armor, base_damage)
	var body_scripts   := GetObjProperty(defender, "ArmorHitScripts");
	var armor_scripts  := GetObjProperty(armor, "ArmorHitScripts");
	var others_scripts := GetConfigStringArray( item_cfg[armor.objtype], "ArmorHitScripts" );

	if (defender.npctemplate)
		var npcelem := NPC_GetNPCConfig(defender.npctemplate);
		others_scripts := GetConfigStringArray(npcelem, "ArmorHitScripts");
	endif

	if ( !body_scripts )
		body_scripts := array{};
	endif
	if ( !armor_scripts )
		armor_scripts := array{};
	endif
	if ( !others_scripts)
		others_scripts := array{};
	endif

	armor_scripts := armor_scripts + body_scripts + others_scripts;
	
	foreach hitscript in armor_scripts
		var script := start_script("armorHitScripts/{}".format(hitscript), array{attacker, defender, weapon, armor, base_damage});
		if ( script.errortext )
			Print("*Defender* Weapon script error starting ["+hitscript+"] :" + script.errortext);
		endif
		sleepms(2);
	endforeach
	
	return 1;
endfunction


/**
 * Apply poison to the defender using the attacker's weapon.
 * @param {object} attacker - The attacker object.
 * @param {object} defender - The defender object.
 * @param {object} weapon - The weapon used to apply poison.
 */

function ApplyPoison(attacker, defender, weapon)
	var poisonInfo;
	if (GetObjProperty(weapon, "ammo"))
		var aljava := GetEquipmentByLayer(attacker, LAYER_CAPE);
		var ammo := GetObjProperty(weapon, "ammo");
		foreach arrow in (EnumerateItemsInContainer(aljava))
			if (arrow.objtype == ammo)
				weapon := arrow;
			endif
		endforeach
	endif

	if (!attacker.npctemplate) // If not NPC, check for poison on weapon
		poisonInfo := GetObjProperty(weapon, "poisonInfo" );
		if (poisonInfo == error)
			return 0;
		endif

		poisonInfo.dosage -= 1;
		if (poisonInfo.dosage <= 0) // If no more poison charges, delete
         SendSysMessageEx(attacker, "O veneno da sua arma parece ter perdido o efeito", SSM_FAIL);
			EraseObjProperty(weapon, "poisonInfo");
			return 0;
		else // If still has poison, update on weapon
			SetObjProperty(weapon, "poisonInfo", poisonInfo);
		endif
   else // If NPC, get poison from config
      var npcelem  := NPC_GetNPCConfig(attacker.npctemplate);
      var poison := GetConfigString(npcelem, "Poisoning");
      if (poison)
         poison := Splitwords(poison);
         poisonInfo := struct{
            name := poison[1],
            level := Cint(poison[2])
         };
      endif
	endif

	if (!poisonInfo || poisonInfo.name == error)
      return 0;
   endif

   poisonInfo.level := poisonInfo.level ? poisonInfo.level : 1;
   var time := (poisonInfo.name == "paralyzePoison") ? 3 : 15;

   if (randomint(100) < 60)
      TS_StartTimer(defender, poisonInfo.name, time, poisonInfo.level, attacker);
   endif
endfunction

// function Trespassar(attacker, defender)

// 	if (GetObjProperty(attacker, "#trespassando") == 1)
// 		return;
// 	endif

// 	var list := array;
// 	foreach mobile in (ListHostiles(attacker, 1, LH_FLAG_LOS))
// 		if ( (mobile.serial != attacker.serial) && ( mobile.serial != defender.serial ))
// 			list.append(mobile);
// 		endif
// 	endforeach

// 	if (list.size() > 0)
// 		SetObjProperty(attacker, "#trespassando", 1);
// 		var targ := list[RandomInt(list.size())+1 ];
// 		if (GetVital(targ, HITS) > 0)
// 			PrintText(attacker, "*trespassar*" );
// 			if ( HaveFeat(attacker, "Trespassar Critico") )
// 				SetObjProperty(attacker, "#nextcritical", 1);
// 			endif
// 			attacker.attack_once(targ);
// 			EraseObjProperty(attacker, "#nextcritical");
// 		endif
// 		EraseObjProperty(attacker, "#trespassando");
// 	endif

// endfunction
