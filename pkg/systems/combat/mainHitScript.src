/*
 * $Id
 *
 */
use uo;
use os;
use cfgfile;

include ":attributes:attributes";
include ":ghaia:ghaiaUtil";
include ":blood:blood";
include ":combat:combat";
include ":combat:settings";
include ":timedscripts:timedScripts";
include "include/client";
include "include/facings";
include "include/damage";
include ":tn:cooldown";
include ":fls_core:packets";
include "include/say";
include "include/client";
include "include/sounds";

var item_cfg := ReadConfigFile(":*:itemdesc");

program MainHitScript( params )
	var attacker   := params[1];
	var defender   := params[2];
	var weapon     := params[3];
	var armor      := params[4];
	var wpn_a_elem := params[5];
	var bonus_dmg  := params[6];

	SetScriptController(attacker);

	if ( attacker == defender )
		// sendsysmessage(attacker, "attacker ao igual o defender");
		return 0;
	elseif ( defender.hidden )
		return 0;
	elseif ( !attacker.npctemplate && defender.npctemplate && defender.master )
		LogToFile(":fls_core:pets.log", attacker.acctname+" atacou "+defender.name+" ("+defender.npctemplate+")", LOG_DATETIME);
	endif

	FacingChecks(attacker, defender);

	// TODO: Rever depois para montar o exp gain
	// SkillChecks(attacker, defender, weapon, critical);

	ArrowRecovery(defender, weapon);

	//calcula os danos
	var damage_type := GetDamageType(wpn_a_elem);

	var base_damage :=  CalculateRawDamage(attacker, wpn_a_elem, weapon);
   if (bonus_dmg)
      base_damage += cint(cdbl(base_damage) * (cdbl(bonus_dmg) / 100));
   endif
   // print(CalculateDefenseReduction(defender, damage_type, 0, armor));
   base_damage := base_damage - cint(cdbl(base_damage) * CalculateDefenseReduction(defender, damage_type, 0, armor) );
	// Chain Of Pain
	// TODO: reaproveitar depois

	// TODO: Verificar depois

	PoisonChecks(attacker, defender, weapon);

   var no_damage_show := 0;
	SetLastDamageInfo(defender, base_damage, 0, attacker); //Log 
   if (defender.my_template() == "orb")
      var serial := GetObjProperty(defender, "damage_transfer");
      if (serial)
         var mob := SystemFindObjectBySerial(serial);
         DamageFLS(mob, cint( cdbl(base_damage) * 0.8), damage_type, attacker);
         PlayMovingEffect(defender, mob, 0x22C6, 10, 10);
         PlayHurtSound(mob);
         no_damage_show := 1;
      endif
   endif

	PlayHurtSound(defender);
	DamageFLS(defender, base_damage, DMG_FORCED, attacker, no_damage_show);
	EraseObjProperty(attacker, "#backstab");

   // ApplyFeatChanges(attacker, defender, base_damage);

   
	WeaponHitScripts(attacker, defender, weapon, armor, base_damage, wpn_a_elem);
	ArmorHitScripts(attacker, defender, weapon, armor, base_damage);
	CriticalHitScripts(attacker, defender, weapon, armor, base_damage, wpn_a_elem);

   // ApplyInscriptedRunes(attacker, defender, weapon, armor, base_damage);

	if( GetObjProperty(defender, "#chain_damage") != error && cint(GetObjProperty(defender, "#chain_damage")) > ReadGameClock() )
		var cop_mobs   := GetObjProperty(defender, "#chain_serials");
		var chain_ca   := GetObjProperty(defender, "#chain_ca");
		var chain_mage := SystemFindObjectBySerial( GetObjProperty(defender, "#mageserial") );

		foreach serial in cop_mobs
			var defender := SystemFindObjectBySerial(serial);
			var roll := rollResistDice(defender, INTELLIGENCE);
			if (roll < chain_ca)
				SetLastDamageInfo(defender, base_damage, "chain of pain", attacker);
				DamageFLS(defender, Floor(base_damage/1.5), DMG_FORCED, chain_mage);
			endif
		endforeach
	endif

	return 1;
endprogram


function GetDamageType(weapon)
	var attack_type := DMG_PHYSICAL;
	if (weapon.objtype)
		var weapon_type := GetConfigString(item_cfg[weapon.objtype], "DamageType");
		if (weapon_type)
			attack_type := weapon_type;
		endif
	elseif (weapon.DamageType)
		attack_type := weapon.DamageType;
	endif

	return attack_type;
endfunction

function FacingChecks(attacker, defender)
	// if ( !CS_GetSettingsCfgElem("General").ForceFacing )
	// 	return 0;
	// endif
	
	// if ( IsBehind(defender, attacker.x, attacker.y)  )
	// 	SetObjProperty(attacker, "#backstab", 2);
	// endif
	
	return 1;
endfunction

function SkillChecks(attacker, defender, weapon)
   // Não fazer expGain
   // Fazer os achievments
endfunction

function ArrowRecovery(defender, weapon)
	if ( defender.IsA(POLCLASS_NPC) && defender.backpack )
		var chance := CInt(CS_GetSettingsCfgElem("Archery").RecoverChance);

		if ( RandomDiceRoll("1d100") <= chance )
			var ammo := GetObjProperty(weapon, "ammo");
			if ( ammo )
				CreateItemInBackPack(defender, ammo, 1);
			endif
		endif
	endif
endfunction

function WeaponHitScripts(attacker, defender, weapon, armor, base_damage, wpn_a_elem)
	var weapon_scripts := array{};

	if ( weapon.IsA(POLCLASS_WEAPON) )
		weapon_scripts := GetObjProperty(weapon, "HitScripts");
		if (!weapon_scripts)
			weapon_scripts := array{};
		endif
		var other_scripts := GetConfigStringArray(item_cfg[weapon.objtype], "HitScripts");
		foreach script in other_scripts
			weapon_scripts.Append(script);
		endforeach
	endif

	var hitopt;
	if (attacker.npctemplate)
		var npcelem := NPC_GetNPCConfig(attacker.npctemplate);
		var others_scripts := GetConfigStringArray(npcelem, "HitScripts");
		if (weapon_scripts == error)
			weapon_scripts := array;
		endif
		var body_scripts := GetObjProperty(attacker, "HitScripts");
		foreach oscript in others_scripts
			weapon_scripts.append(oscript);
		endforeach
		foreach oscript in body_scripts
			weapon_scripts.append(oscript);
		endforeach
		hitopt := GetObjProperty(attacker, "generichit");
	else
		hitopt := GetObjProperty(weapon, "generichit");
	endif


	foreach hitscript in weapon_scripts
		var script := start_script("weaponHitScripts/{}".format(hitscript), array{attacker, defender, weapon, armor, base_damage, hitopt});
		if ( !script || script.errortext )
			Print("*Attacker* Weapon {} script error starting [{}] : {}".format(weapon.name, hitscript, script.errortext));
		endif
		sleepms(2);
	endforeach

	return 1;
endfunction

function CriticalHitScripts(attacker, defender, weapon, armor, base_damage, wpn_a_elem)
	var auto_critical := 0;
	if (GetObjProperty(attacker, "#nextcritical"))
		EraseObjProperty(attacker, "#nextcritical");
		auto_critical := 1;
	endif

   // if (!dice_roll.critical && !auto_critical)
   //    return;
   // endif
   
	if (!auto_critical)
		if (GetCooldown(attacker, "critical") > 0)
			return 1;
      elseif (RandomInt(100) <= 2 + AP_GetSkill(attacker, "Critical"))
         return 1;
		endif

		SetCooldown(attacker, "critical", 10);
	endif

	var weapon_scripts := array;
	if ( weapon.IsA(POLCLASS_WEAPON) )
		weapon_scripts :=  GetConfigStringArray( item_cfg[weapon.objtype], "CriticalHitScripts" );
	elseif (attacker.npctemplate)
		var npcelem := NPC_GetNPCConfig(attacker.npctemplate);
		weapon_scripts :=  GetConfigStringArray( npcelem, "CriticalHitScripts" );
	endif

   // if (wpn_a_elem.Pericia == ESPADAS && AP_GetTrueSkill(attacker, ESPADAS) >= 2)
   //    weapon_scripts.append("double_dmg");
   // elseif (weapon.isMagicWeapon())
   //    if (wpn_a_elem.DamageType == "Fogo" && AP_GetTrueSkill(attacker, "Magia_de_Fogo") >= 2)
   //       weapon_scripts.append("immolation");
   //    elseif (wpn_a_elem.DamageType == "Eletrecidade" && AP_GetTrueSkill(attacker, "Magia_de_Eletrecidade") >= 2)
   //       weapon_scripts.append("double_dmg");
   //    elseif (wpn_a_elem.DamageType == "Gelo" && AP_GetTrueSkill(attacker, "Magia_de_Gelo") >= 2)
   //       weapon_scripts.append("attackbreak");
   //    elseif (wpn_a_elem.DamageType == "Veneno" && AP_GetTrueSkill(attacker, "Magia_de_Veneno") >= 2)
   //       weapon_scripts.append("constrict");
   //    endif
   // elseif(wpn_a_elem.Pericia == ARCO && AP_GetTrueSkill(attacker, ARCO) >= 2)
   //    weapon_scripts.append("hit_again");
   // elseif(wpn_a_elem.Pericia == ARMAS_DUPLAS && AP_GetTrueSkill(attacker, ARMAS_DUPLAS) >= 2)
   //    weapon_scripts.append("hit_again");
   // elseif (wpn_a_elem.Pericia == BESTA && AP_GetTrueSkill(attacker, BESTA) >= 2)
   //    weapon_scripts.append("double_dmg");
   // elseif (wpn_a_elem.Pericia == MACHADOS && AP_GetTrueSkill(attacker, MACHADOS) >= 2)
   //    weapon_scripts.append("double_dmg");
   // endif

	foreach hitscript in weapon_scripts
		var script := start_script("weaponHitScripts/{}".format(hitscript), array{attacker, defender, weapon, armor, base_damage});
		if ( !script || script.errortext )
			Print("*Attacker* Weapon {} script error starting [{}] : {}".format(weapon.name, hitscript, script.errortext));
		endif
		sleepms(2);
	endforeach
	
	return 1;
endfunction

// function ApplyFeatChanges(attacker, defender, byref dice_roll, byref dmg)
//    var marca := GetObjProperty(attacker, "#marca_inabalavel");
//    if (marca != defender.serial)
//       SetObjProperty(defender, "marca_ativado", attacker.serial);
//    endif

//    marca := GetObjProperty(attacker, "#marca_ativado");
//    if (marca == defender.serial)
//       dice_roll.critical := 1;
//       EraseObjProperty(attacker, "marca_ativado");
//    endif

//    marca := GetObjProperty(defender, "#assassinate");
//    if (marca == attacker.serial)
//       if (RandomDiceRoll("1d100") <= 85)
//          dice_roll.critical := 1;
//       endif
//       EraseObjProperty(defender, "#assassinate");
//    endif
// endfunction

function ArmorHitScripts(attacker, defender, weapon, armor, base_damage)
	var body_scripts   := GetObjProperty(defender, "ArmorHitScripts");
	var armor_scripts  := GetObjProperty(armor, "ArmorHitScripts");
	var others_scripts := GetConfigStringArray( item_cfg[armor.objtype], "ArmorHitScripts" );

	if (defender.npctemplate)
		var npcelem := NPC_GetNPCConfig(defender.npctemplate);
		others_scripts := GetConfigStringArray(npcelem, "ArmorHitScripts");
	endif

	if ( !body_scripts )
		body_scripts := array{};
	endif
	if ( !armor_scripts )
		armor_scripts := array{};
	endif
	if ( !others_scripts)
		others_scripts := array{};
	endif

	//printtextabove(defender, " " + GetCooldown(defender, "campoeletrico"));

	// if (GetCooldown(defender, "campoeletrico"))
	// 	var e := start_script(":combat:armorHitScripts/campoeletrico", array{attacker, defender, weapon, armor, base_damage, critical});
	// 	if (e == error)
	// 		printtextabove(defender, "  " + e);
	// 	endif
	// endif

	armor_scripts := armor_scripts + body_scripts + others_scripts;
	
	foreach hitscript in armor_scripts
		var script := start_script("armorHitScripts/{}".format(hitscript), array{attacker, defender, weapon, armor, base_damage});
		if ( script.errortext )
			Print("*Defender* Weapon script error starting ["+hitscript+"] :" + script.errortext);
		endif
		sleepms(2);
	endforeach
	
	return 1;
endfunction


function PoisonChecks(attacker, defender, weapon)
	if (GetObjProperty(weapon, "ammo"))
		var aljava := GetEquipmentByLayer(attacker, LAYER_CAPE);
		var ammo := GetObjProperty(weapon, "ammo");
		foreach arrow in (EnumerateItemsInContainer(aljava))
			if (arrow.objtype == ammo)
				weapon := arrow;
			endif
		endforeach
	endif

	var poisonInfo;
	if (!attacker.npctemplate)//se não for npc checa se tem poison na arma
		// if (attacker.graphic == 21)
		// 	if (IsPoisonImune(defender, "defaultPoison") )
		// 		return 0;
		// 	endif
			
		// 	return;
		// endif
		poisonInfo := GetObjProperty(weapon, "poisonInfo" );
		if (poisonInfo == error)
			return 0;
		endif

		poisonInfo.dosage := poisonInfo.dosage -1;
		if (poisonInfo.dosage <= 0) //se não tiver mais cargas de veneno, deleta
         SendSysMessageEx(attacker, "O veneno da sua arma parece ter perdido o efeito", SSM_FAIL);
			EraseObjProperty(weapon, "poisonInfo");
			return 0;
		else //se ainda tiver atualiza na arma
			SetObjProperty(weapon, "poisonInfo", poisonInfo);
		endif
   else
      var npcelem  := NPC_GetNPCConfig(attacker.npctemplate);
      var poison := GetConfigString(npcelem, "Poisoning");
      if (poison)
         poison := Splitwords(poison);
         poisonInfo := struct{
            name := poison[1],
            level := Cint(poison[2])
         };
      endif
	endif

	if (!poisonInfo)
      return;
   elseif (poisonInfo.name == error)
      return 0;
   endif

   if (!poisonInfo.level)
      poisonInfo.level := 1;
   endif

   var time := 15;
	if (poisonInfo.name == "paralyzePoison")
		time := 3;
	endif

   if (randomint(100) < 60)
      TS_StartTimer(defender, poisonInfo.name, time, poisonInfo.level, attacker);
   endif
endfunction

// function Trespassar(attacker, defender)

// 	if (GetObjProperty(attacker, "#trespassando") == 1)
// 		return;
// 	endif

// 	var list := array;
// 	foreach mobile in (ListHostiles(attacker, 1, LH_FLAG_LOS))
// 		if ( (mobile.serial != attacker.serial) && ( mobile.serial != defender.serial ))
// 			list.append(mobile);
// 		endif
// 	endforeach

// 	if (list.size() > 0)
// 		SetObjProperty(attacker, "#trespassando", 1);
// 		var targ := list[RandomInt(list.size())+1 ];
// 		if (GetVital(targ, HITS) > 0)
// 			PrintText(attacker, "*trespassar*" );
// 			if ( HaveFeat(attacker, "Trespassar Critico") )
// 				SetObjProperty(attacker, "#nextcritical", 1);
// 			endif
// 			attacker.attack_once(targ);
// 			EraseObjProperty(attacker, "#nextcritical");
// 		endif
// 		EraseObjProperty(attacker, "#trespassando");
// 	endif

// endfunction
