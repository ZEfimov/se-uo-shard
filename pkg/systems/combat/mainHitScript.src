/*
 * $Id
 *
 */
use uo;
use os;
use cfgfile;

include ":attributes:attributes";
include ":ghaia:ghaiaUtil";
include ":blood:blood";
include ":combat:settings";
include ":timedscripts:timedScripts";
include "include/client";
include "include/facings";
include "include/damage";
include ":tn:combat";
include ":tn:cooldown";
include ":fls_core:packets";
include "include/say";
include ":charactercreation:habilidades";
include "include/client";
include "include/sounds";
include ":magery:swordmage";

var item_cfg := ReadConfigFile(":*:itemdesc");

program MainHitScript( params )
	var attacker    := params[1];
	var defender    := params[2];
	var weapon      := params[3];
	var armor       := params[4];
	var base_damage := params[5];
	var critical    := params[6];

	SetScriptController(attacker);

	if ( attacker == defender )
		sendsysmessage(attacker, "attacker ao igual o defender");
		return 0;
	elseif ( attacker.hidden )
		attacker.hidden := 0;
	elseif ( defender.hidden )
		return 0;
	elseif ( !attacker.npctemplate && defender.npctemplate && defender.master )
		LogToFile(":fls_core:pets.log", attacker.acctname+" atacou "+defender.name+" ("+defender.npctemplate+")", LOG_DATETIME);
	endif

	FacingChecks(attacker, defender);
	
	PlayHurtSound(defender);

	// TODO: Rever depois para montar o exp gain
	// SkillChecks(attacker, defender, weapon, critical);

	ArrowRecovery(defender, weapon);

	// Destroi armadura/arma
	// TODO: Sistema é novo agora.
	// WearDownWeapon(attacker, weapon);
	// WearDownArmor(defender, armor, critical, weapon);

	//calcula os danos
	base_damage := CalculateTotalDamageBonus(base_damage, attacker, defender);

	WeaponHitScripts(attacker, defender, weapon, armor, base_damage, critical);
	ArmorHitScripts(attacker, defender, weapon, armor, base_damage, critical);

	// PoisonChecks(attacker, defender, weapon, armor, base_damage, critical);

	// TODO: Verificar depois
	// CriticalHitScripts(attacker, defender, weapon, armor, base_damage, total);

	// Chain Of Pain
	// TODO: reaproveitar depois

	var damage_type := GetDamageType(attacker);
	var resist := checkResist(defender, damage_type);
	if (resist > 0)
		base_damage := Floor(base_damage / 2); 
	elseif (resist < 0)
		base_damage := Floor(base_damage * 2); 
	endif

	if (base_damage < 1)
		base_damage := 1;
	endif


	if( GetObjProperty(defender, "#chain_damage") != error )
		if ( cint(GetObjProperty(defender, "#chain_damage")) > readgameclock())
			var cop_mobs   := GetObjProperty(defender, "#chain_serials");
			var chain_ca   := GetObjProperty(defender, "#chain_ca");
			var chain_mage := SystemFindObjectBySerial( GetObjProperty(defender, "#mageserial") );

			foreach serial in cop_mobs
				var defender := SystemFindObjectBySerial(serial);
				var roll := rollResistDice(defender, "Intelligence");
				if (roll < chain_ca)
					SetLastDamageInfo(defender, base_damage, "chain of pain", attacker);
					DamageFLS(defender, Floor(base_damage/1.5), DMG_FORCED, chain_mage);
				endif
			endforeach
			return 1; //stop script here
		endif
	endif

	SetLastDamageInfo(defender, base_damage, 0, attacker); //Log 

	DamageFLS(defender, base_damage, DMG_FORCED, attacker);
	EraseObjProperty(attacker, "backstab");

	return 1;
endprogram


function GetDamageType(attacker)
	var attack_type := "Concussão";
	if (!attacker.npctemplate && attacker.weapon)
		var weapon_type := GetConfigString(item_cfg[weapon.objtype], "DamageType");
		if (weapon_type)
			attack_type := weapon_type;
		endif
	else
		var damage_type := NPC_GetNPCConfig(attacker).DamageType;
		if (damage_type)
			attack_type := damage_type;
		endif
	endif

	return attack_type;
endfunction

function FacingChecks(attacker, defender)
	if ( !CS_GetSettingsCfgElem("General").ForceFacing )
		return 0;
	endif
	
	if ( IsBehind(defender, attacker.x, attacker.y)  )
		SetObjProperty(attacker, "#backstab", 2);
	endif
	
	return 1;
endfunction

function PlayHurtSound(defender)
	if ( defender.IsA(POLCLASS_NPC) )
		var damaged_sound := NPC_GetNPCConfig(defender).HurtSound;
		if ( damaged_sound && RandomInt(2) == 2)
			PlaySoundEffect(defender, damaged_sound);
		endif
	endif
endfunction

function SkillChecks(attacker, defender, weapon, critical)
	if (defender.npctemplate && attacker.connected)
		//se a skill do atacante for maior que a do defender +10, nao sobe
		var skillDefender := cint(AP_GetSkill(defender,defender.weapon.attribute)) + 10;
		var skillAttacker := cint(AP_GetSkill(defender, attacker.weapon.attribute));
		if ( skillDefender < skillAttacker )
			//printtextabove(attacker, "return " + skillDefender);
			return 0;
		endif
	endif

	var can_gain := 0;
	var next_gain := CInt(GetObjProperty(attacker, "#CS_GainTime"));
	if ( ReadGameClock() >= next_gain )
		if ( CS_GetSettingsCfgElem("General").PvPGains )
			can_gain := 1;
		elseif ( defender.IsA(POLCLASS_NPC) )
			can_gain := 1;
		endif
	endif

	if ( can_gain )
		var gain_wait := CInt(CS_GetSettingsCfgElem("General").GainWait);
		SetObjProperty(attacker, "#CS_GainTime", ReadGameClock()+gain_wait);
		if ( critical > 0 )
			SkillCheck(attacker, weapon.attribute, -1);
			SkillCheck(attacker, TACTICS, -1);
		endif
	endif
endfunction

function ArrowRecovery(defender, weapon)
	if ( defender.IsA(POLCLASS_NPC) && defender.backpack )
		var chance := CInt(CS_GetSettingsCfgElem("Archery").RecoverChance);

		if ( RandomDiceRoll("1d100") <= chance )
			var ammo := GetObjProperty(weapon, "ammo");
			if ( ammo )
				CreateItemInBackPack(defender, ammo, 1);
			endif
		endif
	endif
endfunction

function WeaponHitScripts(attacker, defender, weapon, armor, base_damage, critical)
	var weapon_scripts := array{};

	if ( weapon.IsA(POLCLASS_WEAPON) )
		weapon_scripts := GetObjProperty(weapon, "HitScripts");
		if (!weapon_scripts)
			weapon_scripts := array{};
		endif
		var other_scripts := GetConfigStringArray(item_cfg[weapon.objtype], "HitScripts");
		foreach script in other_scripts
			weapon_scripts.Append(script);
		endforeach
	endif

	var hitopt;
	if (attacker.npctemplate)
		var npcelem := NPC_GetNPCConfig(attacker.npctemplate);
		var others_scripts := GetConfigStringArray(npcelem, "HitScripts");
		if (weapon_scripts == error)
			weapon_scripts := array;
		endif
		var body_scripts := GetObjProperty(attacker, "HitScripts");
		foreach oscript in others_scripts
			weapon_scripts.append(oscript);
		endforeach
		foreach oscript in body_scripts
			weapon_scripts.append(oscript);
		endforeach
		hitopt := GetObjProperty(attacker, "generichit");
	else
		hitopt := GetObjProperty(weapon, "generichit");
	endif

	foreach hitscript in weapon_scripts
		var script := start_script(hitscript, array{attacker, defender, weapon, armor, base_damage, critical, hitopt});
		if ( !script || script.errortext )
			SendSysMessage(attacker, "*Attacker* Weapon script error starting ["+hitscript+"] :" + script.errortext);
			SendSysMessage(defender, "*Attacker* Weapon script error starting ["+hitscript+"] :" + script.errortext);
		endif
		sleepms(2);
	endforeach

	return 1;
endfunction

function ArmorHitScripts(attacker, defender, weapon, armor, base_damage, critical)
	var body_scripts := GetObjProperty(defender, "ArmorHitScripts");
	var armor_scripts := GetObjProperty(armor, "ArmorHitScripts");
	var others_scripts := GetConfigStringArray( item_cfg[armor.objtype], "ArmorHitScripts" );
	if (defender.npctemplate)
		var npcelem := NPC_GetNPCConfig(defender.npctemplate);
		others_scripts := GetConfigStringArray(npcelem, "ArmorHitScripts");
	endif
	if ( !body_scripts )
		body_scripts := array{};
	endif
	if ( !armor_scripts )
		armor_scripts := array{};
	endif
	if ( !others_scripts)
		others_scripts := array{};
	endif

	//printtextabove(defender, " " + GetCooldown(defender, "campoeletrico"));

	// if (GetCooldown(defender, "campoeletrico"))
	// 	var e := start_script(":combat:armorHitScripts/campoeletrico", array{attacker, defender, weapon, armor, base_damage, critical});
	// 	if (e == error)
	// 		printtextabove(defender, "  " + e);
	// 	endif
	// endif

	armor_scripts := armor_scripts + body_scripts + others_scripts;
	
	foreach hitscript in armor_scripts
		var script := start_script(hitscript, array{attacker, defender, weapon, armor, base_damage, critical});
		if ( script.errortext )
			SendSysMessage(attacker, "*Defender* armor script error starting ["+hitscript+"] :" + script.errortext);
			SendSysMessage(defender, "*Defender* armor script error starting ["+hitscript+"] :" + script.errortext);
		endif
		sleepms(2);
	endforeach
	
	return 1;
endfunction


function PoisonChecks(attacker, defender, weapon)
	if ( critical < 1 )
		return 0;
	endif
	if (GetObjProperty(weapon, "ammo"))
		var aljava := GetEquipmentByLayer(attacker, LAYER_CAPE);
		var ammo := GetObjProperty(weapon, "ammo");
		foreach arrow in (EnumerateItemsInContainer(aljava))
			if (arrow.objtype == ammo)
				weapon := arrow;
			endif
		endforeach
	endif

	if (!attacker.npctemplate)//se nao for npc checa se tem poison na arma
		if (attacker.graphic == 21)
			if (IsPoisonImune(defender, "defaultPoison") )
				return 0;
			endif
			if (randomint(100) < 20)
				TS_StartTimer(defender, "defaultPoison", 60, 2, attacker);
			endif
		else
			var poisonInfo := GetObjProperty(weapon, "poisonInfo" );
			if (poisonInfo == error)
				return 0;
			endif
			poisonInfo.dosage := poisonInfo.dosage -1;
			if (poisonInfo.dosage <= 0) //se nao tiver mais cargas de veneno, deleta
				EraseObjProperty(weapon, "poisonInfo");
				return 0;
			else //se ainda tiver atualiza na arma
				SetObjProperty(weapon, "poisonInfo", poisonInfo);
			endif
	
			if (IsPoisonImune(defender, poisonInfo.name) )
				return 0;
			endif
			if (poisonInfo.name == "paralyzePoison")
				poisonInfo.time := 5;
			endif
			TS_StartTimer(defender, poisonInfo.name, poisonInfo.time, poisonInfo.level, attacker);
		endif
	else //se for npc checa a skill
		if (temhabilidade(defender, "Senso da Natureza"))
			return 0;
		endif

		var npcelem := NPC_GetNPCConfig(attacker.npctemplate);
		var poisonchance := GetConfigInt(npcelem, "Poisoning");		
		if (poisonChance > 0)
			if ( RandomInt(100) < poisonChance )
				var poisonName := GetConfigString(npcelem, "PoisonType");
				var level := Cint(GetConfigInt(npcelem, "PoisonLevel"));
				if (!level)
					level := 1;
				endif
				if (poisonName == error)
					return 0;
				endif
				if (IsPoisonImune(defender, poisonName) )
					return 0;
				endif
				var time := level*15;
				if (poisonName == "paralyzePoison")
					time := 10;
				endif
				TS_StartTimer(defender, poisonName, time, level, attacker);
			endif
		else
			return 0;
		endif
	endif
endfunction

// function CriticalHitScripts(attacker, defender, weapon, armor, base_damage, byref critical)

// 	var autoCritical := 0;
// 	if (GetObjProperty(attacker, "#nextcritical"))
// 		EraseObjProperty(attacker, "#nextcritical");
// 		autoCritical := 1;
// 	endif

// 	if (!autoCritical)
// 		if (GetCooldown(attacker, "critical") > 0)
// 			return 1;
// 		endif
// 	endif

// 	//chance total = prop da arma  (pra bonus magicos) + prop do mob (pra npcs ou magias) + valor no itemdesc
// 	var chance := Cint( Cint(GetObjProperty(weapon, "CriticalChance")) + Cint(GetObjProperty(attacker, "CriticalChance")) + Cint((item_cfg[weapon.objtype]).CriticalChance )) + CInt(AP_GetSkill(attacker, TACTICS)/20) + Cint(GetObjProperty(attacker, "#CriticalChance"));
// 	EraseObjProperty(attacker, "#CriticalChance");
// 	if (!chance)
// 		return 1;
// 	endif
// 	if (lower(attacker.weapon.attribute) == lower("rangedcombat") && TemHabilidade(attacker, "Olhos de Aguia"))
// 		chance += 15;
// 	endif
// 	var critcooldown := 60;

// 	var rand := Cint((RandomInt(100) + 1));
// 	//printtextabove(attacker, "chance " + chance + " rand " + rand + " " + (chance > rand) );
// 	var result := chance > rand;

// 	if (autoCritical)
// 		result := 1;
// 	endif

// 	if (  result == 0 )
// 		return 1; //se nao passou
// 	endif

// 	if (!autoCritical)
// 		SetCooldown(attacker, "critical", critcooldown);
// 	endif
	
// 	var weapon_scripts := array;
// 	if ( weapon.IsA(POLCLASS_WEAPON) )
// 		weapon_scripts :=  GetConfigStringArray( item_cfg[weapon.objtype], "CriticalHitScripts" );
// 	elseif (attacker.npctemplate)
// 		var npcelem := NPC_GetNPCConfig(attacker.npctemplate);
// 		weapon_scripts :=  GetConfigStringArray( npcelem, "CriticalHitScripts" );
// 	endif
// 	//Duttones: Possivel mudar o critico de npc's. Prioriza sempre o critico da arma.

// 	//printtextabove(attacker, "critical hit scripts " + weapon_scripts);
// 	if (weapon_scripts.size() > 0)
// 		PrintText(attacker, "*CRITICO*", _DEFAULT_TEXT_FONT, 2118);
// 		SetObjProperty(attacker, "critdelay", ReadGameClock()+180);
// 		if (GetCooldown(defender, "vitalidadeinabalavel"))
// 			SendSysMessageEx(defender, "Voce ignora o critico", SSM_INFO);
// 			SendSysMessageEx(attacker, "O defensor ignorou o critico", SSM_FAIL);
// 			return 1;
// 		endif
// 	endif
	
// 	if (TemHabilidade(defender, "Reflexos Rapidos") && defender.shield)
// 		if (!GetCooldown(defender, "reflexosrapidos"))
// 			PrintText(defender, "*IMUNE*");
// 			SetCooldown(defender, "reflexosrapidos", 10);
// 			return;
// 		endif
// 	endif

// 	foreach hitscript in weapon_scripts
// 		var script := start_script(hitscript, array{attacker, defender, weapon, armor, base_damage, critical});
// 		if ( !script || script.errortext )
// 			SendSysMessage(attacker, "*Attacker* Weapon script error starting ["+hitscript+"] :" + script.errortext);
// 			SendSysMessage(defender, "*Attacker* Weapon script error starting ["+hitscript+"] :" + script.errortext);
// 		endif
		
// 		sleepms(2);
// 	endforeach
	
// 	return 1;
// endfunction

// function Trespassar(attacker, defender)

// 	if (GetObjProperty(attacker, "#trespassando") == 1)
// 		return;
// 	endif

// 	var list := array;
// 	foreach mobile in (ListHostiles(attacker, 1, LH_FLAG_LOS))
// 		if ( (mobile.serial != attacker.serial) && ( mobile.serial != defender.serial ))
// 			list.append(mobile);
// 		endif
// 	endforeach

// 	if (list.size() > 0)
// 		SetObjProperty(attacker, "#trespassando", 1);
// 		var targ := list[RandomInt(list.size())+1 ];
// 		if (GetVital(targ, HITS) > 0)
// 			PrintText(attacker, "*trespassar*" );
// 			if ( TemHabilidade(attacker, "Trespassar Critico") )
// 				SetObjProperty(attacker, "#nextcritical", 1);
// 			endif
// 			attacker.attack_once(targ);
// 			EraseObjProperty(attacker, "#nextcritical");
// 		endif
// 		EraseObjProperty(attacker, "#trespassando");
// 	endif

// endfunction