/////////////////////////////////////////////
//
// combathook.src
//
// Combat System Hooks
//
// Created: 2/26/2004 1:13AM
// Updated: 06/03/2007 1:13AM
//
// Responsavel por:
//
//
////////////////////////////////////////////

use uo;
use cfgfile;

include ":attributes:attributes";
include ":combat:armorZones";
include ":combat:combat";
include "include/packets";
include "include/facings";
include "include/say";
include "include/damage";
// include ":charactercreation:habilidades";
// include ":tn:cooldown";
include ":timedscripts:timedScripts";
include ":combat:settings";
include ":fls_core:fls_characters";

var item_cff  := ReadConfigFile(":*:itemdesc");

//Global because they're important, and it keeps the function
//prototypes shorter and easier to read.
var wpn_a_elem;

program Install()
	print("INSTALLING: AttackHook ... OK!");
	print("");
endprogram

exported function Attack(attacker, defender)
	return Run_Script_To_Completion(":combat:hooks/temporaryHook", array{attacker, defender});
endfunction

// // Rola o dado de ataque
// function GetAttackerChance(attacker, defender)
// 	var dice_gain := 0;
// 	if ( !attacker.npctemplate )
// 		if ( GetEquipmentByLayer(attacker, LAYER_MOUNT))
// 			dice_gain -= -1;
// 		endif
// 	endif

// 	if (GetObjProperty(attacker, "#attackbonus" ) || GetObjProperty(attacker, "hitbonus") || !IsFacing(defender, attacker.x, attacker.y) )
// 		dice_gain += 1;
// 	endif

// 	var attribute := "Strength";
// 	var bonus := 0;
// 	if (!attacker.npctemplate)
// 		// Verifica se arma tem atributo
// 		if (attacker.weapon.Attribute)
// 			attribute := attacker.weapon.Attribute;
// 			// Checa Pericia
// 			if (HaveSkill(attacker, wpn_elem.Pericia))
// 				bonus := cint(getProficiencyBonus(attacker));
// 			endif
// 			// Escolhe maior atributo para versatilidade
// 			if (attribute == "Versatil")
// 				var dex : = AP_GetTrueStat(defender, "Dexterity");
// 				var str : = AP_GetTrueStat(defender, "Strength");
// 				if (dex > str)
// 					attribute := "Strength";
// 				else
// 					attribute := "Dexterity";
// 				endif
// 			endif
// 		endif
// 	else
// 		// Pega atributo principal do npc
// 		var npcelem := NPC_GetNPCConfig(attacker.npctemplate);
// 		if (npcelem.AttackAttribute)
// 			attribute := npcelem.AttackAttribute;
// 		endif
// 	endif
	
// 	var dice := rollAttrDice(attacker, attribute, dice_gain) + bonus;
// 	return dice;
// endfunction

// function GetDefenderCA(defender, armor)
// 	var CA := 5;
// 	if ( !defender.npctemplate )
// 		if (armor)
// 			CA := armor.AR; //se é armadura pesada, n tem dex

// 			var armor_elem := GetItemCFGInfo(defender, armor);
// 			if (armor_elem.pericia == "Armadura Leve")
// 				CA += GetBonusAttr(AP_GetTrueStat(defender, "Dexterity"));
// 			elseif (armor_elem.pericia == "Armadura Média")
// 				var mod := GetBonusAttr(AP_GetTrueStat(defender, "Dexterity"));
// 				if (mod > 2) //max de mod é 2 pra média
// 					mod := 2;
// 				endif

// 				CA += mod;
// 			endif
// 		else
// 			// Se n tem armadura, usa defesa
// 			CA := 10 + GetBonusAttr(AP_GetTrueStat(defender, "Dexterity"));
// 		endif

// 		if (defender.shield)
// 			CA += defender.shield.AR;   
// 		endif
// 	else
// 		var npcelem := NPC_GetNPCConfig(defender.npctemplate);
// 		CA := cint(npcelem.AR);
// 	endif

// 	//nao ta em warmode, 100% de chance
// 	if (defender.acctname && !defender.warmode)
// 		CA := 0;
// 	endif

// 	return CA;
// endfunction

// function WearDownArmor(defender, armor)
// 	if ( armor )
// 		var armr_elem := CS_GetSettingsCfgElem("Armor");
// 		var wearchance := armr_elem.WearChance;
// 		// if ( TemHabilidade(defender, "Conservar Equipamento"))
// 		// 	wearchance := wearchance/2;
// 		// 	if (wearchance < 1)
// 		// 		wearchance := 1;
// 		// 	endif
// 		// endif

// 		if ( RandomDiceRoll("1d100") <= wearchance )
// 			SendSysMessage(defender, armor.desc+" foi danificada.");
// 			var armorhp := armor.hp;
// 			armorhp := armorhp - Cint(armr_elem.WearRate);
// 			if ( armorhp <= 0 )
// 				armor.hp := 0;
// 				SendSysMessage(defender, armor.desc+" foi destruida.");
// 				SetObjProperty(armor, "broken", 1);
// 				SetObjProperty(armor, "realdesc", armor.desc);
// 				SetName(armor, armor.desc+" [danificado]");
// 				MoveItemToContainer(armor, defender.backpack);
// 			elseif ( armor.hp > armor.maxhp )
// 				armor.hp := armor.maxhp;
// 			else
// 				armor.hp := armorhp;
// 			endif
// 		endif
// 	endif
	
// 	return 1;
// endfunction

// function WearDownWeapon(attacker, weapon)
// 	if ( weapon.IsA(POLCLASS_WEAPON) && !attacker.npctemplate)
// 		if ( weapon.objtype == 0x1F020)
// 			return 1;
// 		else
// 			var wpn_elem := CS_GetSettingsCfgElem("Weapons");
// 			var wearchance := CInt(wpn_elem.WearChance);
			
// 			if ( RandomDiceRoll("1d100") <= wearchance )
// 				var weaponhp := weapon.hp - 1;				

// 				if ( weaponhp <= 0 )
// 					weapon.hp := 0;
// 					SendSysMessage(attacker, weapon.desc+" quebrou.");
// 					MoveObjectToLocation(weapon, 1, 1, 1, attacker.realm, MOVEOBJECT_FORCELOCATION);
// 					SetObjProperty(weapon, "broken", 1);
// 					SetObjProperty(weapon, "realdesc", weapon.desc);
// 					SetName(weapon, weapon.desc+" [danificado]");
// 					MoveItemToContainer(weapon, attacker.backpack);
// 				elseif ( weapon.hp > weapon.maxhp )
// 					weapon.hp := weapon.maxhp;
// 				else
// 					weapon.hp := weaponhp;
// 				endif
// 			endif
// 			return 1;
// 		endif
// 	else
// 		return 0;
// 	endif
// endfunction

// // Checa por munição ou faz efeito do npc arqueiro
// function AmmoCheck(attacker, defender)
// 	if ( !wpn_a_elem.ProjectileType )
// 		return 1;
// 	endif

// 	if(attacker.npctemplate)
// 		PlayMovingEffectXYZHued(attacker, defender, wpn_a_elem.ProjectileAnim, 10, 10, 0, 0);
// 		return 1;
// 	endif

// 	var aljava := GetEquipmentByLayer(attacker, LAYER_CAPE);
// 	var ammo   := GetObjProperty(attacker.weapon, "ammo");
// 	if (!ammo)
// 		SendSysMessage(attacker, "Voce nao definiu o tipo de flecha que vai usar. [clique 2x no arco e na flecha]");
// 		return 0;
// 	endif
// 	if ( ConsumeSubstance( aljava, ammo, 1 ) )
// 		var cfg  := ReadConfigFile(":woodworking:itemdesc");
// 		var elem := FindConfigElem(cfg, ammo);
// 		var ammo_color := elem.color;
// 		PlayMovingEffectXYZHued(attacker, defender, wpn_a_elem.ProjectileAnim, 10, 10, 0, ammo_color);
// 		return 1;
// 	else
// 		return 0;
// 	endif

// endfunction

// // Cria as munição no chão
// function ArrowRecovery(defender, weapon)
// 	var chance := 15;
// 	if ( RandomDiceRoll("1d100") <= chance )
// 		var ammo := GetObjProperty(weapon, "ammo");
// 		var y;
// 		var x;
// 		case (RandomInt(5))
// 			1: y := RandomInt(3) * -1; x := RandomInt(3);
// 			2: y := RandomInt(3); x := RandomInt(3) * -1;
// 			3: y := RandomInt(3) * -1; x := RandomInt(3) * -1;
// 			4: y := RandomInt(3); x := RandomInt(3);
// 		endcase
// 		CreateItemAtLocation(defender.x + x, defender.y + y, defender.z, ammo, 1, defender.realm);
// 	endif
// endfunction

// // Checa direção q ta olhando
// function FacingChecks(attacker, defender)
// 	var retval := 1;
// 	if ( !IsFacing(attacker, defender.x, defender.y) )
// 		if ( attacker.npctemplate )
// 			TurnObjectToward(attacker, defender.x, defender.y);
// 		else
// 			if ( IsBehind(attacker, defender.x, defender.y) )
// 				SendSysMessage(attacker, "Voce esta de costas para o inimigo!");
// 				retval := 0;
// 			endif
// 		endif
// 	elseif ( !IsFacing(defender, attacker.x, attacker.y) )
// 		if ( defender.npctemplate )
// 			TurnObjectToward(defender, attacker.x, attacker.y);
// 		endif
// 	endif

// 	return retval;
// endfunction
