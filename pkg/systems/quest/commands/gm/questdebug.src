use uo;
use os;

include ":timeUtils:time";
include ":yggdrasil:boss";
include "include/say";
include "include/shapes";
include "include/facings";
include "include/dungeons";
include "include/client";
include ":sysbook:flsbooks";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":timeUtils:time";
include ":merchants:crafthelp";
include ":ghaia:objective";
include ":magery:basicMagery";
include ":crafting:craft_props";
// include ":quest:quest";

function TamingEffect(targ, reverse := 0)
   PlaySoundEffect(targ, cint(0x1E1));
   var d := 4;
   if (!reverse) d -= 3; endif
   var area := GetCoordsInSquare(targ.x, targ.y, d);
   foreach p in area
      if (CoordinateDistance(targ.x, targ.y, p.x, p.y) >= d-1)
         if (!reverse)
            PlayMovingEffectXYZEx( targ.x, targ.y, targ.z+5, p.x, p.y, targ.z+5, targ.realm, 0x1153, 0 ,0, 0, 1152);
         else
            PlayMovingEffectXYZEx( p.x, p.y, targ.z+5, targ.x, targ.y, targ.z+5, targ.realm, 0x1153, 0 ,0, 0, 1152);
         endif
      endif
      sleepms(2);
   endforeach
endfunction

function DebugGump(who, targ)
   var quest_progress := GetObjProperty(targ, "quest_progress");
   var gump := GFCreateGump();
   GFResizePic(gump, 84, 90, 9260, 280, 260+25);

   var y := 120;
   foreach item in quest_progress
      GFTextLine(gump, 170, y, 2100, "{}".format(item));
      y += 20;
   endforeach

   GFSendGump(who, gump);
endfunction

program oafeatures_sendpacket(who, text)
   var targ     := Target(who);
   if (cint(text) == 1) 
      var roleplay := GetObjProperty(targ, "roleplay_pid");
      var process  := GetProcess(roleplay);
      if (!process) return SendSysMessageEx(who, "couldnt find process"); endif

      var input_list := array{};
      input_list.append(struct{ "title" := "Parametro 1", multipleanswer := 2, "marked" := array{"type", "Matar Monstro" } });
      input_list.append(struct{ "title" := "Parametro 2", multipleanswer := 2, "marked" := array{"template", ":ghaia:" } });
      input_list.append(struct{ "title" := "Parametro 3", multipleanswer := 2, "marked" := array{"color", "0" } });
      input_list.append(struct{ "title" := "Parametro 4", multipleanswer := 2, "marked" := array{"onlyboss", "0" } });
      input_list.append(struct{ "title" := "Parametro 5", multipleanswer := 2, "marked" := array{"party", "1" } });
      input_list.append(struct{ "title" := "Parametro 6", multipleanswer := 2, "marked" := array{"", "" } });
      input_list.append(struct{ "title" := "Parametro 7", multipleanswer := 2, "marked" := array{"", "" } });
      var output := QuestionsGump(who, input_list);
      if (!output)
         return;
      endif
      var search := struct{};
      foreach key in output
         sleepms(2);
         if (!key[1]) continue; endif
         if (key[1] in array{ "color", "onlyboss", "party", "serial",  "item_objtype" }) key[2] := cint(key[2]); endif
         search[key[1]] := key[2];
      endforeach
      process.SendEvent(struct{ type := 0x4785, search := search });
   elseif (cint(text) == 2) 
      var roleplay := GetObjProperty(targ, "roleplay_pid");
      var process  := GetProcess(roleplay);
      process.kill();
       start_script(":roleplay_window:controller", targ);
      return SendSysMessageEx(who, "roleplay resetado");
   endif

   DebugGump(who, targ);


endprogram