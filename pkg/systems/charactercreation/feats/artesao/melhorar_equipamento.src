use cfgfile;
use uo;
include ":attributes:attributes";
include "include/say";
include ":timedscripts:timedScripts";
include ":gumps:gumps_ex";
//include "include/damage";

var item_config     := ReadConfigFile(":*:itemdesc");

program alchemy(params)
   var who := params[1];
   var hab := params[2];
   var item1, smelt_item;
   var myrecipes := GetObjProperty(who, "recipes");
   while (who.connected)
      sleepms(20);
      var gump := GFCreateGump();
      GFSetId(gump, 0x788);
      GFResizePic(gump, 4, 13, 40000, 198, 228);
      GFResizePic(gump, 17, 39, 5120, 94, 156);

      GFAddButton(gump, 42, 58, 306, 306, GF_CLOSE_BTN, 2);
      GFResizePic(gump, 42, 55, 30546, 49, 49);
      if (smelt_item)
         GFTilePic(gump, 40, 57, cint(smelt_item.graphic), smelt_item.color);
      endif
      
      GFTextLine(gump, 117, 55, 1503, "Item a ser");
      GFTextLine(gump, 116, 70, 1503, "Destruído");
      
      if (smelt_item)
         GFGumpPic(gump, 57, 108, 40032, 0);
         GFAddButton(gump, 42, 128, 306, 306, GF_CLOSE_BTN, 3);
         GFResizePic(gump, 42, 126, 30546, 49, 49);
         GFTextLine(gump, 117, 139, 1503, "Item a ser");
         GFTextLine(gump, 116, 154, 1503, "Melhorado");
         if (item1)
            GFTilePic(gump, 40, 128, cint(item1.graphic), item1.color);
            GFAddButton(gump, 48, 203, 2074, 2074, GF_CLOSE_BTN, 1);
         endif
      endif

      GFAddButton(gump, 105, 204, 2071, 2071, GF_CLOSE_BTN, 4);

      var input := GFSendGump(who, gump);

      if (input[0] == 2)
         ReleaseItem(item1);
         ReleaseItem(smelt_item);
         smelt_item := 0;
         item1 := 0;
         SendSysMessageEx(who, "Escolha o item que será desconstruído.", SSM_REQUEST);
         var targ := Target(who, TGTOPT_CHECK_LOS);
         if (!targ.isA(POLCLASS_WEAPON)) continue; endif
         if (!myrecipes[targ.objtype]) 
            SendSysMessageEx(who, "Você precisa ter aprendido a receita deste item antes.", SSM_FAIL); 
            continue;
         elseif (myrecipes[targ.objtype].level < 1)
            SendSysMessageEx(who, "Este item não pode ser melhorado.", SSM_FAIL); 
            continue;
         endif
         
         if (!ReserveItem(targ))
            SendSysMessageEx(who, "Este item esta sendo usado.", SSM_FAIL); 
            continue;
         endif
         smelt_item := targ;
      elseif (input[0] == 3)
         ReleaseItem(item1);
         item1 := 0;
         SendSysMessageEx(who, "Escolha o item que será melhorado.", SSM_REQUEST);
         var targ := Target(who, TGTOPT_CHECK_LOS);
         if (!targ.isA(POLCLASS_WEAPON)) continue; endif
         if (targ.objtype != smelt_item.objtype) 
            SendSysMessageEx(who, "Você não só pode melhorar o item com um equipamento igual ao que será descontruído.", SSM_FAIL); 
            continue;
         endif

         if (targ.isA(POLCLASS_WEAPON))
            if (targ.dmg_mod >= smelt_item.dmg_mod) 
               SendSysMessageEx(who, "Você deve melhorar um item de poder inferior ao que será destruido.", SSM_FAIL);
               continue;
            endif
         elseif (targ.isA(POLCLASS_WEAPON))
            var pass := 0;
            foreach resist in resdmg_list
               var value := smelt_item.get_member("resist_{}".format(resist)) - targ.get_member("resist_{}".format(resist));
               if (value > 0)
                  pass := 1;
               endif
               break;
            endforeach

            if (!pass)
               SendSysMessageEx(who, "Você deve melhorar um item com pelo menos uma resistência inferior ao que será destruido.", SSM_FAIL);
               continue;
            endif
         endif

         if (!ReserveItem(targ) || targ == smelt_item)
            SendSysMessageEx(who, "Este item esta sendo usado.", SSM_FAIL); 
            continue;
         endif
         item1 := targ;
      elseif (input[0] == 1)
         PrintText(who, "*Melhorando equipamento*");
         IncreaseEquipment(item1, smelt_item);
         ReleaseItem(smelt_item);
         ReleaseItem(item1);
         DestroyItem(smelt_item);
         SetName(item1, item1.name);
         smelt_item := 0;
         item1 := 0;
         SendSysMessageEx(who, "O item foi melhorado!", SSM_INFO);
	      PlaySoundEffectPrivate(who, cint(0x03E), who);	
         break;
      else
         break;
      endif
   endwhile

endprogram

function IncreaseEquipment(item, smelt_item)
   if (item.isa(POLCLASS_WEAPON))
      var final_power := cint(smelt_item.dmg_mod - item.dmg_mod) / 2;
      if (final_power < 1) final_power := 1; endif
      item.dmg_mod += final_power;
   elseif (item.isA(POLCLASS_ARMOR) || item.isA(POLCLASS_EQUIPMENT))
      var resist_list := array{};
      foreach resist in resdmg_list
         sleepms(2);
         var value := cint(cdbl(smelt_item.get_member("resist_{}".format(resist)) - item.get_member("resist_{}".format(resist))) / 2);
         if (value < 1) continue; 
         elseif (value+item.get_member("resist_{}".format(resist)) > 60) continue; endif

         for i := 1 to 3
            if (value > resist_list[i].v) resist_list.insert(1, struct{ v := value, res := resist}); break; endif
            sleepms(2);
         endfor
      endforeach

      for i := 1 to 3
         if (!resist_list[i]) break; endif
         var res_value := item.get_member("resist_{}_mod".format(resist_list[i].res));
         item.set_member("resist_{}_mod".format(resist_list[i].res), res_value + resist_list[i].v);
         sleepms(2);
      endfor
   endif
endfunction