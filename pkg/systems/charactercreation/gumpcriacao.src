use cfgfile;
use uo;
use os;

include ":email:email";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":gumps:include/requestgump";
include ":attributes:attributes";
include "include/client";
include "include/arrays";
include "include/utils";
include ":disguise:disguise";
include ":gumps:yesno";
include ":fls_core:fls_characters";
include ":datafile:datafile";
include ":timeUtils:time";
include ":sysbook:flsbooks";
include ":charactercreation:chargumps";

//cores: 1153 -> 2103 -> 2105
program createchar(who)
   Set_Script_Option(SCRIPTOPT_NO_RUNAWAY, 1);
	sleepms(600);
	CloseGump(who, GUMPID_SKILLLIST);
	CloseGump(who, GUMPID_EMAIL_INDEX);

   var account := FindAccount(who.acctname);

	AP_SetVital(who, "Hunger", 0);
	var chardata := struct;

   if (!GetObjProperty(who, "criandochar") && who.cmdlevel < 1)
      SendSysMessageEx(who, "Delete seu personagem antes de criar de novo.", SSM_FAIL);
      who.frozen := 1;
      return 1;
   elseif (GetObjProperty(who, "delete") == 1)
      SendSysMessageEx(who, "Você não pode ter mais de um personagem por conta.", SSM_FAIL);
      who.frozen := 1;
      return 1;
   endif

   if (!who.backpack)
      var mochila := CreateItemAtLocation(who.x, who.y, who.z, 0x9b2, 1, who.realm);
      EquipItem(who, mochila);
   endif

   chardata := struct{}; 
   if (who.cmdlevel < 2) //destroi todos os itens equipados e na bag
      var equiped := listequippeditems(who);
      foreach item in equiped
         if (item != who.backpack && item.layer != LAYER_HAIR && item.layer != LAYER_BEARD)
            DestroyItem(item);
         endif
      endif
   else
      chardata := GetObjProperty(who, "chardata");
      chardata.recriando := 1;
      chardata.exppoints := 0;
   endif

	//Gumps
	StartCharacterCreation(who, chardata);

	chardata.hitpoints  := 500;
	chardata.manapoints := 100;
	chardata.stampoints := 60;

   chardata.points := 0;
   chardata.vitalpoints := 0;

   if (chardata.raca == "Humano")
      chardata.lifetime := AddTimeTo(POLCore().systime, 34, "weeks");
   else
      chardata.lifetime := AddTimeTo(POLCore().systime, 42, "weeks");
   endif

	SetObjProperty(who, "chardata", chardata);

	who.race := RACE_HUMAN;
	who.name := chardata.nome;
	RecalcVitals(who);

	/*=====  End of Section comment block  ======*/

	//Mudar Aparência
   if (!chardata.recriando)
	   LookGump(who, chardata);
   endif

	// SetProfessions(who, chardata);

   // if (who.Caracteristica("Clérigo de Anar"))
      // SysBook_CreateBook(who.backpack, "clerigo1");
   // elseif ()
   //    var rec := CreateItemInBackpack(who, 0x6116);
   //    SysBook_CreateBook(who.backpack, "magia1");
   // endif

	AP_RefreshVitals(who);
	AP_SetVital(who, "Hunger", 0);
	EraseObjProperty(who, "criandochar");
	EraseObjProperty(who, "recriando");

   if (!chardata.recriando && !chardata.heir)
      CreateItemInBackpack(who, 0xeed, 8); //dinheiro
	   start_script( ":email:emailMessage/sendSystemMail", array{ who, "Bem-vindo ao SE!", "Seja bem vindo ao Sussurros Eternos Shard. Este é o sistema de conversação por E-Mail. Sempre que o servidor quiser te comunicar algum aviso importante, você será notificado desta forma. Game Masters também podem utilizar deste sistema para te deixar mensagens ou iniciar uma conversação. [P] Você pode acessar esse menu através do comando '.email' ou dando duplo-clique na estrela no topo de seu paperdoll. [P] [P] Para alterar sua senha digite .senha senhanatiga senhanova [P] [P] Bom Jogo!"} );
      start_Script(":fls_core:commands/player/ficharp", array{who});
   else

   endif
endprogram

function StartCharacterCreation(who, byref chardata)
	while (who.connected)
      sleepms(2);
      
      chardata := struct{
         current_class := "",
         caminhos := array{"Obstinado"},
         subclasses:= array{},
         classes := array{struct{
            id := "Furioso",
            habs := array{},
            exp := 0,
            selected_habs := array{}
         }},
         level := 1,
         points := 1,
         vitalpoints := 0,
         hits := 500,
         mana := 100,
         stam := 30,
         god := "Anar",
         raca := "Humano",
         height := 2,
         weight := 2
      };

      if (CharacterCreationGump(who, chardata))
         continue;
      endif

      if (!chardata.heir)
         chardata.Credits := 60;
         if (ItemPickerGump(who, chardata))
            continue;
         endif
      endif

		// if (getNotaRP(who) == 2)
		// 	if (!YesNo(who, "Você receberá bonificações nesse personagem. Elas não estarão disponíveis no próximo. Deseja continuar?", "Sim", "Não"))
		// 		continue;
		// 	endif
		// endif
      chardata.-Credits;
		break;
	endwhile
endfunction

function RaceGump(who, byref  chardata)
	var first_name := "";
	var last_name := "";

	var gump := GFCreateGump();
	construirgump(gump, 1); //monta a aparência da gump

	if (getNotaRP(who) == 2)
		GFTextLine(gump, 200,138,52,"Criação de Personagem Bonificado!!");
	endif
	GFTextLine(gump, 176, 150, 1153, "Defina o Nome do seu Personagem");
	GFTextLine(gump, 176, 175, 2103, "Primeiro Nome:");
	GFGumpPic(gump, 176, 195, 0x9C53);
	GFTextEntry(gump, 180, 197, 150, 25, 1153, first_name, 99);

	GFTextLine(gump, 176, 230, 2103, "Ultimo Nome:");
	GFGumpPic(gump, 176, 250, 0x9C53);
	GFTextEntry(gump, 180, 252, 150, 25, 1153, last_name, 98);

	var choice_x := 175;
	GFSetRadioGroup(gump, 1);
	GFTextLine(gump, choice_x+1,295,1153,"Escolha sua raça");

	GFTextLine(gump, choice_x+25,315,2103,"Núros");
	GFTextLine(gump, choice_x+25,335,2103,"Valas");
	GFTextLine(gump, choice_x+25,355,2103,"Alayárz");
	GFRadioButton(gump, choice_x, 315, 0x9C4E, 0x9C4F, 1, 2);
	GFTooltipText(gump, "<right>+1 Todos atributos <br/>+ 8 Meses de vida");
	GFRadioButton(gump, choice_x, 335, 0x9C4E, 0x9C4F, 0, 3);
	GFTooltipText(gump, "<right>+2 Inteligência<br/>+1 Dextreza<br/>+ Visão na Penumbra<br/>+ 10 Meses de vida");
	GFRadioButton(gump, choice_x, 355, 0x9C4E, 0x9C4F, 0, 4);
	GFTooltipText(gump, "<right>+2 Dextreza<br/>+1 Inteligência<br/>+ Visão na Penumbra<br/>+ 10 Meses de vida");

	GFSetRadioGroup(gump, 2);
	GFTextLine(gump, choice_x+131, 295,1153,"Escolha seu sexo");
	GFTextLine(gump, choice_x+155, 315,2103,"Homem");
	GFTextLine(gump, choice_x+155, 335,2103,"Mulher");
	GFRadioButton(gump, choice_x+130, 315, 0x9C4E, 0x9C4F, 1, 11);
	GFRadioButton(gump, choice_x+130, 335, 0x9C4E, 0x9C4F, 0, 12);

	var input := GFSendGump(who, gump);

	if (input[0] == 200)
		first_name := GFExtractData( input, 99);
		last_name := GFExtractData( input, 98);
		if (len(first_name) < 3 || cint(len(first_name) + len(last_name)) > 17)
			SendSysMessageEX(who, "A combinação do seu nome com sobrenome não pode ser menor que 3 letras e nem maior que 17 letras", SSM_FAIL);
			RaceGump(who, chardata);
      elseif (!last_name)
			RaceGump(who, chardata);
		endif

		foreach thing in (input.keys)
			case (thing)
				2: chardata.raca := "Humano";
				3: chardata.raca := "Elfo";
				4: chardata.raca := "Meio-Elfo";

				11: 
					if (chardata.raca == "Humano")
						who.graphic 	:= 400;
						who.trueobjtype := 400;
					else
						who.graphic 	:= 605;
						who.trueobjtype := 605;
					endif
					who.gender 		:= 0;
				12: 
					if (chardata.raca == "Humano")
						who.graphic 	:= 401;
						who.trueobjtype := 401;
					else
						who.graphic 	:= 606;
						who.trueobjtype := 606;
					endif
					who.gender := 1;
			endcase

			chardata.nome := first_name;
			chardata.nomefinal := last_name;
         sleepms(2);
		endforeach
	else
		RaceGump(who, chardata);
	endif
endfunction


function CharacterCreationGump(who, byref chardata)
   var godsCfg := ReadConfigFile(":charactercreation:config/gods");
   var classCfg := ReadConfigFile(":charactercreation:config/classes");
   var classes := struct{};
   foreach classe_name in GetConfigStringKeys(classCfg)
      classe := FindConfigElem(classCfg, classe_name);
      if (classe.Caminho && classe.Type == "Main") 
         if (!classes[classe.Caminho]) classes[classe.Caminho] := array{}; endif
         classes[classe.Caminho].append(struct{
            caminho := classe.Caminho,
            type := classe.Type,
            name := classe_name
         });
      endif
      sleepms(2);
   endforeach

   var desc := array{"", ""};

   while (who.connected)
      var gump := GFCreateGump();
      
      GFDisposable(gump, 0);
      GFClosable(gump, 0);
      GFSetID(gump, GUMPID_CREATECHAR);//9260
      GFResizePic(gump, -4, 5, 9380, 441, 547);
      GFTextLine(gump, 155, 49, Ultima.Hue, "Nome do Personagem");
      GFResizePic(gump, 122, 67, 9350, 195, 25);
      GFTextEntry(gump, 125, 70, 187, 20, 0, chardata.nome, 95);
      
      //header
      GFPicTiled(gump, 18, 38, 394, 9, 50);
      GFPicTiled(gump, 16, 512, 398, 9, 50);
      //bottom

      GFTextLine(gump, 36, 105, Ultima.Hue, "Raça do Personagem");
      GFTextLine(gump, 59, 126, Ultima.Hue, "Núro");
      GFTextLine(gump, 59, 148, Ultima.Hue, "Alayarz");
      GFTextLine(gump, 59, 169, Ultima.Hue, "Vala");
      GFAddButton(gump, 36, 125, 210 + (chardata.raca == "Humano" || !chardata.raca), 211, GF_CLOSE_BTN, 44);
      GFAddButton(gump, 36, 147, 210 + (chardata.raca == "Elfo"), 211, GF_CLOSE_BTN, 45);
      GFAddButton(gump, 37, 169, 210 + (chardata.raca == "Meio-Elfo") 211, GF_CLOSE_BTN, 46);
      
      //god
      GFResizePic(gump, 396, 29, 5170, 292, 490);
      GFTextLine(gump, 499, 58, Ultima.Hue, "Deus Venerado");
      var god := FindConfigElem(godsCfg, chardata.god);
      GFGumpPic(gump, 423, 75, cint(god.GumpPic), 0);
      GFAddButton(gump, 566, 477, 2224, 248, GF_CLOSE_BTN, 31);
      GFTextLine(gump, 526, 473, Ultima.Hue, "Trocar");
      GFAddButton(gump, 503, 477, 2223, 248, GF_CLOSE_BTN, 32);

      GFPicTiled(gump, 39, 255, 340, 9, 50); //divisor

	   GFSetRadioGroup(gump, 1);
      GFTextLine(gump, 193, 103, Ultima.Hue, "Altura");
      GFTextLine(gump, 219, 126, Ultima.Hue, "Alto");
      GFCheckBox(gump, 193, 125, 210, 211, (chardata.height == 1 || !chardata.height), 11);
      GFTextLine(gump, 219, 126, Ultima.Hue, "Mediano");
      GFCheckBox(gump, 193, 125, 210, 211, (chardata.height == 2), 12);
      GFTextLine(gump, 219, 126, Ultima.Hue, "Baixo");
      GFCheckBox(gump, 193, 125, 210, 211, (chardata.height == 3), 13);

	   GFSetRadioGroup(gump, 2);
      GFTextLine(gump, 195, 144, Ultima.Hue, "Peso");
      GFTextLine(gump, 217, 165, Ultima.Hue, "Gordo");
      GFCheckBox(gump, 194, 164, 210, 211, (chardata.weight == 1 || !chardata.weight), 14);
      GFTextLine(gump, 217, 165, Ultima.Hue, "Esbelto");
      GFCheckBox(gump, 194, 164, 210, 211, (chardata.weight == 2), 15);
      GFTextLine(gump, 217, 165, Ultima.Hue, "Magro");
      GFCheckBox(gump, 194, 164, 210, 211, (chardata.weight == 3), 16);

      GFTextLine(gump, 20, 191, Ultima.Hue, "Marcas e Características  Pessoais");
      GFResizePic(gump, 19, 209, 9350, 388, 43);
      GFTextEntry(gump, 25, 210, 375, 20, Ultima.Hue, desc[1], 98);
      GFTextEntry(gump, 25, 230, 375, 20, Ultima.Hue, desc[2], 99);
      
      //caminho
      GFTextLine(gump, 189, 269, Ultima.Hue, "Caminho");
      GFTextLine(gump, 109, 293, Ultima.Hue, "Obstinado");
      GFAddButton(gump, 85, 291, 210 + cint(chardata.caminhos[1] == "Obstinado"), 211, GF_CLOSE_BTN, 61);
      GFTextLine(gump, 222, 293, Ultima.Hue, "Sábio");
      GFAddButton(gump, 199, 293, 210 + cint(chardata.caminhos[1] == "Sábio"), 211, GF_CLOSE_BTN, 62);
      GFTextLine(gump, 313, 293, Ultima.Hue, "Sagaz");
      GFAddButton(gump, 290, 293, 210 + cint(chardata.caminhos[1] == "Sagaz"), 211, GF_CLOSE_BTN, 63);
      
      // classe
      GFTextLine(gump, 193, 322, Ultima.Hue, "Classe");
      GFTextLine(gump, 138, 345, Ultima.Hue, classes[chardata.caminhos[1]][1].name);
      GFAddButton(gump, 115, 345, 210 + (chardata.classes[1].id == classes[chardata.caminhos[1]][1].name), 211, GF_CLOSE_BTN, 64);
      GFTextLine(gump, 265, 345, Ultima.Hue, classes[chardata.caminhos[1]][2].name);
      GFAddButton(gump, 242, 345, 210+ (chardata.classes[1].id == classes[chardata.caminhos[1]][2].name), 211, GF_CLOSE_BTN, 65);

      var selected_class := FindConfigElem(classCfg, chardata.classes[1].id);
      GFHTMLArea(gump, 21, 383, 387, 100, selected_class.Description, 1, 1); // class_desc
      GFAddButton(gump, 189, 489, 2076, 248, GF_CLOSE_BTN, 2);

	   var input := GFSendGump(who, gump);

      chardata.nome := GFExtractData(input, 95);
      desc[1] := GFExtractData(input, 98);
      desc[2] := GFExtractData(input, 99);

      if (11 in input.keys)
         chardata.height := 1;
      elseif (12 in input.keys)   
         chardata.height := 2;
      elseif (13 in input.keys)   
         chardata.height := 3;
      endif

      if (14 in input.keys)   
         chardata.weight := 1;
      elseif (15 in input.keys)   
         chardata.weight := 2;
      elseif (16 in input.keys)   
         chardata.weight := 3;
      endif

      switch (input[0])
         case 44:
            chardata.raca := "Humano";
            who.graphic 	:= 400;
            who.trueobjtype := 400;
            break;
         case 45:
            chardata.raca := "Elfo";
            who.graphic 	:= 605;
            who.trueobjtype := 605;
            if (chardata.god == "Anar") chardata.god := "Seredhiel"; endif
            break;
         case 46:
            chardata.raca := "Meio-Elfo";
            who.graphic 	:= 605;
            who.trueobjtype := 605;
            break;
         case 61:
            chardata.caminhos[1] := "Obstinado";
            chardata.classes[1].id := classes[chardata.caminhos[1]][1].name;
            break;
         case 62:
            chardata.caminhos[1] := "Sábio";
            chardata.classes[1].id := classes[chardata.caminhos[1]][1].name;
            break;
         case 63:
            chardata.caminhos[1] := "Sagaz";
            chardata.classes[1].id := classes[chardata.caminhos[1]][1].name;
            break;
         case 64:
            chardata.classes[1].id := classes[chardata.caminhos[1]][1].name;
            break;
         case 65:
            chardata.classes[1].id := classes[chardata.caminhos[1]][2].name;
            break;
      endswitch

      if (input[0] == 2)
         chardata.profile := "{} {}".format(desc[1], desc[2]);
         current_class.current_class := chardata.classes[1].id;
         break;
      endif
      sleepms(2);
   endwhile
endfunction

function LookGump(who, chardata, aparencia := 0)
	var params := struct{
		"race"  := chardata.raca,
		"barba" := (chardata.raca != "Elfo")
	};

	aparencia := disguiseGump(who, params, aparencia);

	//equipa os itens de aparencia tudo
	who.color     := aparencia.corpele;
	who.truecolor := aparencia.corpele;
	//barba
	var mybarba  := GetEquipmentByLayer(who, LAYER_BEARD);
	DestroyItem(mybarba);

	var newbarba := CreateItemAtLocation(who.x, who.y, who.z, aparencia.barba, 1, who.realm);
	newbarba.color := 1109;
	newbarba.color := aparencia.corcabelo;
	EquipItem(who, newbarba);
	
	var myhair := GetEquipmentByLayer(who, LAYER_HAIR);
	DestroyItem(myhair);

	var newhair:= CreateItemAtLocation(who.x, who.y, who.z, aparencia.cabelo, 1, who.realm);
	newhair.color := 1109;
	newhair.color := aparencia.corcabelo;
	EquipItem(who, newhair);

	if ((!aparencia || aparencia.corpele == -1 || aparencia.corcabelo == -1) && !who.cmdlevel)
		SendSysMessageEx(who, "Escolha uma cor para pele e cabelos!", SSM_FAIL);
		LookGump(who, chardata, aparencia);
	elseif (YesNo(who, "Deseja manter esta aparência?" , "Sim.", "Não."))
		return 1;
	else
		LookGump(who, chardata, aparencia);
	endif
endfunction
