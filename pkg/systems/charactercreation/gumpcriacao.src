use cfgfile;
use uo;
use os;

include ":email:email";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":gumps:include/requestgump";
include ":attributes:attributes";
include "include/client";
include "include/arrays";
include ":disguise:disguise";
include ":charactercreation:createchar";
include ":gumps:yesno";
include ":datafile:datafile";
include ":timeutils:time";

//cores: 1153 -> 2103 -> 2105
program createchar(who)
	PlayMusic(who, 8);
	sleepms(200);
	CloseGump(who, GUMPID_SKILLLIST);
	CloseGump(who, GUMPID_EMAIL_INDEX);

	if (GetObjProperty(who, "criandochar") == 1 && who.cmdlevel < 1)
		SendSysMessageEx(who, "Delete seu personagem antes de criar de novo.", SSM_FAIL);
		return 1;
	elseif (GetObjProperty(who, "delete") == 1)
		SendSysMessageEx(who, "Voce nao pode ter mais de um personagem por conta.", SSM_FAIL);
		return 1;
	endif

	SetObjProperty(who, "criandochar", 1);

	//destroi todos os itens equipados e na bag
	if (who.cmdlevel < 2)
		var equiped := listequippeditems(who);
		foreach item in equiped
			if (item != who.backpack && item.layer != LAYER_HAIR && item.layer != LAYER_BEARD)
				DestroyItem(item);
			endif
		endforeach

		equiped := enumerateitemsincontainer(who.backpack);
		foreach item in equiped
			DestroyItem(item);
		endforeach
		equiped := 0;
	endif

	//zeras as skills
	foreach attrib in AP_ListAttributesByType()
		AP_SetTrueSkill(who, attrib, 0);
		sleepms(10);
	endforeach

	//Gumps
	var chardata := struct;
	ShowCreateGumps(who, chardata);

	//Status
	AP_SetTrueStat(who, "Strength", chardata.str);
	AP_SetTrueStat(who, "Dexterity", chardata.dex);
	AP_SetTrueStat(who, "Intelligence", chardata.inte);
	AP_SetTrueStat(who, "Constitution", chardata.con);
	AP_SetTrueStat(who, "Wisdom", chardata.wis);
	AP_SetTrueStat(who, "Charisma", chardata.char);

	var class_cfg := FindConfigElem(ReadConfigFile(":charactercreation:config/classes"), cstr(chardata.classe) );
	chardata.hitpoints  := cint(class_cfg.HITS) + cint(GetBonusAttr(chardata.con));
	chardata.manapoints := cint(class_cfg.MANA) + cint(GetBonusAttr(chardata.inte));
	chardata.stampoints := cint(class_cfg.STAM) + cint(GetBonusAttr(chardata.dex));

	foreach skill in (chardata.skills)
		AP_SetTrueSkill(who, skill, 1);
	endforeach

	if (chardata.raca == "Humano")
		chardata.lifetime := AddTimeTo(ReadGameClock(), 34, "weeks");
	else
		chardata.lifetime := AddTimeTo(ReadGameClock(), 42, "weeks");
	endif

	SetObjProperty(who, "chardata", chardata);

	who.race := RACE_HUMAN;
	who.name := chardata.nome;
	if (chardata.nomefinal && chardata.nomefinal != "" && chardata.nomefinal != " ")
		who.name := chardata.nome + " " + chardata.nomefinal;
	endif
	RecalcVitals(who);

	/*=====  End of Section comment block  ======*/

	SetProfessions(who, chardata);

	//Mudar Aparência
	LookGump(who, chardata);

	MoveObjectToLocation( who, 4230, 31, 1, who.realm, MOVEOBJECT_FORCELOCATION);
	AP_RefreshVitals(who);
	AP_SetVital(who, "Hunger", 1);

	start_script( ":email:emailMessage/sendSystemMail", array{ who, "Bem-vindo ao SE!", "Seja bem vindo ao Ultimos Sussurros Shard. Este é o sistema de conversação por E-Mail. Sempre que o servidor quiser lhe comunicar algum aviso importante, você será notificado desta forma. Game Masters também podem utilizar deste sistema para lhe deixar mensangens ou iniciar uma conversação. [P] Você pode acessar esse menu através do comando '.email' ou dando duplo-clique na estrela no topo de seu paperdoll. [P] [P] Bom Jogo!"} );
	// if (getNotaRP(who) == 2)
	// 	start_script (":email:emailMessage/sendSystemMail", array{ who, "Bonificação Nota 2", "Parabéns! [P] Você se destacou na vida pasasda do seu personagem e foi premiado por isso: [P] [P] + Você receberá +5 pontos em todas suas perícias para inicio de jogo. [P] +Você irá receber +200 moedas para investir na econômia do jogo e destacar seu personagem. [P] [P] Estas bonifcações só irão valer para este personagem. Se recriar, você irá iniciar como um jogador comum [P] Bom Jogo!"} );
	// 	CreateItemInBackpack(who, 0xba63, 200); //dinheiro
	// 	setNotaRP(who, 0);
	// 	// SetSkillPoints(who, GetSkillPoints(who)+3);
	// 	// who.SetPoints(who.getPoints()+9);
	// 	who.setLevel(who.getLevel()+3);
	// endif
endprogram

function construirgump(byref gump, back := 0) //monta a aparência da gump
	if (who.cmdlevel < 2) 
		GFClosable(gump, 0);
	endif
	
	GFDisposable(gump, 0);
	GFSetID(gump, GUMPID_CREATECHAR);//9260
	GFGumpPic(gump, 50,80, 10421);
	GFResizePic(gump, 84, 90, 0x9c40, 420, 500);

	GFGumpPicTiled(gump, 90,100,30,480,10460);
	GFGumpPicTiled(gump, 468,100,30,480,10460);
	// GFGumpPicTiled(gump, 80,88,463,16,10100);
	// GFGumpPicTiled(gump, 84,610,457,16,10100);
	GFGumpPic(gump, 85,79, 10420);

//	GFAddAlphaRegion(gump, 127,103,375,509);
	GFGumpPic(gump, 37,370, 10402);

	GFHTMLArea(gump, 120, 103, 380, 20,"<BASEFONT Size=6 Color=#cccccc><center>Ultimos Sussurros Shard");

	GFTextLine(gump, 390,550,2103,"Próximo");
	GFAddButton(gump, 440, 550, 9903, 9905, GF_CLOSE_BTN, 200);

	if (!back)
		GFTextLine(gump, 160,550,2103,"Reiniciar");
		GFAddButton(gump, 130, 550, 9909, 9911, GF_CLOSE_BTN, 201);
	endif
endfunction

function rollBaseDice(sum := 0) 
	var dices := array{ RandomDiceRoll("1d6"), RandomDiceRoll("1d6"), RandomDiceRoll("1d6"), RandomDiceRoll("1d6") };
	RemoveLowest(dices);

	var final_dice := ArraySum(dices) + sum;
	return final_dice;
endfunction

function ShowCreateGumps(who, byref chardata)
	while (who.connected)
		chardata := struct;
		chardata.+Skills := dictionary;
		chardata.+str  := rollBaseDice();
		chardata.+dex  := rollBaseDice();
		chardata.+inte := rollBaseDice();
		chardata.+con  := rollBaseDice();
		chardata.+wis  := rollBaseDice();
		chardata.+char := rollBaseDice();
		chardata.+antecedente := "";

		if (RaceGump(who,chardata))
			continue;
		endif

		if (ChooseGod(who, chardata))
			continue;
		endif

		if (AttributeGump(who, chardata))
			continue;
		endif

		if (ChooseBackground(who, chardata))
			continue;
		endif

		if (SkillGump(who, chardata))
			continue;
		endif
		// if (getNotaRP(who) == 2)
		// 	if (!YesNo(who, "Você receberá bonificações nesse personagem. Elas não estarão disponíveis no próximo. Deseja continuar?", "Sim", "Não"))
		// 		continue;
		// 	endif
		// endif
		break;
	endwhile
endfunction

function RaceGump(who, byref  chardata)
	var first_name, last_name;
	first_name := "eeeeeee";
	last_name := "wwww";

	var gump := GFCreateGump();
	construirgump(gump, 1); //monta a aparência da gump

	if (getNotaRP(who) == 2)
		GFTextLine(gump, 200,138,52,"Criação de Personagem Bonificado!!");
	endif
	GFTextLine(gump, 176, 150, 1153, "Defina o Nome do seu Personagem");
	GFTextLine(gump, 176, 175, 2103, "Primeiro Nome:");
	GFGumpPic(gump, 176, 195, 0x9C53);
	GFTextEntry(gump, 180, 197, 150, 25, 1153, first_name, 99);

	GFTextLine(gump, 176, 230, 2103, "Ultimo Nome:");
	GFGumpPic(gump, 176, 250, 0x9C53);
	GFTextEntry(gump, 180, 252, 150, 25, 1153, last_name, 98);

	var choice_x := 175;
	GFSetRadioGroup(gump, 1);
	GFTextLine(gump, choice_x+1,295,1153,"Escolha sua raça");

	GFTextLine(gump, choice_x+25,315,2103,"Humano");
	GFTextLine(gump, choice_x+25,335,2103,"Elfo");
	GFTextLine(gump, choice_x+25,355,2103,"Meio-Elfo");
	GFRadioButton(gump, choice_x, 315, 0x9C4E, 0x9C4F, 1, 2);
	GFRadioButton(gump, choice_x, 335, 0x9C4E, 0x9C4F, 0, 3);
	GFRadioButton(gump, choice_x, 355, 0x9C4E, 0x9C4F, 0, 4);

	GFSetRadioGroup(gump, 2);
	GFTextLine(gump, choice_x+131, 295,1153,"Escolha seu sexo");
	GFTextLine(gump, choice_x+155, 315,2103,"Homem");
	GFTextLine(gump, choice_x+155, 335,2103,"Mulher");
	GFRadioButton(gump, choice_x+130, 315, 0x9C4E, 0x9C4F, 1, 11);
	GFRadioButton(gump, choice_x+130, 335, 0x9C4E, 0x9C4F, 0, 12);

	GFSetRadioGroup(gump, 3);
	GFTextLine(gump, choice_x+1,395,1153,"Escolha sua classe");
	GFTextLine(gump, choice_x+25,415,2103,"Guerreiro");
	GFTextLine(gump, choice_x+25,435,2103,"Ladino");
	GFRadioButton(gump, choice_x, 415, 0x9C4E, 0x9C4F, 1, 5);
	GFRadioButton(gump, choice_x, 435, 0x9C4E, 0x9C4F, 0, 6);
	GFTextLine(gump, choice_x+155,415,2103,"Mago");
	GFTextLine(gump, choice_x+155,435,2103,"Clérigo");
	GFRadioButton(gump, choice_x+130, 415, 0x9C4E, 0x9C4F, 0, 7);
	GFRadioButton(gump, choice_x+130, 435, 0x9C4E, 0x9C4F, 0, 8);

	var input := GFSendGump(who, gump);

	if (input[0] == 200)
		first_name := GFExtractData( input, 99);
		last_name := GFExtractData( input, 98);
		if (len(first_name) < 3 || cint(len(first_name) + len(last_name)) > 17)
			SendSysMessageEX(who, "A combinacao do seu nome com sobrenome nao pode ser menor que 3 letras e nem maior que 17 letras", SSM_FAIL);
			RaceGump(who, chardata);
		endif

		foreach thing in (input.keys)
			case (thing)
				2: chardata.raca := "Humano";
				   chardata.inte += 1;
				   chardata.str += 1;
				   chardata.dex += 1;
				   chardata.wis += 1;
				   chardata.con += 1;
				3: chardata.raca := "Elfo";
				   chardata.inte += 2;
				   chardata.dex += 1;
				4: chardata.raca := "Meio-Elfo";
				   chardata.dex += 2;
				   chardata.inte += 1;

				5: chardata.classe := "Guerreiro";
				6: chardata.classe := "Ladino";
				7: chardata.classe := "Mago";
				8: chardata.classe := "Clérigo";

				11: 
					if (chardata.raca == "Humano")
						who.graphic 	:= 400;
						who.trueobjtype := 400;
					else
						who.graphic 	:= 605;
						who.trueobjtype := 605;
					endif
					who.gender 		:= 0;
				12: 
					if (chardata.raca == "Humano")
						who.graphic 	:= 402;
						who.trueobjtype := 402;
					else
						who.graphic 	:= 606;
						who.trueobjtype := 606;
					endif
					who.gender := 1;
			endcase

			chardata.nome := first_name;
			chardata.nomefinal := last_name;
		endforeach
	else
		RaceGump(who, chardata);
	endif
endfunction

function ChooseGod(who, byref chardata)
	var god_choose := "Anar";
	if (chardata.raca != "Humano")
		god_choose := "Seredhiel";
	endif
	while (who.connected)
		var gump := GFCreateGump();
		construirgump(gump); //monta a aparência da gump
		// GFTextLine(gump, 140,120,1153,"Escolha seu Deus: ");

		case (god_choose)
			"Anar":
				GFGumpPic(gump, 180, 130, 0x7770);
			"Seredhiel":
				GFGumpPic(gump, 180, 130, 0x7767);
			"Eredich":
				GFGumpPic(gump, 180, 130, 0x7774);
		endcase
		// GFGumpPic(gump, 160, 200, );
		// GFGumpPic(gump, 240, 200, 0x7767);

		var name_picx := 230;
		GFGumpPic(gump, name_picx, 485, 0x2939);
		GFGumpPicTiled(gump, name_picx+25, 485, 90, 60, 0x293A);
		GFGumpPic(gump, name_picx+110, 485, 0x293B);
		
		GFHTMLArea(gump, name_picx+5, 503, 135, 20, "<BASEFONT SIZE=5 COLOR=#ffffcc><center>{}".format(god_choose));
		
		GFTextMid(gump, 235, 545, 140, 1150, "Trocar");
		GFAddButton(gump, 278, 560, 0x7777, 0x7777, GF_CLOSE_BTN, 7);

		var input := GFSendGump(who, gump);
		// case (input[0])

		// endcase

		if (input[0] == 7)
			case (chardata.raca)
				"Elfo":
					SendSysMessageEx(who, "Elfos servem somente a Seredhiel.", SSM_FAIL);
					god_choose := "Seredhiel";
				"Humano":
				"Meio-Elfo":
					case (god_choose)
						"Seredhiel":
							god_choose := "Anar";
						"Anar":
							god_choose := "Seredhiel";
					endcase
			endcase
		elseif (input[0] == 200)
			chardata.god := god_choose;
			break;
		elseif (input[0] == 201)
			return 1;
		endif
	endwhile
endfunction

function AttributeGump(who, byref  chardata)
	var last_attr := 0;
	var btn_values := array{"str", "dex", "inte", "con", "wis"};
	while (who.connected)
		var gump := GFCreateGump();
		construirgump(gump); //monta a aparência da gump

		var x := 225;
		var y := 260;

		GFResizePic(gump, x-60, y-75, 0x7748, 265, 250);
		
		GFTextLine(gump, x+5,y-30,1153,"Defina seus atributos: ");

		GFResizePic(gump, x, y, GFCfgConst("Backgrounds", "PAPER"), 80, 20);
		GFResizePic(gump, x, y+25, GFCfgConst("Backgrounds", "PAPER"), 80, 20);
		GFResizePic(gump, x, y+50, GFCfgConst("Backgrounds", "PAPER"), 80, 20);
		GFResizePic(gump, x, y+75, GFCfgConst("Backgrounds", "PAPER"), 80, 20);
		GFResizePic(gump, x, y+100, GFCfgConst("Backgrounds", "PAPER"), 80, 20);
		GFTextLine(gump, x+3, y, 1150,"Força:");
		GFTextLine(gump, x+3, y+25, 1150,"Destreza:");
		GFTextLine(gump, x+3, y+50, 1150,"Inteligência:");
		GFTextLine(gump, x+3, y+75, 1150,"Constituição:");
		GFTextLine(gump, x+3, y+100, 1150,"Sabedoria:");

		GFResizePic(gump, x+80, y, GFCfgConst("Backgrounds", "PAPER"), 30, 20);
		GFResizePic(gump, x+80, y+25, GFCfgConst("Backgrounds", "PAPER"), 30, 20);
		GFResizePic(gump, x+80, y+50, GFCfgConst("Backgrounds", "PAPER"), 30, 20);
		GFResizePic(gump, x+80, y+75, GFCfgConst("Backgrounds", "PAPER"), 30, 20);
		GFResizePic(gump, x+80, y+100, GFCfgConst("Backgrounds", "PAPER"), 30, 20);

		GFTextLine(gump, x+83,y,2103, chardata.str);
		GFTextLine(gump, x+83,y+25,2103, chardata.dex);
		GFTextLine(gump, x+83,y+50,2103, chardata.inte);
		GFTextLine(gump, x+83,y+75,2103, chardata.con);
		GFTextLine(gump, x+83,y+100,2103, chardata.wis);

		var btn_hex := array{0x9c4E, 0x9c4E, 0x9c4E, 0x9c4E, 0x9c4E, 0x9c4E};
		if (last_attr != 0)
			btn_hex[last_attr] := 0x9c4F;
		endif

		GFAddButton(gump, x+115, y, btn_hex[2], 0x9c4F, GF_CLOSE_BTN, 2);
		GFAddButton(gump, x+115, y+25, btn_hex[3], 0x9c4F, GF_CLOSE_BTN, 3);
		GFAddButton(gump, x+115, y+50, btn_hex[4], 0x9c4F, GF_CLOSE_BTN, 4);
		GFAddButton(gump, x+115, y+75, btn_hex[5], 0x9c4F, GF_CLOSE_BTN, 5);
		GFAddButton(gump, x+115, y+100, btn_hex[6], 0x9c4F, GF_CLOSE_BTN, 6);

		var input := GFSendGump(who, gump);

		if (input[0] == 201)
			return 1;
		elseif (input[0] == 200)
			break;
		elseif (input[0] > 1 && input[0] < 8)
			if (last_attr == 0)
				last_attr := input[0];
			elseif (last_attr == input[0])
				last_attr := 0;
			else
				var atr       := btn_values[last_attr-1];
				var choose_atr := btn_values[input[0]-1];

				var stored_atr := chardata[choose_atr];
				chardata[choose_atr] := chardata[atr];
				chardata[atr] := stored_atr;

				last_attr := 0;
			endif
		endif
	endwhile
endfunction

function ChooseBackground(who, byref chardata)

	var cfg         := ReadConfigFile(":charactercreation:config/antecedentes");
	var keys        := GetConfigStringKeys( cfg );
	var kits        := array{};
	var selectedkit := 1;
	foreach key in keys
		var elem         := FindConfigElem(cfg, key);
		var canadd       := 1;
		var racas        := GetConfigStringArray( elem, "Raca" );
		var sexos        := GetConfigStringArray( elem, "Sexo" );
		var classes      := GetConfigStringArray( elem, "Classe" );
		var require_nota := GetConfigInt( elem, "NotaRP" );

		if ((racas.size() >= 1) && !(chardata.raca in racas))
			//sendsysmessage(who, " racas " + racas + " chardata.raca " + chardata.raca);
			canadd := 0;
		endif
		if ((classes.size()>=1) && !(chardata.classe in classes))
			//sendsysmessage(who, " classes " + classes + " chardata.classe " + chardata.classe);
			canadd := 0;
		endif
		if ((sexos.size() >= 1) && !(cstr(who.gender) in sexos))
			//sendsysmessage(who, " povos " + povos + " chardata.povo " + chardata.povo);
			canadd := 0;
		endif

		if (require_nota && getNotaRP(who) != require_nota)
			canadd := 0;
		endif

		if (canadd)
			var kit         := struct;
			kit.+nome       := key;
			kit.+desc       := GetconfigString(elem, "Desc");
			kit.+equip_desc := GetconfigString(elem, "ItemDesc");
			kit.+pericias   := GetConfigStringArray( elem, "Pericia" );
			kits.append(kit);
		endif
		sleepms(5);
	endforeach


	if (BackgroundGump(who, chardata, selectedkit, kits))
		return 1;
	endif
endfunction

function BackgroundGump(who, byref chardata, byref selectedkit, byref  kits)
	while (who.connected)
		var gump := GFCreateGump();
		construirgump(gump); //monta a aparência da gump
		GFTextLine(gump, 150, 140, 2103, "Você pode escolher um dos antecedentes abaixo:");

		var i := 1;
		var x := 170;
		var y := 200;
		for ( i := 1; i <= kits.size(); i := i + 1)
			if ( i == selectedkit)
				GFTextLine(gump, x, y,2105,kits[i].nome);
			else
				GFTextLine(gump, x, y,2103,kits[i].nome);
			endif

			var selected := 0;
			if (i == selectedkit)
				selected := 1;
			endif

			if  (i == selectedkit)
				GFAddButton(gump, (x-24), y, 0x9c4F, 0x9c4F, GF_CLOSE_BTN, i);
			else
				GFAddButton(gump, (x-24), y, 0x9c4E, 0x9c4F, GF_CLOSE_BTN, i);
			endif

			y := y + 24;
			if (i == 10)
				y := 200;
				x := 400;
			endif
		endfor

		var str := "";
		if ( kits[selectedkit].desc)
			str :=  str + kits[selectedkit].desc + "<BR>Pericias: ";
		endif
		if ( kits[selectedkit].pericias)
			str :=  str + kits[selectedkit].pericias + "<BR>Equipamentos: ";
		endif
		if ( kits[selectedkit].equip_desc)
			str :=  str + kits[selectedkit].equip_desc;
		endif
		GFHTMLArea(gump, 125, 440, 340, 100, str, 3000);

		var ret := GFSendGump(who, gump);

		//sendsysmessage(who, "ret.keys " + ret.keys[2]);

		if (cint(ret[0]) == 200)
			var kitname  := kits[selectedkit].nome;
			var pericias := kits[selectedkit].pericias;
			chardata.background := kitname;
			chardata.skills     := pericias;
			SendSysMessageEx(who, "Seu antecedente: " + chardata.background, SSM_INFO);
			break;
		elseif (cint(ret[0]) == 201)
			return 1;
		else
			selectedkit := ret[0];
		endif
	endwhile
endfunction

function SkillGump(who, byref  chardata)
	var cfg  := ReadConfigFile(":charactercreation:config/classes");
	var elem := FindConfigElem(cfg, cstr(chardata.classe) );

	// Adiciona pericias de classe
	var skills_classe := GetConfigStringArray(elem, "Pericia");
	chardata.skills := skills_classe + chardata.skills;

	var raw_skillchoice := GetConfigStringArray(elem, "Lista");
	var skills_choice := array{};
	foreach skill in raw_skillchoice;
		if (!(skill in chardata.skills))
			skills_choice += skill;
		endif
	endforeach

	while (who.connected)
		var gump := GFCreateGump();
		construirgump(gump); //monta a aparência da gump
		GFTextLine(gump, 150,140,2103,"Escolha mais duas pericias para seu personagem.");

		var x := 180;
		var y := 180;

		var i := 21;
		foreach skill in skills_choice
			GFTextLine(gump, x, y, 2100, skill);
			GFCheckBox(gump, x-25, y, 0x9c4E, 0x9c4F, 0, i);
			y := y + 25;
			i += 1;
		endforeach

		var input := GFSendGump(who, gump);

		if (input[0] == 200)
			var skills_chosed := array{};
			foreach btn in (input.keys)
				if (btn > 20 && btn <= 40)
					skills_chosed += skills_choice[btn-20];
				endif
			endforeach

			if (skills_chosed.Size() > 2)
				SendSysMessageEx(who, "Escolha somente duas pericias!", SSM_FAIL);
			elseif (skills_chosed.Size() < 2)
				SendSysMessageEx(who, "Escolha pelo menos duas pericias!", SSM_FAIL);
			else
				chardata.skills := chardata.skills + skills_chosed;
				break;
			endif
			// break;
		elseif (input[0] == 201)
			return 1;
		endif
	endwhile
endfunction
 
function LookGump(who, chardata, aparencia := 0)
	var params := struct{
		"raca"  := chardata.raca,
		"barba" := (chardata.raca == "Humano")
	};

	aparencia := disguiseGump(who, params, aparencia);

	//equipa os itens de aparencia tudo
	who.color    := aparencia.corpele;
	who.truecolor:= aparencia.corpele;
	//barba
	var mybarba  := GetEquipmentByLayer(who, LAYER_BEARD);
	DestroyItem(mybarba);

	var newbarba := CreateItemAtLocation(who.x, who.y, who.z, aparencia.barba, 1, who.realm);
	newbarba.color := 1109;
	newbarba.color := aparencia.corcabelo;
	EquipItem(who, newbarba);
	
	var myhair := GetEquipmentByLayer(who, LAYER_HAIR);
	DestroyItem(myhair);

	var newhair:= CreateItemAtLocation(who.x, who.y, who.z, aparencia.cabelo, 1, who.realm);
	newhair.color := 1109;
	newhair.color := aparencia.corcabelo;
	EquipItem(who, newhair);

	if (aparencia.corpele == -1 || aparencia.corcabelo == -1)
		SendSysMessageEx(who, "Escolha uma cor para os cabelos!", SSM_FAIL);
		LookGump(who, chardata, aparencia);
	elseif (YesNo(who, "Deseja manter esta aparência?" , "Sim.", "Não."))
		return 1;
	else
		LookGump(who, chardata, aparencia);
	endif
endfunction

function SetProfessions(who, chardata);
	var background := chardata.background;
	var cfg        := ReadConfigFile(":charactercreation:config/antecedentes")[background];
	var skills   := GetConfigStringArray(cfg, "Pericia")
	var items    := GetConfigStringArray(cfg, "Item")
	var recipess := GetConfigStringArray(cfg, "Recipe")

	foreach skill in skills
		AP_SetTrueSkill(who, skill, 1);
	endforeach

	foreach item in items
		item := SplitWords(item);
		var obj := CreateItemInBackpack(who, hex(item[1]), item[2]);
		SetObjProperty(obj, "OnCreation", 1);
		sleepms(2);
	endforeach

	foreach recipe in recipes
		var obj := CreateItemInBackpack(who, 0xef1f);
		SetObjProperty(obj, "objtype", hex(recipe))
		sleepms(2);
	endforeach
endfunction

function getNotaRP(who)
	var nota := cint(FindAccount(who.acctname).getprop("nota"));
	if (!nota)
		setNotaRP(who, 0);
	endif
	return nota;
endfunction

function setNotaRP(who, nota)
	return findAccount(who.acctname).setProp("nota", nota);
endfunction
