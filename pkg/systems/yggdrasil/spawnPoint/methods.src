/**
 * Included Functions
 * GetProps(spawnpoint)
 * SetProps(data[struct])
 * ModelSpawnPoint( data := struct{})
 *
 * Treasure
 * TreasureModel( data := struct{} )
 * AddTreasure(treasure)
 * RemoveTreasure(treasure)
 *
 * Spawns
 * FillQueue() - Fill the queue
 * DoSpawnQueue() - Spawn Next in queue
 * KillSpawn(index) - Kill monster by index
 * SpawnAll() - Spawn all monsters
 * KillAll() - Kill all monters
**/

use os;
use uo;

include "include/arrays";
include "include/dungeons";
include ":yggdrasil:spawnGroup";
include ":yggdrasil:spawnSpot";
include ":yggdrasil:boss";

program Install()
    return 1;
endprogram

exported function GetProps( spawnpoint )
   var data         := struct{};
   data.+spot_serial  := GetObjProperty(spawnpoint, "spot_serial");
   data.+level        := GetObjProperty(spawnpoint, "level");
   data.+type         := GetObjProperty(spawnpoint, "type");
   data.+range        := GetObjProperty(spawnpoint, "range");
   data.+mob_number   := GetObjProperty(spawnpoint, "mob_number");
   data.+spotgroup    := GetObjProperty(spawnpoint, "spotgroup");
   data.+monsters     := GetObjProperty(spawnpoint, "monsters");
   data.+spawngroup   := GetObjProperty(spawnpoint, "spawngroup");
   data.+spawnqueue   := GetObjProperty(spawnpoint, "spawnqueue");
   data.+groups       := GetObjProperty(spawnpoint, "groups");
   data.+diedmonsters := GetObjProperty(spawnpoint, "diedmonsters");

   if (!data.monsters)
      data.monsters := array{};
   endif
   if (!data.spawnqueue)
      data.spawnqueue := array{};
   endif

   if (!data.groups)
      data.groups := array{0};
   endif

  if (!data.diedmonsters)
      data.diedmonsters := array{};
   endif

   data.+yggdrasil := GetObjProperty(spawnpoint, "yggdrasil");

   return data;
endfunction

exported function SetProps( spawnpoint, data := struct{});
   var old_data := GetProps(spawnpoint);
   if (data.name)
      spawnpoint.name := data.name;
   endif

   if (data.location)
      spawnpoint.location := data.location;
   endif

   if (data.spot_serial)
      old_data.spot_serial := data.spot_serial;
   endif

   if (data.type)
      old_data.type := data.type;
   endif

   if (data.monsters)
      old_data.monsters := data.monsters;
   endif

   if (data.spawnqueue)
      old_data.spawnqueue := data.spawnqueue;
   endif

   if (data.range)
      old_data.range := cint(data.range);
   endif

   if ("level" in (data.Keys()))
      old_data.level := cint(data.level);
   endif

   if (data.groups)
      old_data.groups := data.groups;
   endif

   if (data.diedmonsters)
      old_data.diedmonsters := data.diedmonsters;
   endif

   if (data.mob_number)
      if (data.mob_number > 10) data.mob_number := 10; endif

      var group_data := GetSpotGroupData(old_data.spotgroup, 0);
      if (group_data)
        var group_mobs := cint(group_data.mob_number) - old_data.mob_number + cint(data.mob_number);
        SetSpotGroupData(old_data.spotgroup, struct{ "mob_number" := group_mobs});
      endif
      
      old_data.mob_number := cint(data.mob_number);
   endif

   if (data.evententry)
      old_data.evententry := data.evententry;
   endif

   if (data.spotgroup)
      old_data.spotgroup := data.spotgroup;
   endif

   old_data := ModelSpawnPoint(old_data);

   SetObjProperty(spawnpoint, "spot_serial", old_data.spot_serial);
   SetObjProperty(spawnpoint, "type", old_data.type);
   SetObjProperty(spawnpoint, "level", old_data.level);
   SetObjProperty(spawnpoint, "groups", old_data.groups);
   SetObjProperty(spawnpoint, "range", old_data.range);
   SetObjProperty(spawnpoint, "mob_number", old_data.mob_number);
   SetObjProperty(spawnpoint, "evententry", old_data.evententry);
   SetObjProperty(spawnpoint, "spawnqueue", old_data.spawnqueue);
   SetObjProperty(spawnpoint, "monsters", old_data.monsters);
   SetObjProperty(spawnpoint, "spotgroup", old_data.spotgroup);
   SetObjProperty(spawnpoint, "diedmonsters", old_data.diedmonsters);
endfunction

function ModelSpawnPoint( data := struct{})
   if (data.level != 1 && data.level != 2 && data.level != 3 && data.level != 4 && data.level != 5)
      data.level := 1;
   endif

   if (!data.spot_serial)
      data.spot_serial := 0;
   endif

   if (!data.range)
      data.range := 0;
   endif

   if (!data.evententry)
      data.evententry := "";
   endif 

   if (TypeOf(data.monsters) != "Array")
      data.monsters := array{};
   endif 

   if (TypeOf(data.spawnqueue) != "Array")
      data.spawnqueue := array{};
   endif 

   if (TypeOf(data.type) != "Array")
      data.type := array{"melee", "ranged", "spellcaster"};
   endif

   if (!data.mob_number)
      data.mob_number := 1;
   endif

   if (TypeOf(data.yggdrasil) != "Struct")
      data.yggdrasil := struct{};
   endif

   if (TypeOf(data.groups) != "Array")
      data.groups := array{0};
   else
      foreach g in (data.groups)
         data.groups[_g_iter] := cint(g);
      endforeach
   endif 

   return data;
endfunction

// exported function RemoveTreasure(spawnpoint, treasure)
//    var treasures := GetProps(spawnpoint).treasures;
//    var index := FindInArray(treasures, treasure.ref_id);
//    if (index)
//       treasures.Erase(index);
//       SetProps(spawnpoint, struct{"treasures" := treasures});
//       return 1;
//    endif
//    return 0;
// endfunction

// exported function AddTreasure(spawnpoint, treasure)
//     var treasures := GetProps(spawnpoint).treasures;
//     treasures.append(treasure);
//     SetProps(spawnpoint, struct{"treasures" := treasures});
//     return 1;
// endfunction

    // exported function SpawnTreasures(spawnpoint)
    //     var treasures := GetProps(spawnpoint).treasures;
    //     var treasures_spawned := GetObjProperty(spawnpoint, "spawned_treasures");

    // endfunction

    // exported function ResetTreasures(spawnpoint)

    // endfunction
