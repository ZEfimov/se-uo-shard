
use uo;
use datafile;
use basic;

include ":yggdrasil:spawnGroup";
include ":yggdrasil:dynamicevents";
// include ":ghaia:ghaiaUtil";
include ":gumps:requestgump";
include ":gumps:gumps_ex";
include ":gumps:yesno";
include ":tn:tngumps";
include "include/say";
include ":unicos:item_template";
include ":attributes:attributes";

//Main Menu
const GF_GROUP_ACTIVE_SWITCH := 2;
const GF_ADD_BTN        := 3;
const GF_DEL_BTN        := 4;
const GF_SELECTELEM_BTN := 10;

//Moblist menu
const GF_ADDEVENT_BTN    := 101;
const GF_DELEVENT_BTN    := 102;
const GF_SELECTEVENT_BTN := 110;

//Moblist menu
const GF_ADDCONDITION_BTN    := 201;
const GF_DELCONDITION_BTN    := 202;
const GF_SELECTCONDITION_BTN := 210;

// Event/Conditiosn BTN
const GF_EVENT_UPDATE_BTN := 301;
const GF_EVENT_CHANGE_BTN := 302;
const GF_EVENT_BTN := 320;

var event_options := array{"Summon Mobs", "Create Item", "Change Environment", "Destroy Item", "Apply TimedScript", "Play Sound"};
var condition_options := array{"Minimum Players", "Mobiles Died", "Boss Died", "Cooldown", "Battle Started", "% of Chance", "Player Class", "Light near", "Camping near"};

//Basic
var selected_dynamicevent := ""; //Name of the Elem
var selected_event        := ""; //Name of the spawngroup
var selected_condition    := ""; //Name of the spawngroup
var config_struct;
var dynamiceventgroups;
var gumpid := 0x1F9;

program spotGroups(params)
    var who;
    if (TypeOf(params) != "Array")
        who := params;
        params := 0;
    else
        who := params[1];
        params := params[2];
    endif
   if (who.cmdlevel < 4)
      return 1;
   endif
    CloseGump(who, gumpid);
    if (params)
        selected_dynamicevent      := params.dynamicevent; //Name of the Elem
    endif

    var closed := 0;
    while (closed != 1)
        var gump := ConstructGump();
        var input := GFSendGump(who, gump);

        if (input[0] >= 2 && input[0] < 100)
            DoDynamicEventList(who, input[0]);
        elseif (input[0] >= 100 && input[0] < 200)
            DoEventList(who, input[0]);
        elseif (input[0] >= 200 && input[0] < 300)
            DoConditionList(who, input[0]);
        elseif (input[0] >= 300 && input[0] < 940)
            DoStepsList(who, input);
        else
            closed := 1;
        endif

        sleepms(2);
    endwhile
endprogram


function DoDynamicEventList(who, input)
    case (input)
        GF_ADD_BTN:
            var dynamicevent_name := RequestGump(who, "Nome do novo Dynamic Event", "Obrigatório um nome ainda não usado.", "", CANCEL_BTN_ON);
            var group_list := LoadDynamicGroupData().Keys();
            if (dynamicevent_name == 0 || !dynamicevent_name || dynamicevent_name == " " )
                break;
            elseif (dynamicevent_name in group_list)
                selected_dynamicevent := dynamicevent_name;
                break;
            endif
            // group_list := group_list;
            GetDynamicEventData(dynamicevent_name);
            SetElemButton(dynamicevent_name);
            break;
        GF_DEL_BTN:
            RemoveDynamicGroupData(selected_dynamicevent);
            SetElemButton(0);
            break;

        default:
            var key_index := input[0]-GF_SELECTELEM_BTN;
            SetElemButton(key_index);
            break;
    endcase
endfunction


function SetElemButton(key_index)
   if (TypeOf(key_index) == "Integer")
      selected_dynamicevent := dynamiceventgroups[key_index];
   else
      selected_dynamicevent := key_index;
   endif

   selected_condition := 0;
   selected_event := 0;
endfunction

function DoEventList(who, input)
    case (input)
        GF_ADDEVENT_BTN:
            var choose := RadioGump(who, 0, 0, "Escolha um evento:", event_options);
            var events := GetStepsFor(choose);
            if (!events[1]) 
               SendSysMessageEx(who, "Opção inativa");
               return;
            endif
            var new_event := struct{"name" := choose, "steps" := events};
            var group_data  := GetDynamicEventData(selected_dynamicevent);
            var event_list := group_data.events;
            event_list.append(new_event);
            SetDynamicEventData(selected_dynamicevent, struct{ "events" := event_list });
            break;
        GF_DELEVENT_BTN:
            RemoveEventData(selected_dynamicevent, selected_event);
            selected_event := 0;

            break;
        default:
            var key_index := input[0]-GF_SELECTEVENT_BTN;
            selected_condition := 0;
            selected_event := key_index;
            break;
    endcase
endfunction

function DoConditionList(who, input)
    case (input)
        GF_ADDCONDITION_BTN:
            var choose := RadioGump(who, 0, 0, "Escolha uma condição:", condition_options);
            var events := GetStepsFor(choose);
            if (!events[1]) 
               SendSysMessageEx(who, "Opção inativa");
               return;
            endif
            var new_condition := struct{"name" := choose, "steps" := events};
            var group_data  := GetDynamicEventData(selected_dynamicevent);
            var event_list := group_data.conditions;
            event_list.append(new_condition);
            SetDynamicEventData(selected_dynamicevent, struct{ "conditions" := event_list });
            break;
        GF_DELCONDITION_BTN:
            RemoveConditionData(selected_dynamicevent, selected_condition);
            selected_condition := 0;
            break;

        default:
            var key_index := input[0]-GF_SELECTCONDITION_BTN;
            selected_condition := key_index;
            selected_event := 0;
            break;
    endcase
endfunction


function GetStepsFor(event_type)
   var events := array{};
   case (event_type)
      "Summon Mobs": // summon
         events.append(struct{ "template" := ":ghaia:" });
         events.append(struct{ "number" := 1 });
         events.append(struct{ "location" := array{0, 0, 0} });
         events.append(struct{ "go_to" := array{0, 0, 0} });

         break;
      "Create Item": //create item
         events.append(struct{ "item" := struct{"desc" := "Nenhum"} });
         events.append(struct{ "location" := array{0, 0, 0} });
         events.append(struct{ "container" := 0 });
         // do nothing
         break;
      "Change Environment":  //change environment
         break;
      "Destroy Item": // destroyitem
         break;
      "Apply TimedScript":  //applytimed
         events.append(struct{ "timedscript" := "" });
         events.append(struct{ "resist_test" := CONSTITUTION });
         events.append(struct{ "chance" := 100 });
         events.append(struct{ "number" := 5 });
         events.append(struct{ "location" := array{0, 0, 0} });
         break;
      "Play Sound":
         events.append(struct{ "number" := 0 });
         events.append(struct{ "location" := array{0, 0, 0} });

      "Minimum Players": //minimum player
         events.append(struct{ "number" := 1 });
         events.append(struct{ "location" := array{0, 0, 0} });
         events.append(struct{ "range" := 10 });

         break;
      "Mobiles Died": //mobiles died
         events.append(struct{ "number" := 1 });
         break;
      "Boss Died": //boss died
         break;
     "Cooldown": //Cooldown
         events.append(struct{ "number" := 120 });
         break;
       "Battle Started": //battle started
         events.append(struct{ "location" := array{0, 0, 0} });
         events.append(struct{ "range" := 10 });
         return;
      "% of Chance": //% of chance
         events.append(struct{ "number" := 100 });
         break;
      "Player Class": //player class
         events.append(struct{ "haveclass" := "Mago" });
         events.append(struct{ "range" := 10 });
         break;
      "Light near": //Light near
         events.append(struct{ "location" := array{0, 0, 0} });
         break;
      "Camping near": //Light near
         events.append(struct{ "location" := array{0, 0, 0} });
         events.append(struct{ "range" := 10 });
         break;
   endcase

   return events;
endfunction

function DoStepsList(who, input)
    case (input[0])
        GF_EVENT_UPDATE_BTN:
            if (selected_event)
               var event_list := GetDynamicEventData(selected_dynamicevent).events;
               var event := event_list[selected_event];

               for i := 1 to (event.steps.size())
                  foreach key in (config_struct[i].keys())
                     if (key != "template" && key != "text")
                        event.steps[i][key] := cint(GFExtractData(input, config_struct[i][key]));
                     else
                        event.steps[i][key] := GFExtractData(input, config_struct[i][key]);
                     endif
                     sleepms(2);
                  endforeach
                  sleepms(2);
               endfor
               UpdateEventData(selected_dynamicevent, event, selected_event);
            else
               var event_list := GetDynamicEventData(selected_dynamicevent).conditions;
               var event := event_list[selected_condition];

               for i := 1 to (event.steps.size())
                  foreach key in (config_struct[i].keys())
                     event.steps[i][key] := GFExtractData(input, config_struct[i][key]);
                     sleepms(2);
                  endforeach
                  sleepms(2);
               endfor

               UpdateConditionData(selected_dynamicevent, event, selected_condition);
            endif
            break;
        GF_EVENT_CHANGE_BTN:
            if (selected_event)
               var event_list := GetDynamicEventData(selected_dynamicevent).events;
               var event := event_list[selected_event];
               var new_event := GetEventOptions(who, event);
               UpdateEventData(selected_dynamicevent, new_event, selected_event);
            else
               var event_list := GetDynamicEventData(selected_dynamicevent).conditions;
               var event := event_list[selected_condition];
               var new_event := GetEventOptions(who, event);
               UpdateConditionData(selected_dynamicevent, new_event, selected_condition);
            endif
            break;
        default:
            var key_index := input[0]-GF_EVENT_BTN;
            if (selected_event)
               var group_data := GetDynamicEventData(selected_dynamicevent).events;
               var event := group_data[selected_event];
               var step_selected := event.steps[key_index];
               var value := ChangeStep(who, step_selected);
               event.steps[key_index] := value;
               UpdateEventData(selected_dynamicevent, event, selected_event);
            else
               var group_data := GetDynamicEventData(selected_dynamicevent).conditions;
               var event := group_data[selected_condition];
               var step_selected := event.steps[key_index];
               var value := ChangeStep(who, step_selected);
               event.steps[key_index] := value;
               UpdateConditionData(selected_dynamicevent, event, selected_condition);
            endif

            break;
    endcase
endfunction

function GetEventOptions(who, event)
   var choice := RadioGump(who, 0, 0, "O que deseja fazer?", array{"Adicionar passo", "Remover passo", "Cancelar"}, 1);
   if (choice == 1)
      var new_step := array{};
      if (event.name["Summon"])
         new_step.append("Location");
         new_step.append("Go to Player location");
         new_step.append("Go to location");
         new_step.append("Spawn in player location");
         new_step.append("Text");
      elseif (event.name["Sound"])
         new_step.append("Spawn in player location");
      elseif(event.name["Minimum Pla"] || event.name["near"])
         new_step.append("Location");
      elseif(event.name["TimedScript"])
         new_step.append("Location");
         new_step.append("Text");
      endif

      choice := RadioGump(who, 0, 0, "Qual novo elemento?", new_step);
      if(choice == "Go to Player location")
         event.steps.append(struct{ "player_location" := 1});
      elseif(choice == "Location")
         event.steps.append(struct{ "location" := array{0,0,0}});
      elseif(choice == "Go to location")
         event.steps.append(struct{ "go_to" := array{0,0,0}});
      elseif(choice == "Spawn in player location")
         event.steps.append(struct{ "spawn_player_loc" := 1});
      elseif(choice == "Text")
         event.steps.append(struct{ "text" := ""});
      endif

      return event;
   elseif (choice == 2)
      var step_list := array{};
      foreach item in (event.steps)
         step_list := step_list +item.keys();
         sleepms(2);
      endforeach
      step_list.append("Cancelar");
      var remove_step := RadioGump(who, 0, 0, "Qual passo remover?", step_list, 1);
      if (remove_step == step_list.size())
         return event;
      endif
      event.steps.erase(remove_step);
      return event;
   else
      return event;
   endif
endfunction

function ChangeStep(who, mystep)
   if (mystep.location)
      SendSysMessageEx(who, "Selecione o local", SSM_REQUEST);
      var targ := TargetCoordinates(who);
      mystep.location := array{targ.x, targ.y, targ.z};
   elseif (mystep.go_to)
      SendSysMessageEx(who, "Selecione o local", SSM_REQUEST);
      var targ := TargetCoordinates(who);
      mystep.go_to := array{targ.x, targ.y, targ.z};
   elseif (mystep.haveclass)
      mystep.haveclass := RadioGump(who, 0, 0, "Escolha uma classe:", array{"Mago", "Clérigo", "Guerreiro", "Ladino"});
   elseif (mystep.timedscript)
      var timedcfg := TS_GetCfgFile();
      mystep.timedscript := RadioGump(who, 0, 0, "Escolha um timedscript:", GetConfigStringKeys(timedcfg));
   elseif (mystep.resist_test)
      mystep.resist_test := RadioGump(who, 0, 0, "Escolha um teste:", array{STRENGTH, INTELLIGENCE, DEXTERITY, CONSTITUTION, WISDOM});
   endif

   return mystep;
endfunction

function ChooseLocation(who, many)
   var loc := array{};
   while (1)
      var targ := TargetCoordinates(who);

      if (targ)
         loc.append(array{ loc.x, loc.y, loc.z});
      elseif (!targ && loc.size() > 0)
         break;
      elseif (!many && loc.size() > 0)
         break;
      endif
   endwhile

   return loc;
endfunction

function EventParameters(event, conditions)
// QuestionsGump(who, questions)
endfunction

function ConstructGump()
    dynamiceventgroups := DFGetElemNames(LoadDynamicGroupData()); //Reset every time the Gump is created
    var gump := GFCreateGump(150, 150);
    GFPage(gump, 0);
    GFSetID(gump, gumpid);

    if (selected_dynamicevent)
        ConstructDyanmicEventConfig(gump); //second menu
    endif

    if (selected_event || selected_condition)
        ConstructEventConfig(gump);
    endif

    ConstructGroupList(gump);

    GFoptimizeGump(gump);
    return gump;
endfunction

function ConstructGroupList(byref gump)
    GFResizePic(gump, 15, 15, GFCfgConst("BackGrounds", "TRINKED_HARD_PAPER"), 180, 450);
    GFTextLine(gump, 48, 23, 555, "Dynamic Group List");

    var page     := 1;
    var max_page := 11;
    for i:=1 to dynamiceventgroups.Size()+1
        GFPage(gump, page);
        var x := 50;
        var y := (30+(18*i)); // (((page-1) * max_page)+1); //(BaseX(Espaï¿½amento*i)) / (Calculo de Pagina)

        var color := 1153;
        if (selected_dynamicevent == dynamiceventgroups[i])
            color := 2103;
        endif
        if (dynamiceventgroups[i])
            GFTextLine(gump, x, y, color, dynamiceventgroups[i]);
            GFAddButton(gump, x-14, y+5, 2103, 2104, GF_CLOSE_BTN, GF_SELECTELEM_BTN+i);
        else
            GFTextLine(gump, x+70, y, 1153, "Adicionar");
            GFAddButton(gump, x+70-14, y+5, 0x939, 0x939, GF_CLOSE_BTN, GF_ADD_BTN);

            if (selected_dynamicevent)
                GFTextLine(gump, x+70, y+18, 1153, "Remover");
                GFAddButton(gump, x+70-14, y+18+5, 0x938, 0x938, GF_CLOSE_BTN, GF_DEL_BTN);
            endif
        endif

         //change page
        if (i == (page+1) * max_page)
            page += 1;
            GFAddButton(gump, 40, y+18, 0x938, 0x938, GF_PAGE_BTN, page);
            GFPage(gump, page);
            GFAddButton(gump, 100, y+18, 0x938, 0x938, GF_PAGE_BTN, page-1);
        endif
    endfor
endfunction


function ConstructDyanmicEventConfig(byref gump)
   GFPage(gump, 0);
   var group_data  := GetDynamicEventData(selected_dynamicevent);
   // var groupdata_size := group_data.Size();
   var events     := group_data.events;
   if (!events) events := array{}; endif
   var conditions := group_data.conditions;
   if (!events) events := array{}; endif
   var form_size  := events.Size() + conditions.Size();

   GFResizePic(gump, 180, 15, GFCfgConst("BackGrounds", "TRINKED_PAPER"), 220, 180+(form_size*18));
   GFTextLine(gump, 202, 28, 555, "Configurações do Grupo");

//  GFTextLine(gump, 210, 50, 1153, "Ativado:");
//  GFCheckBox(gump, 210+50, 50+5, 2360, 2361, group_data.active, GF_GROUP_ACTIVE_SWITCH);

   //Create Spots Menu
   GFTextLine(gump, 202, 50+18, 555, "Lista de Eventos");
   var x := 218;
   var base_y := 68+18;
   for i:=1 to events.Size();
      var y := (base_y+(18*(i-1)));;
      var event := events[i];
      if (event)
         //Start Button Change Color and Icon
         var start_button := 0x2622;
         var color := 1153;
         if (i == selected_event)
            start_button := 0x2623;
            color := 2103;
         endif
         //endbutton

         GFTextLine(gump, x, y, color, event.name);
         GFAddButton(gump, x-20, y+2, start_button, 0x2623, GF_CLOSE_BTN, GF_SELECTEVENT_BTN+i);
      endif

      if (i == events.Size())
         base_y := y+18; //start Y for the next menu
      endif
   endfor

   if (cint(events.Size()) <= 10)
      GFTextLine(gump, x+30, base_y, 1153, "Adicionar");
      GFAddButton(gump, x+30-14, base_y+5, 0x939, 0x939, GF_CLOSE_BTN, GF_ADDEVENT_BTN);
   endif

   if (selected_event)
      GFTextLine(gump, x+110, base_y, 1153, "Remover");
      GFAddButton(gump, x+110-14, base_y+5, 0x938, 0x938, GF_CLOSE_BTN, GF_DELEVENT_BTN);
   endif
   
   base_y += 18+18;
   //Create SpawnGroup Menu
   GFTextLine(gump, 202, base_y, 555, "Lista de Condições");
   base_y += 18;
   for i:=1 to conditions.Size();
      var y := (base_y+(18*(i-1)));;

      if (conditions[i])
         //Start Button Change Color and Icon
         var start_button := 0x2622;
         var color := 1153;
         if (i == selected_condition)
            start_button := 0x2623;
            color := 2103;
         endif

         //endbutton

         GFTextLine(gump, x, y, color, conditions[i].name);
         GFAddButton(gump, x-20, y+2, start_button, 0x2623, GF_CLOSE_BTN, GF_SELECTCONDITION_BTN+i);
      endif

      if (i == conditions.Size())
         base_y := y+18; //start Y for the next menu
      endif
   endfor

   if (conditions.Size() <= 10)
      GFTextLine(gump, x+30, base_y, 1153, "Adicionar");
      GFAddButton(gump, x+30-14, base_y+5, 0x939, 0x939, GF_CLOSE_BTN, GF_ADDCONDITION_BTN);
   endif
   if (selected_condition)
      GFTextLine(gump, x+110, base_y, 1153, "Remover");
      GFAddButton(gump, x+110-14, base_y+5, 0x938, 0x938, GF_CLOSE_BTN, GF_DELCONDITION_BTN);
   endif
endfunction


function ConstructEventConfig(byref gump)
   GFPage(gump, 0);
   var group_data;
   var title;
   var event;
   if (selected_event)
      group_data := GetDynamicEventData(selected_dynamicevent).events;
      event := group_data[selected_event];
      title := "Event";
   else
      group_data := GetDynamicEventData(selected_dynamicevent).conditions;
      event := group_data[selected_condition];
      title := "Condition";
   endif

   GFResizePic(gump, 415, 15, GFCfgConst("BackGrounds", "TRINKED_HARD_PAPER"), 220, 100+(event.steps.size()*18));
   GFTextLine(gump, 465, 28, 555, "{} Configuration".format(title));

   var sy := 45;
   var sx := 440;
   config_struct := dictionary{};
   foreach ev in (event.steps)
      config_struct[_ev_iter] := struct{};
      if (ev.template)
         GFTextLine(gump, sx, sy, 1153, "Template:");
         config_struct[_ev_iter].template := GFTextEntry(gump, sx+60, sy, 180, 18, 2103, ev.template);
      elseif (ev.spawngroup)
         GFTextLine(gump, sx, sy, 1153, "SpawnGroup:");
         config_struct[_ev_iter].spawngroup := GFTextEntry(gump, sx+60, sy, 180, 18, 2103, ev.spawngroup);
      elseif (ev.number)
         GFTextLine(gump, sx, sy, 1153, "Number:");
         config_struct[_ev_iter].number := GFTextEntry(gump, sx+60, sy, 40, 18, 2103, ev.number);
      
      elseif (ev.text != error)
         GFTextLine(gump, sx+10, sy, 1153, "Text:");
         config_struct[_ev_iter].text := GFTextEntry(gump, sx+60, sy, 180, 18, 2103, ""+ev.text);
      elseif (ev.location)
         GFTextLine(gump, sx, sy, 1153, "Location:");
         GFTextLine(gump, sx+65, sy, 2103, "{}".format(ev.location));
         GFAddButton(gump, sx+52, sy+6, 2103, 2104, GF_CLOSE_BTN, GF_EVENT_BTN+_ev_iter);

      elseif (ev.go_to)
         GFTextLine(gump, sx, sy, 1153, "Go to:");
         GFTextLine(gump, sx+65, sy, 2103, "{}".format(ev.go_to));
         GFAddButton(gump, sx+52, sy+6, 2103, 2104, GF_CLOSE_BTN, GF_EVENT_BTN+_ev_iter);

      // Create Item
      elseif (ev.environment)
         GFTextLine(gump, sx, sy, 1153, "Clima:");
         GFTextLine(gump, sx+65, sy, 2103, "{}".format(ev.environment));
         GFAddButton(gump, sx+52, sy+6, 2103, 2104, GF_CLOSE_BTN, GF_EVENT_BTN+_ev_iter);

      elseif (ev.range)
         GFTextLine(gump, sx, sy, 1153, "Range:");
         config_struct[_ev_iter].range := GFTextEntry(gump, sx+40, sy, 120, 18, 2103, ev.range);

      elseif (ev.haveclass)
         GFTextLine(gump, sx, sy, 1153, "Have class:");
         GFTextLine(gump, sx+65, sy, 2103, "{}".format(ev.haveclass));
         GFAddButton(gump, sx+52, sy+6, 2103, 2104, GF_CLOSE_BTN, GF_EVENT_BTN+_ev_iter);

      elseif (ev.item)
         GFTextLine(gump, sx, sy, 1153, "Item:");
         GFTextLine(gump, sx+65, sy, 2103, "{}".format(ev.item.desc));
         GFAddButton(gump, sx+52, sy+6, 2103, 2104, GF_CLOSE_BTN, GF_EVENT_BTN+_ev_iter);

      elseif (ev.player_location)
         GFTextLine(gump, sx, sy, 1153, "Mobiles go to player loc");
      elseif (ev.spawn_player_loc)
         GFTextLine(gump, sx, sy, 1153, "Mobiles spawn in player loc");
      endif

      sy+=20;
      sleepms(2);
   endforeach

    GFAddButton(gump, 560, sy+10, 0xEF, 0xF0, 1, GF_EVENT_UPDATE_BTN);
    GFAddButton(gump, 500, sy+10, 0x842, 0x843, 1, GF_EVENT_CHANGE_BTN);
endfunction

function EventSetConfigs(byref who, byref input)
    var event_entry   := struct{};

    case ( input[0] )
        GF_BOSS_BTN: 
            CreateBossStructGump(who, mob_bossparams);
            break;
        GF_DAYTIME_BTN:
            var daytime := CheckBoxGump(who, 150, 165, "Horário de Spawn:", array{"Noite", "Dia", "Lua Nova"});
            if (daytime.Size() > 1)
                mob_daytime := "always";
            else
                mob_daytime := lower(daytime[1]);
            endif
            break;
        GF_POWER_BTN:
            mob_power := cint(RadioGump(who, 150, 165, "Nivel de Poder:", array{"1", "2", "3"}));
            break;
        GF_TYPE_BTN:
            mob_type := lower(RadioGump(who, 190, 180, "Tipo de Monstro:", array{"Melee", "Ranged", "Spellcaster", "Boss"}));
            break;
         GF_MGROUP_BTN:
            mob_group := cint(RadioGump(who, 150, 185, "Grupo:", array{"0", "1", "2", "3"}));
            break;
    endcase

    event_entry.+name       := GFExtractData(input, mob_name);
    event_entry.+power      := mob_power;
    event_entry.+daytime    := mob_daytime;
    event_entry.+isBoss     := input[INPUT_ISBOSS];
    event_entry.+bossParams  := mob_bossparams;
    event_entry.+type       := mob_type;
    event_entry.+mobgroup       := mob_group;

    UpdateGroupMobData(selected_dynamicevent, event_entry, selected_mob);

    SendSysMessageEx(who, "Mob atualizado no spawnGroup!");

endfunction