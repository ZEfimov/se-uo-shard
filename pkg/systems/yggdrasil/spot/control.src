use uo;
use os;
include ":yggdrasil:spawnSpot";
include ":yggdrasil:treasures";
include ":yggdrasil:dynamicevents";
include "include/dungeons";
include ":ghaia:ghaiaUtil";
include ":tn:cooldown";
include ":timedscripts:timedScripts";

program Install(spot)
   Set_Script_Option(SCRIPTOPT_NO_RUNAWAY, 1);
   while(spot)
      var config := spot.GetProps();
      if (!GetCooldown(spot, "spotrespawn"))
         if (!HasPlayerNear(spot.x, spot.y, spot.realm) && config.active)
            var group_data := GetSpotGroupData(config.spotgroup);
            if (group_data.activegroup != config.activegroup)
               spot.SetProps(struct{ "activegroup" := group_data.activegroup });
               spot.ForceKill();
            endif
            FillSpawnQueue(config.spawnpoints);
            ResetTreasures(spot.serial, config.treasures);
            SetCooldown(spot, "spotrespawn", 300);
         endif
      endif

      if (config.evententry && config.evententry != "")
         if (!GetCooldown(spot, "dynamicevent"))
            printtext(spot, "Dynamic Event initiated");
            StartDynamicEvent(spot, config, config.evententry);
         endif
      endif
      sleep(10);
   endwhile
endprogram

function FillSpawnQueue(spawnpoints)
    foreach serial in spawnpoints
        var spawnpoint := SystemFindObjectBySerial(serial);
        spawnpoint.FillQueue();
        sleepms(2);
    endforeach
endfunction

function ResetTreasures(spot_serial, treasures)
   foreach item in treasures
      var treasure := SystemFindObjectBySerial(item.serial);
      if (cint(GetObjProperty(treasure, "spawned_time")) <= ReadGameClock())
         SpawnTreasure(treasure, item, spot_serial);
      endif
      sleepms(2);
   endforeach
endfunction

// array{"Minimum Players", "Mobiles Died", "Boss Died", "Every Second", "Battle Started", "% of Chance", "Player Class", "Light near", "Camping Near"};

function StartDynamicEvent(spot, config, evententry)
   var dynamicevent := GetDynamicEventData(evententry, 0);
   if (!dynamicevent)
      var GmsOnlines := GetGlobalProperty("GmsOnlines");
      foreach mobile in GmsOnlines
         SendSysMessageEx(mobile, "Evento dinâmico não encontrado para {}".format(spot.serial));
         sleepms(2);
      endforeach
      return;
   endif

   var passed_conditions := 1;
   var next_cooldown := 10;
   var diedmonsters := 0;
   var bossdied := 0;
   var player_found;
   foreach serial in (config.spawnpoints)
      var spawnpoint := SystemFindObjectBySerial(serial);
      var died := GetObjProperty(spawnpoint, "diedmonsters");
      if (!died) died := array{}; endif;

      if (FindElemInArray(died, struct{"boss" := 1}))
         bossdied := 1;
      endif

      diedmonsters += died.size();
      sleepms(2);
   endforeach

   foreach condition in (dynamicevent.conditions)
      var this_step := StepToStruct(condition.steps);
      this_step.name := condition.name;

      if (this_step.name["Minimum Players"])
         var locs := this_step.location;
         var pass_step := 0;
         foreach loc in locs
            var mobiles := GetPlayerNear(loc, cint(this_step.range));
            if (mobiles.size() >= cint(this_step.number))
               pass_step := 1;
               player_found := mobiles[1];
               break;
            endif
            sleepms(2);
         endforeach
         
         if (!pass_step)
            passed_conditions := 0;
            break;
         endif
      elseif (this_step.name["Mobiles Died"])
         if (diedmonsters < cint(this_step.number))
            passed_conditions := 0;
            break;
         endif
      elseif (this_step.name["Boss Died"])
         if (!bossdied)
            passed_conditions := 0;
            break;
         endif
      elseif (this_step.name["Battle Started"])
         var locs := this_step.location;

         var passed_event := 0;
         foreach loc in locs
            var mobiles := ListMobilesNearLocation(loc[1], loc[2], loc[3], cint(this_step.range));
            foreach mobile in mobiles
               if (mobile.warmode)
                  passed_event := 1;
                  break;
               endif
               sleepms(2);
            endforeach

            if (passed_event) break; endif
            sleepms(2);
         endforeach

         if (!passed_event)
            passed_conditions := 0;
            break;
         endif
      elseif (this_step.name["% of Chance"])
         if (this_step.number != 100 && Randomint(100)+1 > this_step.number )
            var cooldown := FindElemInArray(dynamicevent.conditions, struct{"name" := "Cooldown"});
            if (!cooldown)
               cooldown := 20;
            else
               cooldown := cooldown.steps[1].number;
            endif
            SetCooldown(spot, "dynamicevent", cooldown);
            continue;
         endif
      elseif (this_step.name["Player Class"])
      elseif (this_step.name["Light near"])
         var locs := this_step.location;
         var passed_event := 0;
         foreach loc in locs
            var coord := struct{"x" := loc[1], "y" := loc[2], "z" := loc[3]};
            if (HaveLightNear(coord))
               passed_event := 1;
               break;
            endif
            sleepms(2);
         endforeach

         if (!passed_event)
            passed_conditions := 0;
            break;
         endif
      elseif (this_step.name["Camping Near"])
         var locs := this_step.location;
         var passed_event := 0;
         
         foreach loc in locs
            var items := ListItemsNearLocationOfType(loc[1], loc[2], loc[3], this_step.range, 0x0de3);
            if (items.size() >= 1)
               passed_event := 1;
               break;
            endif
            sleepms(2);
         endforeach

         if (!passed_event)
            passed_conditions := 0;
            break;
         endif
      endif
      sleepms(2);
   endforeach

   if (!passed_conditions)
      printtext(spot, "condition failed");
      return 0;
   endif

   var cooldown := FindElemInArray(dynamicevent.conditions, struct{"name" := "Cooldown"});
   if (!cooldown)
      cooldown := 60;
   else
      cooldown := cint(cooldown.steps[1].number);
   endif
   SetCooldown(spot, "dynamicevent", cooldown);

   foreach trigged in (dynamicevent.events)
      var this_step := StepToStruct(trigged.steps);
      this_step.name := trigged.name;
      if (this_step.name == "Summon Mobs")
         var loc := this_step.location[1];
         var coord := struct{ "x" := this_step.go_to[1], "y" := this_step.go_to[2], "z" := this_step.go_to[3]};
         if (this_step.player_location && player_found)
            coord := player_found;
         endif
         if (this_step.spawn_player_loc && player_found)
            loc := array{player_found.x, player_found.y, player_found.z};
         endif
         for i := 1 to (this_step.number)
            var summon := CreateNpcFromTemplate(this_step.template, loc[1], loc[2], loc[3]);
            if (summon.errortext) continue; endif
            if (this_step.text) PrintText(summon, this_step.text); endif;
            sleepms(100);
            TS_StartTimer(summon, "dynamickill", 1200);
            ghaiaObjective(summon, coord, 2, 1);
         endfor
      elseif (this_step.name == "Apply TimedScript")
         var loc := this_step.location[1];
         foreach mobile in GetPlayerNear(loc);
            if (rollResistDice(mobile, this_step.resist_test) > this_step.chance)
               SendsystemReport(mobile, "*resistido*", SSM_INFO);
            else
               if (this_step.text) PrintText(mobile, this_step.text); endif;
               TS_StartTimer(mobile, this_step.timedscript, this_step.number);
            endif
         endforeach
      elseif (this_step.name == "Play Sound")
         var loc := this_step.location[1];
         if (this_step.spawn_player_loc && player_found)
            loc := player_found;
         endif
         PlaySoundEffectXYZ( loc[1], loc[2], loc[3], cint(this_step.number) );
      endif
      sleepms(2);
   endforeach
endfunction

function StepToStruct(step_list)
   var return_step := struct{};
   var locations := array{};
   foreach item in step_list
      foreach key in (item.keys())
         return_step[key] := item[key];
         if (key == "location")
            locations.append(item[key]);
         endif
      endforeach
      sleepms(2);
   endforeach

   return_step.location := locations;

   return return_step;
endfunction

function GetPlayerNear(loc, range := 5)
   return ListMobilesNearLocationEx(loc[1], loc[2], loc[3], range, LISTEX_FLAG_NORMAL|LISTEX_FLAG_HIDDEN|LISTEX_FLAG_PLAYERS_ONLY);
endfunction

// var event_options := array{"Summon Mobs", "Create Item", "Change Environment", "Destroy Item", "Apply TimedScript"};
