use uo;
use os;

include ":timeUtils:time";
include ":yggdrasil:boss";
include "include/say";
include "include/shapes";
include "include/facings";
include "include/dungeons";
include "include/client";
include ":sysbook:flsbooks";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":timeUtils:time";
include ":merchants:crafthelp";
include ":ghaia:objective";
include ":magery:basicMagery";
include ":crafting:craft_props";
// include ":quest:quest";
include ":yggdrasil:spawnsInternal";

function PCircle(x, y, radius)
   var circle_points := array{ struct{ x := x, y := y } };

   var radius2 := radius * radius;

   var i;
   for (i := 0; i < radius; i+=1)
      var j := 0;
      while (i*i + j*j < radius2 )
      sleepms(2);
         if (i != 0 || j != 0)
            if (j != 0) circle_points.append(struct{ x := x+i, y := y+j }); endif
            if (j != 0 && i != 0) circle_points.append(struct{ x := x-i, y := y-j }); endif
            if (j != 0 || i != 0) circle_points.append(struct{ x := x+i, y := y-j }); endif
            if (i != 0) circle_points.append(struct{ x := x-i, y := y+j }); endif
         endif
         j += 1;
      endwhile
   endfor

   return circle_points;
endfunction

program oafeatures_sendpacket(who, text)
   // var targ     := Target(who);
   // ApplyCraftColor(targ, 2);
   // ApplyCraftChanges(targ, 3);

   print("- 2");
   var circle_points := PCircle(who.x, who.y, 5);
   // var new_array := array{};
   // foreach p in circle_points
   //    new_array += GetCoordsInLine(p.x, p.y, who.x, who.y);
   // endforeach
   // circle_points += new_array;
   // print();
   // for each dy = 0 ... r
   //  dx = 0
   //  while (dx*dx + dy*dy <= r2)
   //      within(cx+dx, cy+dy)
   //      within(cx-dx, cy+dy)
   //      within(cx+dx, cy-dy)
   //      within(cx-dx, cy-dy)
   //      dx++

   // circle_points := array{who.x, who.y};
//     offsets.Add(new Vector3i(0,0));
//  for (int i = 1; i < radius; i++)
//  {
//      for (int j = 1; j < radius; j++)
//      {
//          if (i*i + j*j <threshold)
//          {
//              offsets.Add(new Vector2i(i,j));
//              offsets.Add(new Vector2i(-i,j));
//              offsets.Add(new Vector2i(i,-j));
//              offsets.Add(new Vector2i(-i,-j));
//          }
//      }
//  }


   // DamageFLS(targ, 10, DMG_PHYSICAL);
   // var area := GetCoordsInSquare(who.x+1, who.y+1, 2);
   foreach p in circle_points
      if (p.x == who.x && p.y == who.y) print(12344); endif
      PlayStationaryEffectEx( p.x, p.y, who.z, who.realm, 0x375A, 1, 50, 2168 );
      sleepms(2);
   endforeach

   // var targ := TargetCoordinates(who);
   // var d := 4;
   // var area := GetCoordsInSquare(targ.x, targ.y, d);
   // foreach p in area
   //    if (CoordinateDistance(targ.x+1, targ.y+1, p.x+1, p.y+1) >= d-1)
   //       PlayMovingEffectXYZEx( p.x, p.y, targ.z+5, targ.x, targ.y, targ.z, targ.realm, 0x1153, 0 ,0, 0, 1152);
   //    endif
   //    sleepms(2);
   // endforeach

   // d := 3;
   // area := GetCoordsInSquare(targ.x, targ.y, d);
   // sleepms(150);
   // foreach p in area
   //    if (CoordinateDistance(targ.x+1, targ.y+1, p.x+1, p.y+1) >= d-1)
   //       PlayMovingEffectXYZEx( p.x, p.y, targ.z+5, targ.x, targ.y, targ.z, targ.realm, 0x1153, 0 ,0, 0, 1152);
   //    endif

   //    sleepms(2);
   // endforeach

   sleepms(600);

   // var new_struct := dictionary{};
   // foreach recipe in (recipes.Keys())
   //    new_struct[recipe] := struct{ level := 1, exp := 0 };
   // endforeach
   // SetObjProperty(who, "recipes", new_struct);

   // var test := dictiona
   // PlayObjectCenteredEffect( who, 0x41A2, 1, 20);
   // var targ := TargetCoordinates(who);

      


   // PlayAttackAnimation(who, who.weapon);
   //    sleepms(120);
   // endfor
   // PlayStationaryEffectEx( who.x, who.y, who.z+3, who.realm, 0x376A, 1, 15, 2168 );
   // PlayStationaryEffectEx( who.x, who.y, who.z+15, who.realm, 0x376A, 1, 15, 2168 );
   // PlayStationaryEffectEx( who.x, who.y, who.z+30, who.realm, 0x375A, 1, 15, 2168 );
   // PlaySoundEffect(who, 0x5CA);
   // MoveObjectToLocation(targ, targ.x, targ.y, targ.z-10, targ.realm, MOVEOBJECT_FORCELOCATION);
      
   // foreach p in area
   //    if (_p_iter == 21) continue; endif
   //    if (_p_iter == 1) continue; endif
   //    if (_p_iter == 25) continue; endif
   //    if (_p_iter == 5) continue; endif
   //    PlayMovingEffectXYZ( p.x-1, p.y-2, targ.z+20, p.x, p.y, targ.z+10, 0xf3f, 0 );
   //    sleepms(2);
   // endforeach
   
endprogram
