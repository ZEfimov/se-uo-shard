/* $Id: mapmakersPen.src 905 2005-11-05 08:20:50Z muaddiblsd $
 *
 */
use uo;
use os;

include ":attributes:attributeConstants";
include ":attributes:attributes";
include ":crafting:toolWear";
include ":gumps:requestgump";
include ":itemutils:canAccess";
include "include/say";
include ":crafting:fls_crafting";
include ":tn:tngumps";
include ":gumps:yesno";

var item_config     := ReadConfigFile(":cartography:itemdesc");
var craft_config    := ReadConfigFile(":cartography:cartography");

program use_MapmakersPen(who, tool)
	if(!can_access(who, tool))
		return 0;
	endif
	if((!tool.movable) or !ReserveItem(tool))
		SendSysMessageEx(who, "Voce nao pode usar isto.", SSM_FAIL);
		return 0;
	endif
	if( !(tool in EnumerateItemsInContainer(who.backpack)) )
		SendSysMessage(who, "O item precisa estar na sua mochila.", SSM_FAIL);
		return 0;
	endif

	EraseObjProperty(who, "IsMeditating");
	EraseObjProperty(who, "HealTimer");

	SendSysMessageEx(who, "O que quer fazer com isto?", SSM_REQUEST);
	var targ := Target(who);

	if (!targ)
		SendSysMessageEx(who, "Cancelado.", SSM_FAIL);
		return;
	endif

	var blank_array := array{ 0xE34, 0xEF3, 0x14EB, 0x14EC };
	if (targ.objtype in blank_array)
		//var rinfo := sendCraftGump(who, "Cartography");

		// OK was pressed, close it on out
		//if(rinfo == 0)
		//	return 0;
		//endif

//		var options := RadioGump(who, 200, 200, "Que tipo de mapa deseja fazer:", array{"Local", "Regional", "Global"});
		var options := "Local";

		var the_objtype, diff;
		if (options == 0)
			return;
		elseif (options == "Local")
			the_objtype := 0x6500;
			diff := 18;
		elseif (options == "Regional");
			the_objtype := 0x6501;
			diff := 18; 
		elseif (options == "Global");
			the_objtype := 0x6502;
			diff := 20;
		endif

		var amt := 1;
		var roll := rollAttrDice(who, INTELLIGENCE) + getProficiencyBonus(who, SOBREVIVENCIA);
		if (roll < diff)
			return SendSysMessageEx(who, "Voce nao conseguiu mapear o local.", SSM_FAIL);
		endif

		makeCartographyMap(who, the_objtype, amt, tool);
		return 1;
	elseif (targ.isBook())
		if (!targ.isWritable() )
			var content := targ.ExtractInfo();
			if ( content.Contents.size() <= 1)
				return 1;
			endif
			SendSysMessageEx(who, "Escolha outro livro para copiar.", SSM_REQUEST);
			var copy := target(who);
			if (!copy || !copy.isBook())
				SendSysMessageEx(who, "Cancelado.", SSM_FAIL);
				return;
			elseif ( !copy.isWritable() )
				SendSysMessageEx(who, "Voce nao pode escrever neste livro.", SSM_FAIL);
				return;
			endif

			PrintText(who, "*copiando um livro*");
			PlaySoundEffect( who, 0x24a );
			sleep(5);

			copy.SetContents(content.Contents);
			copy.SetAuthor(content.Author);
			copy.SetTitle(content.Title);

			SendSysMessageEx(who, "Voce terminou de copiar o livro.", SSM_INFO);
			return;
		elseif (!YesNo(who, "Deseja lacrar o livro?"))
			return;
		endif

		targ.ReadOnly(1);
		SendSysMessageEx(who, "O livro esta lacrado.", SSM_INFO);
		return;
	elseif (GetObjProperty(targ, "rune_id"))
		SendSysMessageEx(who, "Para qual papel voce deseja transcrever esta runa?", SSM_REQUEST);
		var paper := Target(who);
		if (!paper || !paper.isA(POLCLASS_ITEM) || paper.objtype != 0x111 )
			SendSysMessageEx(who, "Este nao e um papel valido.", SSM_FAIL);
			return;
		endif

		var rune_id := GetObjProperty(targ, "rune_id");

		var roll := rollAttrDice(who, INTELLIGENCE) + getProficiencyBonus(who, INSCRICAO_RUNICA);
		if (roll <= 14)
			SendSysMessageEx(who, "Falhou em copiar a runa.", SSM_FAIL);
			return;
		endif

		var theitem := CreateItemInBackpack(who, 0xef1f, 1);
		if (theitem)
			SendSysMessageEx(who, "Sem espaco na sua mochila, voce perdeu o papel.", SSM_FAIL);
			return;
		endif

		SetObjProperty(theitem, "objtype", rune_id);
		SendSysMessageEx(who, "Voce transcreveu a runa para o papel.", SSM_INFO);
		return ;
	endif
	SendSysMessageEx(who, "Voce nao pode fazer nada com isto.", SSM_FAIL);
endprogram


function makeCartographyMap(who, map_objtype, amount, tool)
	var blank_array := array{ 0xE34, 0xEF3, 0x14EB, 0x14EC };
	var blank := Target(who);
	if( !blank )
		SendSysMessageEx(who, "Cancelado.", SSM_FAIL);
		return 0;
	endif
	if( !(blank.objtype in blank_array)  || GetObjProperty(blank, "decoder") )
		SendSysMessageEx(who, "Voce so pode escrever em mapas em branco ou pergaminhos.", SSM_FAIL);
		return 0;
	endif
	if( !can_access(who, blank) )
		return 0;
	endif
	if( !(blank in EnumerateItemsInContainer(who.backpack)) )
		SendSysMessageEx(who, "O pergaminho precisa estar na sua mochila.", SSM_FAIL);
		return 0;
	endif
	if( who.realm != "britannia" )
		SendSysMessageEx(who, "Esse local nao pode ser mapeado.", SSM_FAIL);
		return 0;
	endif
	if( (who.x > 5120) && (who.y < 2304) )
		SendSysMessageEx(who, "Voce nao pode mapear aqui.", SSM_FAIL);
		return 0;
	endif

	var itemname := craft_config[map_objtype].name;
	var material := Cint(craft_config[map_objtype].material);
	var reqd := Cint(craft_config[map_objtype].skill);
	var diff := Cint(craft_config[map_objtype].difficulty);
	var pts  := Cint(craft_config[map_objtype].points);
	var craft_skill  := Cint(craft_config[map_objtype].craft_skill);

	var counter := 0, x := who.x, y := who.y;

	while(counter < amount)
		if((who.x != x) || (who.y != y))
			SendSysMessageEx(who, "Voce parou de escrever.", SSM_FAIL);
			break;
		endif
		if(!tool)
			break;
		endif

		sleep(2);

		if(GetAmount(blank) >= material)
			//if( CraftCheckSkill(who, craft_skill, diff, pts) )
				var theitem := CreateCraftedMap(who, craft_skill, blank, map_objtype, material, itemname, reqd);
				if( TypeOf(theitem) != "ItemRef" )
					SubtractAmount(blank, material);
					SendSysMessageEx(who, "Voce falhou em escrever o mapa e parte do material foi perdido.", SSM_FAIL);
					counter := counter + 1;
					continue;
				else
					CheckToolWear (who, tool, craft_skill);
					var props;
					case(theitem.objtype)
						0x6500:	props := array("local", who.x - 155, who.y - 150, who.x + 155, who.y + 150, 180, 180);
							encodeMap(props, theitem);
						0x6501:	props := array("regional", who.x - 850, who.y - 800, who.x + 850, who.y + 800, 400, 400);
							encodeMap(props, theitem);
						0x6502: props := array("world", 0, 0, 5119, 4095, 500, 400);
							encodeMap(props, theitem);
					endcase
				endif
			//else
			//	if( SubtractAmount(blank, material) )
			//		SendSysMessageEx(who, "Voce perdeu parte do material.", SSM_FAIL);
			//	endif
			//endif
		else
			SendSysMessageEx(who, "Voce nao possui os recursos necessarios para fazer este item.", SSM_FAIL);
			counter := 100;
			break;
		endif
		counter := counter + 1;
	endwhile

	return 0;

endfunction

function encodeMap(map_definitions, map)
	if( map_definitions[2] < 0 )
		map_definitions[2] := 0;
	endif
	if( map_definitions[3] < 0 )
		map_definitions[3] := 0;
	endif
	map.xwest      := map_definitions[2];
	map.ynorth     := map_definitions[3];
	map.xeast      := map_definitions[4];
	map.ysouth     := map_definitions[5];
	map.gumpwidth  := map_definitions[6];
	map.gumpheight := map_definitions[7];

	return 1;
endfunction



function CreateCraftedMap(who, craft_skill, use_on, objtype, amount, itemname, reqd)
	var craft_sound  := menu_config[craft_skill].CraftSound;
	var craft_loops  := menu_config[craft_skill].CraftLoops;
	var craft_delay  := menu_config[craft_skill].CraftDelay;
	var craft_action := menu_config[craft_skill].CraftAnim;
	playCraftWork(who, craft_sound, craft_loops, craft_delay, craft_action);

	var theitem := CreateItemInBackpack(who, objtype, 1);
	if(theitem)
		if( !SubtractAmount(use_on, amount) )
			SendSysMessage(who, "Voce nao tem materiais suficiente na sua mochila!");
			DestroyItem(theitem);
			return -1;
		endif

		SendSysMessage(who, "Voce desenhou o mapa.");
		SetName(theitem, itemname);
	else
		SendSysMessage(who, "Espaco insuficiente na sua mochila");
		return 0;
	endif
	if (theitem.objtype != 0x9923 && YesNo(who, "Voce quer escrever o nome do mapa?"))
		var nme2 := RequestGump(who, "Qual o nome do mapa?");
		if (nme2 != error)
			SetName(theitem, nme2);
		endif
	endif
	return theitem;
endfunction