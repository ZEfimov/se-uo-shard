use uo;
use os;
use util;

include ":gumps:include/gumps";
include ":gumps:include/gumps_ex";
include ":datafile:datafile";
include ":attributes:attributes";
include ":tn:tngumps";

const BTN_CHANGE_CHANGE := 13;
const BTN_CHANGE_TEST := 14;
const BTN_CHANGE_LANG := 15;
const BTN_CHANGE_TEXT := 16;

var resizables := array{
   0xE10,
   0xA3C,
   0x1432,
   0x141E,
   0x24A4,
   0x24AE,
   0xBB8,
   0xDAC,
   0x2454,
   0x2486,
   0x13BE,
   0x2422,
   0x242C,
   0x9D8,
   0x53,
   0x24B8,
   0x24B8,
   0x254E,
   0x255E,
   0x1400,
   0x13EC,
   0xA28,
   0x12E,
   0x137,
   0x7748,
   0x7752,
   0x9bF5,
   0x9C40
};

program command_Message(who, item)
   if (!who.cmdlevel)
      return showSpecialGump(who, item);
   endif

	while (1)
		var gump := GFCreateGump();
      GFClosable(gump, 1);
		GFResizePic(gump, 84, 90, 9260, 280, 200);

		GFGumpPicTiled(gump, 100,100,30,180,10460);
		GFGumpPicTiled(gump, 320,100,30,180,10460);
		
		var gump_params := GetObjProperty(item, "gump_params");
		if (!gump_params)
			gump_params := struct{ "x" := 20, "y" := 20, "width" := 200, "height":= 200, "color" := "FFFFFF", "gump_id" := 0};
		endif

      var y := 120;
      GFAddButton(gump, 172, y, 0x80E, 0x80E, GF_CLOSE_BTN, BTN_CHANGE_CHANGE);
		GFHTMLArea(gump,  170, y, 115, 25, "<basefont color=#7FFFD4><center>Mudar Gump", 1);
      
      GFAddButton(gump, 172, y+20+10, 0x80E, 0x80E, GF_CLOSE_BTN, BTN_CHANGE_LANG);
		GFHTMLArea(gump,  170, y+20+10, 115, 25, "<basefont color=#7FFFD4><center>Alterar idioma", 1);
      
      GFAddButton(gump, 172, y+40+20, 0x80E, 0x80E, GF_CLOSE_BTN, BTN_CHANGE_TEXT);
		GFHTMLArea(gump,  170, y+40+20, 115, 25, "<basefont color=#7FFFD4><center>Alterar Texto", 1);
      
      GFAddButton(gump, 172, y+80+10, 0x80E, 0x80E, GF_CLOSE_BTN, BTN_CHANGE_TEST);
		GFHTMLArea(gump,  170, y+80+10, 115, 25, "<basefont color=#7FFFD4><center>Testar Gump", 1);
      
      // GFAddButton(gump, 172, y+110, 0x80E, 0x80E, GF_CLOSE_BTN, BTN_SET_COND);
		// GFHTMLArea(gump,  170, y+110, 115, 25, "<basefont color=#7FFFD4><center>Add Condições", 1);
		var input := GFSendGump(who, gump);
		input := input[0];

      var output := handleInput(who, input, item, gump_params);

		SetObjProperty(item, "gump_params", gump_params);
		if (output) return; endif;
	endwhile
endprogram

function handleInput(who, input, item, byref gump_params)
   case (input)
      BTN_CHANGE_CHANGE:
         var questions := array{};
         questions.append(struct{ "title" := "Qual o ID do gump?", "marked" := ""+cint(gump_params.gump_id)});
         questions.append(struct{ "title" := "Qual largura do gump? (ignorar se não é resizable)", "marked" := ""+cint(gump_params.g_width)});
         questions.append(struct{ "title" := "Qual altura do gump? (ignorar se não é resizable)", "marked" := ""+cint(gump_params.g_height)});
         questions.append(struct{ "title" := "Qual posição x do texto?", "marked" := ""+cint(gump_params.x)});
         questions.append(struct{ "title" := "Qual posição y do texto?", "marked" := ""+cint(gump_params.y)});
         questions.append(struct{ "title" := "Qual largura do texto?", "marked" := ""+cint(gump_params.width)});
         questions.append(struct{ "title" := "Qual altura do texto?", "marked" := ""+cint(gump_params.height)});
         questions.append(struct{ "title" := "Qual a cor do texto?", "marked" := ""+gump_params.color});
         var output := QuestionsGump(who, questions);
         gump_params.gump_id := cint(output[1]);
         gump_params.x := cint(output[4]);
         gump_params.y := cint(output[5]);
         gump_params.width := cint(output[6]);
         gump_params.g_width := cint(output[2]);
         gump_params.height := cint(output[7]);
         gump_params.g_height := cint(output[3]);
         gump_params.color := output[8];
         
      BTN_CHANGE_LANG:
         var choice := RadioGump(who, 0, 0, "Qual idioma deseja escolher?", array{"Linguagem Rúnica", "Linguagem Élfica", "Lingua Comum"});
         if (choice["Comum"])
            gump_params.erase("lang");
         else
            gump_params.lang := choice;
         endif
      BTN_CHANGE_TEST:
         showSpecialGump(who, item);
      BTN_CHANGE_TEXT:
         var text := BigRequestGump(who, "Escreva o conteúdo do gump, use <br> para quebrar a linha");
         gump_params.text := text;
      default: return 1;
   endcase
endfunction


function showSpecialGump(who, item)
   var gump_params := GetObjProperty(item, "gump_params");
   if (!gump_params || !gump_params.gump_id)
      return 1;
   endif

   var is_lang := gump_params.lang;
   var lang := "";
   if (is_lang && !HaveFeat(who, is_lang))
      if (is_lang == "Linguagem Élfica")
         lang := "Face=Gargish size=4";
      elseif (is_lang == "Linguagem Rúnica")
         lang := "Face=Runic size=4";
      else
         SendSysMessageEx(who, "Problema com a linguagem do objeto", SSM_FAIL);
         return 0;
      endif
   endif

   var gump := GFCreateGump();
   GFClosable(gump, 1);
   GFSetId(gump, 0x94b5);
   if (cint(gump_params.gump_id) in resizables)
      GFResizePic(gump, 250, 250, gump_params.gump_id, gump_params.g_width, gump_params.g_height);
   else
      GFGumpPic(gump, 250, 250, gump_params.gump_id);
   endif
   GFHTMLArea(gump, gump_params.x+250, gump_params.y+250, gump_params.width, gump_params.height, "<BASEFONT {} color=#{}>{}".format(lang, gump_params.color, gump_params.text) , 0, 0);
   GFSendGump(who, gump);
endfunction