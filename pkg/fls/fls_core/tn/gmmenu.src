use os;
use uo;

include ":gumps:requestgump";
include ":gumps:gumps_ex";
include ":tn:tngumps";
// include ":gumps:yesno";
var gumpid := 0x99B7;

var menuCfg := ReadConfigFile(":fls_core:config/gmmenu");
var main_elem := FindConfigElem(menuCfg, "DefaultList");
var menu_items := GetConfigStringArray(main_elem, "Menu");
var last_gump;

program start_gmMeny(who)
   CloseGump(who, gumpid);
   var menu_config := GetObjProperty(who, "gmmenu");
   if (!menu_config) menu_config := struct{ x := 20, y := 20, opened := array{}}; endif
   
   while (who.connected)
      var input;
      if (last_gump)
         input := GFSendGump(who, last_gump)[0];
      else
         input := ConstructGump(who, menu_config)[0];
      endif

      if (!input)
         break;
      elseif (input == 2)
         var new_pos := PositionGump(who, menu_config.x, menu_config.y);
         menu_config.x := new_pos[1];
         menu_config.y := new_pos[2];
         SetobjProperty(who, "gmmenu", menu_config);
      elseif (input >= 600)
         input -= 600;
         last_gump := 0;
         menu_config.opened[input] := !menu_config.opened[input];
         SetObjProperty(who, "gmmenu", menu_config);
      elseif (input >= 10)
         input := cstr(input);
         var key := menu_items[cint(input[1])];
         var elem := FindConfigElem(menuCfg, key);
         var command := SplitWords(GetConfigStringArray(elem, "command")[cint(input[2])]);

         var params := who;
         var other_params := GetConfigStringArray(FindConfigElem(menuCfg, command[1]), "param");

         if (other_params)
            params := array{params};
            foreach param in other_params
               params.append(param);
            endforeach
         endif
         start_script(command[2], params);
      endif
      
      sleepms(2);
   endwhile
endprogram

function ConstructGump(who, menu_config)
   var gump := GFCreateGump();
   GFPage(gump, 0);
   GFSetID(gump, gumpid);
   GFClosable(gump, 1);
   GFMovable(gump, 0);

   var x := menu_config.x;
   var pos_y := 0 + menu_config.y;
	GFResizePic(gump, 3+x, 6+pos_y, 5120, 63, 39 * menu_items.size() );
	GFAddButton(gump, 5+x, 5+pos_y, 1209, 1210, GF_CLOSE_BTN, 2); //resize

   foreach key in menu_items
      sleepms(2);
      var elem := FindConfigElem(menuCfg, key);
      if (cint(elem.cmdlevel) > who.cmdlevel) continue; endif
      GFTextLine(gump, 12+x, 17+pos_y, 1152, "{}".format(key));
      GFAddButton(gump, 46+x, 17+pos_y, 5540 + (menu_config.opened[_key_iter] == 1), 5541, GF_CLOSE_BTN, 600+_key_iter);
      if (menu_config.opened[_key_iter] == 1)
         BuildMenu(gump, who, elem, _key_iter, x, pos_y);
      endif

      pos_y += 38;
   endforeach

	return GFSendGump(who, gump);

endfunction

function BuildMenu(byref gump, who, elem, i, x, pos_y)
   
   var commands := GetConfigStringArray(elem, "command");
	GFResizePic(gump, 64+x, 6+pos_y, 5120, 79 * commands.size(), 39);

   var pos_x := 0 + x;
   foreach command in commands
      command := SplitWords(command);
      GFAddButton(gump, 73+pos_x, 15+pos_y, 247, 247, GF_CLOSE_BTN, cint("{}{}".format(i, _command_iter)));
      GFResizePic(gump, 71+pos_x, 13+pos_y, 9350, 71, 26);
      GFTextLine(gump, 75+pos_x, 16+pos_y, 1051, command[1]);
      pos_x += 76;
      sleepms(2);
   endforeach


endfunction
