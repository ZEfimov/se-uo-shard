use uo;
use os;
use cfgfile;
use math;
include ":merchants:merchant";
include "include/string";
include "include/sounds";
include":merchants:crafthelp";
include ":ghaia:ghaiaUtil";
include ":gumps:gumps";
include ":gumps:gumps_ex";
include ":gumps:yesno";
include ":gumps:include/requestgump";
include ":crafting:craft_props";
include ":crafting:fls_crafting";
include ":quest:quest";
include ":gumps:htmlgump";
include ":tn:cooldown";

const GF_STDCOLOR := 1890;
const MOEDAS      := 0xeed;
var item_cfg      := ReadConfigFile(":*:itemdesc");
var npc;

program HandleMerchant(params)
	SetObjProperty(params.me, "#occupied", GetPid());
	case (params.type)
		// "ItemGivenEvent": 
		// 	if (!HandleItemGiven(params.me, params.source, params.item))
		// 		MoveItemToContainer(params.item, params.source.backpack);
		// 	endif
		"SpeechEvent": HandleSpeech(params.me, params.source, params.text);
      "DblClickEvent": 
         PrintText(params.source, array{"Olá {}".format(params.me.name), "Quer aprender algo?", "Em que posso ajuda-lo?"}.randomentry, SSM_INFO); 
         SendQuestGump(params.me, params.source);
      // "SeeEvent": HandleSeeEvent(params.me, params.source);
		// "Default": return;
	endcase

	EraseObjProperty(params.me, "#occupied");
endprogram


function HandleSpeech(npc, player, text)
   var canceled := 0;
	text := lower(text);

   if ((text["bom"] && text["dia"]) || text["ajuda"])
      if (!player.concealed)
         return SendSysMessageEx(player, "Dê duplo clique no vendedor para ver seus produtos a venda.", SSM_REQUEST);
      endif
      SendQuestGump(npc, player);
   elseif (player.cmdlevel >= 3 && text["alterar"] && text["op"])
      SendConfigGump(npc, player);
   endif
endfunction

function SendQuestGump(npc, player)
   var quests := GetObjProperty(player, "quests");
   if (!quests) quests := array{}; endif
   
   var myconfigs := GetObjProperty(npc, "config");
   if (!myconfigs) myconfigs := struct{}; endif
   if (!myconfigs.text) myconfigs.text := ""; endif
   if (!myconfigs.type) myconfigs.type := array{}; endif
   if (!myconfigs.classes) myconfigs.classes := array{}; endif

   var classCfg := ReadConfigFile(":charactercreation:config/classes");
   var chardata := GetObjProperty(player, "chardata");
   if (!chardata) PrintText(npc, "Não posso te ajudar, desculpe", SSM_INFO); endif

   var questions := array{};
   foreach classe in (myconfigs.classes)
      sleepms(2);
      var elem := FindConfigElem(classCfg, classe);
      if (elem.Type == "Main")
         continue;
      elseif (elem.Type == "Secondary")
         if (chardata.subclasses.size() >= 3 || FindInArray(chardata.subclasses, struct{ id := classe })) 
            continue;
         endif
      endif

      questions.append(struct{ type := "learn_class", classe := classe });
   endforeach

   var weekly_quests := GetObjProperty(player, "weekly_quests");
   if (!weekly_quests) weekly_quests := array{}; endif
   var quest_list := ListQuests();
   foreach classe in (myconfigs.type)
      sleepms(2);
      // Delivery Quests
      var player_quests := FindAllElemInArray(quests, struct{ category := classe } );
      foreach quest in player_quests
         if (CheckQuest(player, quest))
            questions.append(struct{ type := "delivery", classe := classe, id := quest.id });
         endif
      endforeach
      // End Delivery

      // New Quests
      var f  := _ifElse(player_quests, player_quests.size(), 0);
      if (f >= 1) continue; endif

      var weekly_quests_total := FindAllElemInArray(weekly_quests, struct{ classe := classe });
      var wf := _ifElse(weekly_quests_total, weekly_quests_total.size(), 0);
      if (f+wf >= 2)
         questions.append(struct{ no_choice := 1, type := "limitreach", classe := classe });
         continue;
      elseif (classe != chardata.current_class && !FindInArray(chardata.subclasses, struct{ id := classe }))
         continue;
      endif
      
      var diff := _ifElse(cint(f+wf) <= 0, 1, 2);

      var quest_giver := FilterQuestByClassAndDiff(player, quest_list, classe, diff);
      if (quest_giver.size())
         var randomquest := quest_giver.randomentry();
         questions.append(struct{ type := "quest", classe := classe, quest_id := randomquest.id });
      else
         questions.append(struct{ no_choice := 1, type := "noquest", classe := classe });
      endif
   endforeach

	var gump := GFCreateGump();
	
	GFPage(gump, 0);
   var mod_y := (questions.size() * 26);
	GFResizePic(gump, 9, 11, 5170, 432, 202+mod_y);
	GFGumpPicTiled(gump, 32, 38, 384, 12, 50);
   GFHtmlShadowed(gump, 51, 60, 344, 20, "#FFFFFF", "<center>{}".format(myconfigs.text), 4);
	GFGumpPic(gump, 44, 91, 57, 0);
	GFGumpPic(gump, 372, 91, 59, 0);
	GFGumpPicTiled(gump, 74, 91, 299, 21, 58);

   if (!questions.size())
     questions.append(struct{ no_choice := 1, type := "none" });
   endif

   var pos_y := 0;
   foreach quest in questions
      var quest_text := "";
      var quest_marker := 10;
      if (quest.type == "learn_class")
         quest_text := "Iniciar aprendizado em {}".format(quest.classe);
         quest_marker := 100;
      elseif (quest.type == "quest")
         quest_text := "Como melhorar minhas habilidades em {}".format(quest.classe);
      elseif (quest.type == "delivery")
         quest_marker := 50;
         quest_text := "Terminei o que me pediu [{}]".format(quest.classe);
      elseif (quest.type == "none")
         quest_text := "Não há tarefas disponíveis";
      elseif (quest.type == "limitreach")
         quest_text := "Você deve esperar a próxima semana para mais quests de {}".format(quest.classe);
      elseif (quest.type == "noquest")
         quest_text := "Quests para este level de {} não estão disponíveis.".format(quest.classe);
      endif

      GFTextLine(gump, 97, 116+pos_y, 1152, "{}".format(quest_text)); 
      if (!quest.no_choice) GFAddButton(gump, 72, 115+pos_y, 5540, 5540, GF_CLOSE_BTN, quest_marker+_quest_iter); endif
      pos_y += 26;
      sleepms(2);
   endforeach

	GFAddButton(gump, 196, 131+13+mod_y, 2072, 2073, GF_CLOSE_BTN, 1); // cancel
	GFGumpPicTiled(gump, 34, 169+mod_y, 383, 12, 50);

	var res := GFSendGump(player, gump)[0];
   
   if (!res || res == 1)
      return;
 elseif (res >= 100)
      res -= 100;
      var answer := questions[res];
      var elem := FindConfigElem(classCfg, answer.classe);
      var chardata := GetObjProperty(player, "chardata");
      if (elem.Type == "Main")
         chardata.subclasses.append(struct{
            id := answer.classe,
            exp := 0,
            level := 1,
            habs := array{},
            selected_habs := array{}
         });
      elseif (elem.Type == "Secondary")
         chardata.subclasses.append(struct{
            id := answer.classe,
            exp := 0,
            level := 1,
            habs := array{}
         });
      endif

      CreateItemsFromClass(player, answer.classe);
      SetObjProperty(player, "chardata", chardata);
      PrintText(npc, "Certo, irei te ensinar sobre {}. Volte semanalmente aqui que eu lhe de instruções.".format(answer.classe), SSM_INFO);
   elseif (res >= 50)
      res -= 50;
      var answer := questions[res];
      var pos := FindInArray(quests, struct{ category := answer.classe, id := answer.id });
      var quest := quests[pos];
      if (!CheckQuest(player, quest))
         return SendSysMessageEx(player, "Não foi possível concluir a missão. Algo ainda está faltando ser completado.", SSM_FAIL);
      endif
      
      if (CompleteQuest(player, pos))
         PrintText(npc, "Terminou, hum? Espero que tenha aprendido algo.", SSM_INFO);
      else
         return SendSysMessageEx(player, "Não foi possível concluir a missão. Algo ainda está faltando ser completado.", SSM_FAIL);
      endif
   elseif (res >= 10)
       res -= 10;
       var answer := questions[res];
-      GiveQuest(player, FindElemInArray(quest_list, struct{ id := answer.quest_id }), answer.classe);
-      PrintText(npc, "Estarei aguardando aqui para quando tiver terminado.", SSM_INFO);
   endif
endfunction

function SendConfigGump(npc, player)
   var myconfigs := GetObjProperty(npc, "config");
   if (!myconfigs) myconfigs := struct{}; endif
   if (!myconfigs.text) myconfigs.text := ""; endif
   if (!myconfigs.type) myconfigs.type := array{}; endif
   if (!myconfigs.classes) myconfigs.classes := array{}; endif

   var classCfg := ReadConfigFile(":charactercreation:config/classes");
   var opts := GetConfigStringKeys(classCfg);

   var marked_type := array{};
   var can_teach := array{};
   foreach type in opts
      if (type in myconfigs.type) marked_type.append(_type_iter); endif
      if (type in myconfigs.classes) can_teach.append(_type_iter); endif
      sleepms(2);
   endforeach

   var quest_gump := array{
      struct{ title := "Texto de introdução", marked := myconfigs.text },
      struct{ title := "Quests que pode dar:", checkbox := opts, marked := marked_type },
      struct{ title := "Classes que pode ensinar", checkbox := opts, marked := can_teach }
   };
   var output := QuestionsGump(player, quest_gump);
   if (!output) return 0; endif
   myconfigs.text := output[1];
   myconfigs.type := output[2];
   myconfigs.classes := output[3];

   SetObjProperty(npc, "config", myconfigs);
endfunction

function CreateItemsFromClass(who, classe)
   var items_cfg := ReadConfigFile(":charactercreation:config/classItems");
   var elem := FindConfigElem(items_cfg, classe);
   if (!elem) return; endif

	var items      := GetConfigStringArray(elem, "Item");
	var recipes    := GetConfigStringArray(elem, "Recipe");

	foreach item in items
		item := SplitWords(item);
		var name := item[1];
		var qty := cint(item[2]);

		if (name["/"])
			var sex_choose := SplitWords(name, "/");
			if (who.gender == 0)
				name := sex_choose[1];
			else
				name := sex_choose[2];
			endif
		endif
		
		var objtype := GetObjtypeByName(name);
		if (!objtype)
			objtype := item[1];
		endif

		var obj := CreateItemInBackpack(who, cint(objtype), qty);
		SetObjProperty(obj, "serialid", who.serial);
		sleepms(2);
	endforeach

	foreach recipe in recipes
		if (Hex(recipe) != error && cint(Hex(recipe)) != 0)
			recipe := hex(recipe);
		endif
		var obj := CreateItemInBackpack(who, 0xef1f);
		SetObjProperty(obj, "objtype", recipe);
		Run_Script( ":crafting:recipes/oncreate", recipe );
		sleepms(2);
	endforeach

   if (elem.emailTitle && elem.emailBody)
	   start_script( ":email:emailMessage/sendSystemMail", array{ who, elem.emailTitle, elem.emailBody } );
   endif
endfunction

function FilterQuestByClassAndDiff(player, quest_data, classe, difficulty := 0)
   var return_list := array{};
   foreach quest in quest_data
      sleepms(2);
      if (!(classe in quest.category))
         continue;
      elseif (difficulty && quest.difficulty != difficulty)
         continue;
      endif

      var has_feat := 1;
      foreach item in (quest.extras)
         if (item.type["Habilidade"])
            if (item.class_type == "Main")
               if (!HaveFeatPrimary(player, item.req_feat)) has_feat := 0; break; endif
            else
               if (!HaveFeatSecondary(player, item.req_feat)) has_feat := 0; break; endif
            endif
         endif
         sleepms(5);
      endforeach

      if (!has_feat) continue; endif

      quest.category := classe;
      return_list.append(quest);
   endforeach

   return return_list;
endfunction