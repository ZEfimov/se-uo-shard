use uo;
use os;
use npc;
use util;

include ":attributes:attributes";
include "include/sysEvent";
include "include/say";
include ":mounts:mounts";
include ":taming:taming";
include ":tn:cooldown";
include ":ghaia:generic";
include ":ghaia:objective";

set_script_option(SCRIPTOPT_CAN_ACCESS_OFFLINE_MOBILES, 1);

const DF_ARMS_MSG := ""; 
const DF_WARN_MSG := "";
const DF_HELP_MSG := "";
const DF_ACCEPT_MSG := "";
const DF_NEGATIVE_MSG := "";

var pack_animals   := array{291, 292};
var me             := self();
var idlesnd, custombehaviors, personality, npccfgfile;
var following, fighting, warning, patrolling;
var warn_type, warn_tries;
var wait_time := 10;
var tame_difficulty := 0;
var follow_tries := 0;
var guild, guild_leader, guild_laws;
var tools := array{0xec4, 0x13e3, 0xFB4, 0xFB5, 0x13f6, 0xe85, 0xf43, 0xec2, 0x1F020};

//Custom events
const FOLLOW_CMD     := 0xA001;
const ATTACK_CMD     := 0xA002;
const NEW_MASTER_CMD := 0xA003;
const GO_LOC_CMD     := 0xA008;

function EnableGuardMainEvents()
   EnableEvents(SYSEVENT_SPEECH, 10);
   EnableEvents(SYSEVENT_ENGAGED);
   EnableEvents(SYSEVENT_DAMAGED);
   // EnableEvents(SYSEVENT_DOUBLECLICKED, 5);
   EnableEvents(SYSEVENT_ITEM_GIVEN, 2);
   EnableEvents(SYSEVENT_ENTEREDAREA, 5);
   DisableEvents(SYSEVENT_OPPONENT_MOVED);
endfunction

function DisableGuardMainEvents()
   DisableEvents(SYSEVENT_SPEECH);
   DisableEvents(SYSEVENT_ENGAGED);
   DisableEvents(SYSEVENT_DAMAGED);
   DisableEvents(SYSEVENT_ITEM_GIVEN);
   // DisableEvents(SYSEVENT_DOUBLECLICKED);
   DisableEvents(SYSEVENT_OPPONENT_MOVED);
   DisableEvents(SYSEVENT_ENTEREDAREA);
endfunction

function HasEnemyNear(what)
   var mobile_list := ListMobilesNearLocationEx(what.x, what.y, LIST_IGNORE_Z, 8, LISTEX_FLAG_NORMAL|LISTEX_FLAG_NPC_ONLY);
   var enemy_near := 0;
   foreach mob in mobile_list
      if (mob.alignment == 2 && mob != what && mob != me)
         enemy_near := 1;
         break;
      endif
      sleepms(2);
   endforeach

   if (enemy_near)
      return 1;
   endif
endfunction

function CheckPlayer(who)
   if (who.npctemplate)
      if (who.alignment == 2)
         fighting  := who;
         warning   := 0;
         following := 0;
         warn_type := 0;
         return;
      endif
   endif

   var privs := guild.GetProp(cstr(who.serial));
   var is_leader := (who == guild.getProp("leader"));
   if (is_leader || privs.above_guards)
      return 0;
   elseif (GetCooldown(me, "recentcheck_{}".format(who.serial)))
      return 0;
   endif

   var hostiles := ListHostiles(who, 8);
   foreach mob in hostiles
      if (GetObjProperty(mob, "guild") == guild.guildid || mob.guildid == guild.guildid)
         Fight(mob);
         return 0;
      endif
      sleepms(2);
   endforeach

   foreach law in guild_laws
      case (law.type)
         "nofight": 
            if (who.warmode == 1)
               if (!HasEnemyNear(who))
                  warning := who;
                  warn_type := 1;
               endif
            endif
            break;
         "nolockpick":
            if (GetObjProperty(who, "#lockpicking"))
               warning := who;
               warn_type := 2;
            endif
         "noweapon":
            if (!(who.weapon in tools))
               if (!HasEnemyNear(who))
                  warning := who;
                  warn_type := 3;
               endif
            endif
         "noitem":
            if (CheckItem(who, law.item))
               warning := who;
               warn_type := 4;
            endif
      endcase
      sleepms(2);
   endforeach
endfunction

program NPCMonitor()
   EnableGuardMainEvents();
   Setup();
   set_critical(1);
   SetWarMode( 0 );
   Set_Event_Queue_Size(20);
   wait_time := 10;
   SetAnchor(0, 0, 0, 0);
   while (me)
      if (GetObjProperty(me, "objloc") != error)
         DoObjective();
      endif

      if ( wait_time < 1 )
         sleepms(10);
      endif

      Fight();
      PetFollow();
      PetGuard();

      if (!following && !fighting && !guarding)
         wait_time := 30;
      endif

      var ev := Wait_For_Event(wait_time);
      case(ev.type)
         SYSEVENT_ENGAGED:
         SYSEVENT_DAMAGED:
            if (!following && !fighting)
               Fight(ev.source);
            endif
         // EVID_HERDING:
         // 	herd(ev);
         EVID_TAUNT:
            if(ev.source && (!me.master.party || (me.master.party && !(ev.source in me.master.party.members))) )
               Fight(ev.opponent, 1);
            endif
         EVID_FLEE:
            Flee(ev.source);
         EVID_DOOBJECTIVE:
            if (ev.destiny)
               PetGoTo(ev.destiny, ev.move_type);
            endif
         SYSEVENT_SPEECH:
            ResolveSpeech(ev);
         // SYSEVENT_DOUBLECLICKED:
         //    if ( ev.source == me.master || ev.source.cmdlevel >= 3 )
         //       if( (Distance(ev.source, me) > 1) )
         //          ProcessDoubleClick(ev);
         //       elseif ( me.graphic in pack_animals )
         //          OpenPack(ev);
         //       endif
         //    endif
         SYSEVENT_ITEM_GIVEN:
            TakeItem(ev);

         // Custom events
         FOLLOW_CMD:
            PetFollow(ev.targ);
         ATTACK_CMD:
            Fight(ev.targ);
         GUARD_CMD:
            PetGuard(ev.targ);
      endcase

      wait_time := 5;
      sleepms(10);
   endwhile
endprogram

function WarnPlayer()
   if (fighting || !warning)
      return;
   elseif (GetCooldown(who, "last_warn_{}".format(warning.serial)))
      return;
   endif

   warn_tries += 1;

endfunction

function Fight(opponent)
   if (opponent)
      if ( opponent == me || opponent == fighting || !opponent.IsA(POLCLASS_MOBILE) || guild_leader == opponent.serial )
         return;
      endif

      fighting := opponent;
      SetOpponent(opponent);
      SetWarMode(1);
      return;
   endif

   if (!fighting)
      SetOpponent(0);
      SetWarMode(0);
      return;
   endif

   if (fighting.concealed || fighting.hidden || fighting.dead || Distance(me, fighting) > 15)
      var hostiles := ListHostiles( me, 8, LH_FLAG_LOS);
      if (!hostiles[1])
         fighting := 0;
         SetOpponent(0);
         SetWarMode(0);
         return;
      else
         fighting := hostiles[1];
      endif
   endif

   var range := 1;
   var minrange := 0;
   if (npccfgfile.AttackMaxRange)
      range := cint(npccfgfile.AttackMaxRange);
   endif

   if (npccfgfile.AttackMinRange)
      minrange := cint(npccfgfile.AttackMinRange);
   endif

   var dist := CoordinateDistance(me.x, me.y, fighting.x, fighting.y);
   if (dist > range)
      CalcPathAndMove(me, fighting, 275 - me.run_speed);
   elseif (dist < minrange)
      RunAwayFrom(fighting);
   endif

   wait_time := 0;
endfunction

function SendToPrison()

endfunction

function StoreWeapon(reverse := 0)

endfunction

function EatSomething()
   var random_food := CreateItemInBackpack(me, "banana");
   UseItem(random_food, me);
endfunction

function CanFight(me, mob)
   var hostiles := ListHostiles( me, 8, LH_FLAG_LOS);

   if (mob in hostiles)
      return 1;
   endif

   return 0;
endfunction

function PetMovement(what, move_mode)
   if (!CheckLosAt(me, what.x, what.y, what.z) || CanWalk("L", me.x, me.y, me.z, me.facing) == error) //se n¿o consegue correr direto
		var path := GetObjProperty(me, "path"); //procura se ja calculou o path
		var last_loc := GetObjProperty(me, "#enemy_last_loc"); //procura se ja calculou o path
		
      if (path == error || ( last_loc && !(what in ListMobilesNearLocation(last_loc.x, last_loc.y, last_loc.z, 3)) )) //se n¿o calculou
         var flags := FP_IGNORE_MOBILES;
         if ( cint(GetObjProperty(me, "ignoredoor")) || cint(GetObjProperty(me, "opendoor")) )
            flags := flags| FP_IGNORE_DOORS;
         endif
         path := FindPath(  me.x, me.y, me.z, what.x, what.y, what.z, me.realm, flags, 15); //calcula o path
         
         if (!path[1] || !path || path == error)
            sleepms(2);
            what := 0;
         else
            if (move_mode == 2)
               RunTowardLocation( path[1].x, path[1].y ); //anda na direcao
            else
               WalkTowardLocation( path[1].x, path[1].y ); //anda na direcao
            endif
				path.erase(1); //deleta a coordenada e vai pra proxima
            set_critical(1);
            SetObjProperty(me, "path", path);
            SetObjProperty(me, "#enemy_last_loc", array{what.x, what.y, what.z});
            set_critical(0);
         endif
		endif

      var coord := path[1]; //pega a primeira coordenada
      if (coord); 
         var coordtry := GetObjProperty(me, "#coordtry");
         if (coordtry != error && coordtry[1] != coord)
            SetObjProperty(me, "#coordtry", array{coord, ReadGameClock()+5 }); 
         endif
         if (move_mode == 2)
            RunTowardLocation( coord.x, coord.y ); //anda na direcao
         else
            WalkTowardLocation( coord.x, coord.y ); //anda na direcao
         endif
         sleepms(2);
         Opendoors(me); //tenta abrir possiveis portas
         if (CoordinateDistance(me.x, me.y, coord.x, coord.y) <= 1) //se chegou onde devia 
            path.erase(1); //deleta a coordenada e vai pra proxima
            if (path[1])
               SetObjProperty(me, "path", path);
            else
               EraseObjProperty(me, "path");
            endif
         else // se n¿o consegue chegar na coord 
            if ( coordtry[2] > ReadGameClock()) //se ta tentando chegar la a mais de 5 segundos
               EraseObjProperty(me, "path"); //deleta o path atual
               what := 0;
            endif
         endif
      else
         if (move_mode == 2)
            RunToward( what );
         else
            WalkToward( what );
         endif
         RunToward( what );
         sleepms(2);
      endif
   else
      EraseObjProperty(me, "path");
      EraseObjProperty(me, "#enemy_last_loc");
      if (move_mode == 2)
      else
         WalkToward( what );
      endif
      sleepms(2);
	endif
endfunction

function Setup()
   var guildid := GetObjProperty(me, "guild");

   if (guildid)
      guild := FindGuild(guildid);
      if (!guild)
         ApplyRawDamage(me, 600);
      endif
   else
      sleep(5);
      Setup();
   endif

   if ( !me.backpack )
      var new_pack := CreateItemAtLocation(me.x, me.y, me.z, "backpack", 1);
      EquipItem(me, new_pack);
   endif

   guild_leader := guild.getProp("leader");
   guild_laws := guild.getProp("laws");
   if (!guild_laws)
      guild_laws := array{};
   endif

   me.facing := me.facing+1;
   me.cmdlevel := 2;
endfunction
