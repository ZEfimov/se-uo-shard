use uo;
use os;
use npc;
use util;
use guilds;

include ":attributes:attributes";
include "include/sysEvent";
include "include/say";
include ":mounts:mounts";
include ":taming:taming";
include ":tn:cooldown";
include ":ghaia:generic";
include ":ghaia:objective";
include ":ghaia:ghaiaInit";
include ":ghaia:habs";
include ":faccao:npc";
include ":combat:combat";
include ":yggdrasil:combatevents";

set_script_option(SCRIPTOPT_CAN_ACCESS_OFFLINE_MOBILES, 1);

var me             := self();
var custombehaviors, npccfgfile, myhabilities;
var following, fighting, warning, patrolling, standing;
var warn_type, warn_rect, warn_tries, warn_opt := 0;
var wait_time := 10;
var combatevents := array{};
var guild, guild_leader, guild_laws, fix_location, guild_prison, guild_prisonl;
var tools := array{0xec4, 0x13e3, 0xFB4, 0xFB5, 0x13f6, 0xe85, 0xf43, 0xec2, 0x1F020};

//Custom events
const LOCKPICK_EVENT    := 0x78455;
const CERCA_EVENT       := 0x78456;
const RESET_SETUP_EVENT := 0x78457;
const HELP_CMD          := 0x78458;
const FOLLOW_CMD        := 0xA001;
const ATTACK_CMD        := 0xA002;
const NEW_MASTER_CMD    := 0xA003;
const GO_LOC_CMD        := 0xA008;

function EnableGuardMainEvents()
   EnableEvents(SYSEVENT_SPEECH, 10);
   EnableEvents(SYSEVENT_ENGAGED);
   EnableEvents(SYSEVENT_DAMAGED);
   EnableEvents(SYSEVENT_DOUBLECLICKED, 5);
   EnableEvents(SYSEVENT_ITEM_GIVEN, 2);
   EnableEvents(SYSEVENT_ENTEREDAREA, 5);
   DisableEvents(SYSEVENT_OPPONENT_MOVED);
endfunction

function DisableGuardMainEvents()
   DisableEvents(SYSEVENT_SPEECH);
   
   DisableEvents(SYSEVENT_ENGAGED);
   DisableEvents(SYSEVENT_DAMAGED);
   DisableEvents(SYSEVENT_ITEM_GIVEN);
   DisableEvents(SYSEVENT_DOUBLECLICKED);
   DisableEvents(SYSEVENT_OPPONENT_MOVED);
   DisableEvents(SYSEVENT_ENTEREDAREA);
endfunction

function HasEnemyNear(what)
   var mobile_list := ListMobilesNearLocationEx(what.x, what.y, LIST_IGNORE_Z, 8, LISTEX_FLAG_NORMAL|LISTEX_FLAG_NPC_ONLY);
   var enemy_near := 0;
   foreach mob in mobile_list
      if (mob.alignment != me.alignment && mob != what && mob != me)
         enemy_near := 1;
         break;
      endif
      sleepms(2);
   endforeach

   if (enemy_near)
      return 1;
   endif
endfunction

function CheckIfHavePlayerGuild(player_array)
   foreach player in player_array
      if (guild.guildid == player.guildid)
         var privs := guild.GetProp(cstr(player.serial));
         if (player.serial == guild_leader || privs.above_guards)
            return 1;
         endif
      endif
      sleepms(2);
   endforeach
endfunction

function CheckPlayer(who)
   if (who.npctemplate && !who.master)
      if (who.alignment && who.alignment != me.alignment)
         if (InGuildRect(guild, who))
            warning   := 0;
            warn_type := 0;
            Fight(who);
         endif
      endif

      return;
   endif

   var privs := guild.GetProp(cstr(who.serial));
   var is_member := guild.guildid == who.guildid;
   var user_subguilds := who.guild.getProp("subguilds");
   if (!user_subguilds) user_subguilds := array{}; endif
   var is_leader := (who.serial == guild_leader || guild.guildid in user_subguilds);
   if (is_leader || privs.above_guards)
      SetCooldown(me, "recentcheck_{}".format(who.serial), 10);
      return 0;
   elseif (GetCooldown(me, "recentcheck_{}".format(who.serial)))
      SetCooldown(me, "recentcheck_{}".format(who.serial), 10);
      return 0;
   elseif (!InGuildRect(guild, who))
      SetCooldown(me, "recentcheck_{}".format(who.serial), 2);
      return 0;
   elseif (is_member)
      if (privs.abovelaws || privs.above_guards)
         SetCooldown(me, "recentcheck_{}".format(who.serial), 10);
         return 0;
      endif
   endif

   var hostiles := ListHostiles(who, 8);
   foreach mob in hostiles
      if (GetObjProperty(mob, "guild") == guild.guildid || mob.guildid == guild.guildid)
         Fight(mob);
         return 1;
      endif
      sleepms(2);
   endforeach

   foreach law in guild_laws
      case (law.type)
         "nofight": 
            if (is_member && law.opt)
               break;
            endif
            if (who.warmode == 1)
               if (!HasEnemyNear(who))
                  warning := who;
                  warn_type := 1;
               endif
            endif
            break;
         "noweapon":
            if (is_member && law.opt)
               break;
            endif
            if (!(who.weapon.objtype in tools))
               if (!HasEnemyNear(who))
                  warning := who;
                  warn_type := 3;
               endif
            endif
            break;
         "noitem":
            if (CheckItem(who, law.opt))
               warning := who;
               warn_type := 4;
               warn_opt := law.opt;
            endif
            break;
         "norace":
            if (who.isRace(law.opt) && who.guildid != guild.guildid)
               warning := who;
               warn_type := 2;
            endif
            break;
         "nooutsider":
            if (who.guildid != guild.guildid)
               warning := who;
               warn_type := 2;
            endif
            break;
         "nooutsideron":
            var rect := law.opt.rect;
            if (who.x >= cint(rect[1]) && who.x <= cint(rect[3]) && who.y >= cint(rect[2]) && who.y <= cint(rect[4]) && who.z >= cint(rect[5]) && who.z < cint(rect[5]) + 15)
               warning := who;
               warn_rect := law.opt.rect;
               warn_type := 2;
            endif
         "noguild":
            if (who.guildid == law.opt)
               warning := who;
               warn_type := 2;
            endif
      endcase
      sleepms(2);
   endforeach
   SetCooldown(me, "recentcheck_{}".format(who.serial), 2);
endfunction

function Checkitem(what, itemobj)
   var itemlist := ListEquippedItems(what);
   foreach item in itemlist
      if (item.objtype == itemobj.objtype)
         return itemobj;
      endif
      sleepms(2);
   endforeach
endfunction

program NPCMonitor()
   EnableGuardMainEvents();
   Setup();
   set_critical(1);
   SetWarMode( 0 );
   Set_Event_Queue_Size(20);
   wait_time := 10;
   SetAnchor(0, 0, 0, 0);
   while (me)
      if (GetObjProperty(me, "objloc") != error)
         DoObjective();
      endif

      if (warning)
         wait_time := 0;
      endif

      if ( wait_time < 1 )
         sleepms(10);
      endif

      Fight();
      PetFollow();
      WarnPlayer();
      Patrol();

      if (!following && !fighting && !warning)
         var listmobiles := ListMobilesInLineOfSight( me, 8);
         if (!CheckIfHavePlayerGuild(listmobiles))
            foreach mob in listmobiles
               sleepms(2);
               if (mob == me || GetObjProperty(mob, "guild"))
                  continue;
               endif

               if (CheckPlayer(mob))
                  wait_time := 0;
                  break;
               endif
            endforeach
         endif
      endif

      if (!following && !fighting && !warning)
         if (fix_location && !standing)
            PetGoTo(fix_location, 2);
            me.facing := fix_location.facing;
         endif

         if (!GetCooldown(me, "try_reset"))
            if (!HasPlayerNear(me.x, me.y, me.realm))
               if (SendToStartPosition())
                  wait_time := 2000;
               endif
            else
               SetCooldown(me, "try_reset", 200);
               wait_time := 3;
            endif
         else
            wait_time := 3;
         endif
         warn_tries := 0;
      endif

      var ev := Wait_For_Event(wait_time);
      case(ev.type)
         SYSEVENT_ENGAGED:
         SYSEVENT_DAMAGED:
            if (!following && !fighting)
               Fight(ev.source);
            endif
            break;
         HELP_CMD:
            if (!fighting)
               Fight(ev.targ);
            endif
         LOCKPICK_EVENT:
            if (!CheckIfHavePlayerGuild(ListMobilesInLineOfSight( me, 8)))
               if (FindInArray(guild_laws, struct{"type" := "nolockpick" }) && InGuildRect(guild, ev.source))
                  AddReport(guild, "{} alertou {} sobre arrombar fechaduras".format(me.name, ev.source.name));
                  PrintText(me, "Ei! O que pensa que está fazendo?");
                  Fight(ev.source);
                  disableWarn();
               endif
            endif
            wait_time := 0;
         CERCA_EVENT:
            if (!CheckIfHavePlayerGuild(ListMobilesInLineOfSight( me, 8)))
               if (FindInArray(guild_laws, struct{"type" := "nocerca" }))
                  AddReport(guild, "{} alertou {} sobre pular cercas".format(me.name, ev.source.name));
                  PrintText(me, "Ei! O que pensa que está fazendo?");
                  var storeloc := struct{ "x" := ev.source.x, "z" := ev.source.z, "y" := ev.source.y };
                  PetGoTo(ev.last_loc, 2);
                  MoveObjectToLocation(me, storeloc.x, storeloc.y, storeloc.z, me.realm, MOVEOBJECT_FORCELOCATION);
                  Fight(ev.source);
                  disableWarn();
               endif
            endif
            wait_time := 0;
            break;
         SYSEVENT_ENTEREDAREA:
            if (!CheckIfHavePlayerGuild(ListMobilesInLineOfSight( me, 8)))
               if (CheckLineOfSight(me, ev.source))
                  CheckPlayer(ev.source);
                  wait_time := 0;
               endif
            endif
            break;
         EVID_TAUNT:
            if(ev.source && ev.source in ListHostiles(me, 5))
               Fight(ev.opponent);
            endif
            break;
         EVID_FLEE:
            Flee(ev.source);
            break;
         EVID_DOOBJECTIVE:
            if (ev.destiny)
               PetGoTo(ev.destiny, ev.move_type);
            endif
            wait_time := 0;
            break;
         SYSEVENT_SPEECH:
            ResolveSpeech(ev);
         SYSEVENT_DOUBLECLICKED:
         //    if ( ev.source == me.master || ev.source.cmdlevel >= 3 )
         //       if( (Distance(ev.source, me) > 1) )
            ProcessDoubleClick(ev);
         //       elseif ( me.graphic in  )
         //          OpenPack(ev);
         //       endif
         //    endif
         SYSEVENT_ITEM_GIVEN:
            TakeItem(ev);

         // Custom events
            break;
         FOLLOW_CMD:
            PetFollow(ev.targ);
            break;
         ATTACK_CMD:
            Fight(ev.targ);
            break;
         RESET_SETUP_EVENT:
            guild_leader  := guild.getProp("leader");
            guild_laws    := guild.getProp("laws");
            guild_prison  := guild.getProp("prisions");
            guild_prisonl := guild.getProp("prision_leave");
            break;
         default:
            wait_time := 5;
      endcase

      sleepms(10);
   endwhile
endprogram


function ResolveSpeech(ev, source := 0, order := 0)
   if (source)
      ev := struct{
         "source" := source,
         "text" := "{} {}".format(me.name, order)
      };
   endif

   var text := lower(ev.text);
   var name := lower(me.name);

   if (!source)
      var privs := guild.GetProp(cstr(ev.source.serial));
      var user_subguilds := ev.source.guild.getProp("subguilds");
      if (!user_subguilds) user_subguilds := array{}; endif
      var is_leader := (ev.source.serial == guild_leader || guild.guildid in user_subguilds);
      if (!privs.above_guards && !is_leader)
         return;
      elseif(!text[name] && !text["todos"])
         return;
      endif
   endif

   var targ;
   if (text["-me"])
      targ := ev.source;
   endif

   var allevent;

   /// Attack command
   if (text["mate"] || text["ataque"] || text["prenda"])
      PrintText(me, "As suas ordens");
      targ := target(ev.source, TGTOPT_HARMFUL + TGTOPT_CHECK_LOS);
      disableWarn();
      Fight(targ);
      allevent := struct{ targ := targ, type := ATTACK_CMD };
   /// Stop Command
   elseif (text["pare"])
      PrintText(me, "Sim senhor");
      disableWarn();
      following  := 0;
      fighting   := 0;
      standing := 1;
      warning := 0;
      SetWarMode(0);
   /// Follow Command
   elseif (text["siga"])
      PrintText(me, "As suas ordens");
      disableWarn();
      if (!targ)
         targ := target(ev.source);
      endif
      PetFollow(targ);
      allevent := struct{ targ := targ, type := FOLLOW_CMD };
   elseif (text["parar"] && text["patrulha"])
      PrintText(me, "Sim senhor.");
      patrolling := 0;
      standing := 0;
      EraseObjProperty(me, "patrolling");

   elseif (text["patrulh"])
      PrintText(me, "Informe a rota senhor");
      disableWarn();
      following  := 0;
      fighting   := 0;
      warning := 0;
      
      SendSysMessageEx(ev.source, "Escolha a rota de patrulha. Não podem ter mais de 20 tiles entre elas.");
      var targ := TargetCoordinates(ev.source);
      if (!targ) return SendSysMessageEx(ev.source, "Cancelado"); endif
      patrolling := array{targ};

      SendSysMessageEx(ev.source, "Escolha a próxima rota de patrulha. Não podem ter mais de 20 tiles entre elas.");
      targ := TargetCoordinates(ev.source);
      if (!targ) 
         patrolling := 0;
         return SendSysMessageEx(ev.source, "Cancelado"); 
      elseif (CoordinateDistance(patrolling[1].x, patrolling[2].x, targ.x, targ.y) > 20)
         return SendSysMessageEx(ev.source, "Patrulha muito distante. Cancelado."); 
      endif
      patrolling.append(targ);
      fix_location := 0;
      standing := 0;
      EraseObjProperty(me, "fix_loc");
      SetObjProperty(me, "patrolling", patrolling);
      PrintText(me, "Irei iniciar minha patrulha");
   elseif (text["mant"] && text["posição"])
      PrintText(me, "Sim senhor.");
      patrolling := 0;
      standing := 0;
      fix_location := struct{ "x" := ev.source.x, "z" := ev.source.z, "y" := ev.source.y, facing := ev.source.facing };

      EraseObjProperty(me, "patrolling");
      SetObjProperty(me, "fix_loc", fix_location);
   elseif (text["assum"] && text["posto"])
      EraseObjProperty(me, "#patrol_stand");
      EraseObjProperty(me, "#patrol_next");
      PrintText(me, "Sim senhor.");
      following := 0;
      fighting := 0;
      standing := 0;
      disableWarn();
   elseif (text["ir"] && text["at"])
      var where := TargetCoordinates(ev.source);
      PrintText(me, "Sim senhor");
      disableWarn();
      following  := 0;
      fighting   := 0;
      standing := 0;
      warning := 0;
      SetWarMode(0);
      PetGoTo(where, 2);
      standing := 1;
   endif

   if (text["todos"] && allevent)
      AllCommand(allevent);
   endif
endfunction

function ProcessDoubleClick(ev)
   var privs := guild.GetProp(cstr(ev.source.serial));
   var user_subguilds := ev.source.guild.getProp("subguilds");
   if (!user_subguilds) user_subguilds := array{}; endif
   var is_leader := (ev.source.serial == guild_leader || guild.guildid in user_subguilds);
   if (!privs.above_guards && !is_leader && !ev.source.cmdlevel )
      return;
   endif

   var gump := GFCreateGump(220, 70);
   //GFGumpPic(gump, 0, 0, 0x254E);
   GFResizePic(gump, 0, 0, 0x254E, 125, 160);

   GFTextLine(gump, 30, 15, 2100, "Ir");
	GFTooltipText(gump, "Ordena o guarda ir até um local");
   GFAddButton(gump, 15, 17, 2117, 2118, 1, 70);

   GFTextLine(gump, 30, 35, 2100, "Parar");
	GFTooltipText(gump, "Ordena o guarda a parar suas atividades. Deve-se usar Assumir Postos para restaura-las.");
   GFAddButton(gump, 15, 37, 2117, 2118, 1, 10);

   GFTextLine(gump, 30, 55, 2100, "Seguir ");
	GFTooltipText(gump, "Ordena o guarda a seguir algo.");
   GFAddButton(gump, 15, 57, 2117, 2118, 1, 20);

   GFTextLine(gump, 30, 75, 2100, "Atacar");
	GFTooltipText(gump, "Ordena o guarda a atacar algo.");
   GFAddButton(gump, 15, 77, 2117, 2118, 1, 30);

   GFTextLine(gump, 30, 95, 2100, "Patrulhar");
	GFTooltipText(gump, "Ordena o guarda a ptrulhar entre dois pontos.");
   GFAddButton(gump, 15, 97, 2117, 2118, 1, 40);

   GFTextLine(gump, 30, 115, 2100, "Manter Posição");
	GFTooltipText(gump, "Ordena o guarda a assumir a mesma posição que o seu personagem está.");
   GFAddButton(gump, 15, 117, 2117, 2118, 1, 50);

   GFTextLine(gump, 30, 135, 2100, "Assumir Postos");
	GFTooltipText(gump, "Ordena o guarda a restaurar suas atividades normais.");
   GFAddButton(gump, 15, 137, 2117, 2118, 1, 60);

   var input := GFSendGump(ev.source, gump)[0];
   case (input)
      70: ; ResolveSpeech(0, ev.source, "Ir até"); break;
      10: ; ResolveSpeech(0, ev.source, "Pare"); break;
      20: ; ResolveSpeech(0, ev.source, "Siga"); break;
      30: ; ResolveSpeech(0, ev.source, "Ataque"); break;
      40: ; ResolveSpeech(0, ev.source, "Patrulha"); break;
      50: ; ResolveSpeech(0, ev.source, "Manter Posição"); break;
      60: ; ResolveSpeech(0, ev.source, "Assumir Postos"); break;
   endcase
endfunction

function AllCommand(ev)
   var event := struct;
   event.+type := ev.type;
   event.+source := me;
   event.+targ := ev.targ;

   foreach mobile in(ListMobilesNearLocation( me.x, me.y, me.z, 8, me.realm))
      if ( GetObjProperty(mobile, "guild") == guild.guildid && mobile != me)
         SendEvent(mobile, event);
      endif

      sleepms(2);
   endforeach
endfunction

function disableWarn()
   warn_type  := 0;
   warn_tries := 0;
   warning    := 0;
endfunction

function WarnPlayer()
   if (fighting || !warning || following)
      return;
   elseif (warning.concealed || warning.hidden || warning.dead)
      disableWarn();
      return;
   endif 
   
   wait_time := 0;
   if (Distance(me, warning) <= 3)
      PetMovement(warning, 1);
      wait_time := 1;
   else
      PetMovement(warning, 2);
   endif

   if (GetCooldown(me, "last_warn_{}".format(warning.serial)))
      return;
   endif

   // PrintText(me, "Looking what to warn");
   case (warn_type)
      1: //nofight
         if (!warning.warmode)
            PrintText(me, "Muito bem.");
            AddReport(guild, "{} alertou {} sobre combate não permitido".format(me.name, warning.name));
            disableWarn();
            return;
         endif
         if (warn_tries == 0)
            PrintText(me, "Não é permitido brigar aqui");
            PrintText(me, "Pare com esta atitude agora mesmo!");
         else
            var rand_msg := RandomInt(4);
            case (rand_msg)
               0:1: PrintText(me, "Vamos lá, pare com isso"); break;
               2: PrintText(me, "Não me obrigue a tomar uma atitude"); break;
               3: PrintText(me, "Estou falando sério, sem combate aqui!"); break;
            endcase
         endif

         break;
      2: //nooutsider, noguild, norace
         if (warn_rect)
            if ((warning.x >= cint(warn_rect[1]) && warning.x <= cint(warn_rect[3]) && warning.y >= cint(warn_rect[2]) && warning.y <= cint(warn_rect[4])))
               PrintText(me, "Muito bem.");
               AddReport(guild, "{} alertou {} sobre presença não permitida na área".format(me.name, warning.name));
               disableWarn();
               return;
            endif
        elseif (!InGuildRect(guild, warning))
            PrintText(me, "Muito bem.");
            AddReport(guild, "{} alertou {} sobre presença não permitida na área".format(me.name, warning.name));
            disableWarn();
            return;
         endif

         if (warn_tries == 0)
            PrintText(me, "Você não é bem vindo aqui");
            PrintText(me, "Saia desta área agora mesmo!");
            SendSystemReport(warning, "*{} parece estar falando com você*".format(me.name), SSM_FAIL);
         else
            var rand_msg := RandomInt(4);
            case (rand_msg)
               0:1: PrintText(me, "Vamos lá, retire-se ou as coisas ficarão pior"); break;
               2: PrintText(me, "Não me obrigue a tomar uma atitude"); break;
               3: PrintText(me, "Estou falando sério, saia daqui!"); break;
            endcase
         endif
         break;
      3: //noweapon
         if (warning.weapon.objtype in tools)
            PrintText(me, "Muito bem.");
            AddReport(guild, "{} alertou {} sobre uso de armas".format(me.name, warning.name));
            disableWarn();
            return;
         endif

         if (warn_tries == 0)
            PrintText(me, "Não é permitido usar armas aqui");
            PrintText(me, "Guarde-a agora mesmo!");
         else
            var rand_msg := RandomInt(4);
            case (rand_msg)
               0:1: PrintText(me, "Vamos lá, guarde esta arma"); break;
               2: PrintText(me, "Não me obrigue a tomar uma atitude"); break;
               3: PrintText(me, "Estou falando sério, guarde esta arma!"); break;
            endcase
         endif
         break;
      4: //noitem
         if (!CheckItem(warning, warn_opt))
            PrintText(me, "Muito bem.");
            AddReport(guild, "{} alertou {} sobre item equipável não permitido".format(me.name, warning.name));
            disableWarn();
            return;
         endif

         if (warn_tries == 0)
            PrintText(me, "Não é permitido usar {} aqui".format(warn_opt.name));
            PrintText(me, "Guarde-a agora mesmo!");
         else
            var rand_msg := RandomInt(4);
            case (rand_msg)
               0:1: PrintText(me, "Vamos lá, guarde {}".format(warn_opt.name)); break;
               2: PrintText(me, "Não me obrigue a tomar uma atitude"); break;
               3: PrintText(me, "Estou falando sério, guarde isso agora mesmo!"); break;
            endcase
         endif
         break;
   endcase

   if (warn_tries >= 3)
      Fight(warning);
      disableWarn();
   endif

   // PrintText(me, "warned");
   SetCooldown(me, "last_warn_{}".format(warning.serial), 4);
   warn_tries += 1;
endfunction

function Patrol()
   if (!patrolling)
      return;
   elseif (fighting || following || warning || standing)
      return;
   elseif (GetCooldown(me, "patrol_stand"))
      return;
   endif

   var patrol_point := patrolling[1];
   if (GetObjProperty(me, "patrol_next"))
      patrol_point := patrolling[2];
   endif

   PetMovement(patrol_point, 1);

   if (CoordinateDistance(me.x, me.y, patrol_point.x, patrol_point.y) < 1)
      if (GetObjProperty(me, "patrol_next"))
         EraseObjProperty(me, "patrol_next");
      else
         SetObjProperty(me, "patrol_next", 1);
      endif
      SetCooldown(me, "patrol_stand", (randomInt(3)+1)*60);
   else
      wait_time := 1;
   endif
endfunction

function SendToStartPosition()
   if ((!fix_location && !patrolling ) || standing)
      return 1;
   endif

   if (fix_location)
      if (CoordinateDistance(fix_location.x, fix_location.y, me.x, me.y) > 20)
         if (HasPlayerNear(fix_location.x, fix_location.y, me.realm))
            return 0;
         endif
      endif

      MoveObjectToLocation(me, fix_location.x, fix_location.y, fix_location.z, me.realm, MOVEOBJECT_FORCELOCATION);
      me.facing := fix_location.facing;
   endif

   if (patrolling)
      if (CoordinateDistance(patrolling.x, patrolling.y, me.x, me.y) > 20)
         if (HasPlayerNear(patrolling[1].x, patrolling[1].y, me.realm))
            return 0;
         endif

         MoveObjectToLocation(me, patrolling[1].x, patrolling[1].y, patrolling[1].z, me.realm, MOVEOBJECT_FORCELOCATION);
      endif
   endif

   return 1;
endfunction

function Fight(opponent := 0)
   if (opponent)
      // PrintText(me, "I will engage".format(opponent.name));
      if ( opponent == me || opponent == fighting || !opponent.IsA(POLCLASS_MOBILE) || guild_leader == opponent.serial )
         return;
      endif

      foreach monster in ListMobilesNearLocationEx(me.x, me.y, me.z, 8, LISTEX_FLAG_NORMAL|LISTEX_FLAG_HIDDEN|LISTEX_FLAG_NPC_ONLY)
         if (GetObjProperty(monster, "guild") == guild.guildid)
            SendEvent(monster, struct{ "type" := HELP_CMD, source := me, targ := opponent});
         endif
         sleepms(2);
      endforeach
      

      fighting := opponent;
      disableWarn();
      SetOpponent(opponent);
      SetWarMode(1);
      wait_time := 0;
      return;
   endif

   if (!fighting)
      SetOpponent(0);
      SetWarMode(0);
      return;
   endif

   // PrintText(me, "Engaged");
   if (fighting.concealed || fighting.hidden || fighting.dead || Distance(me, fighting) > 15)
      AddReport(guild, "{} entrou em combate com {}".format(me.name, fighting.name));
      if (fighting.dead)
         AddReport(guild, "{} bateu em {} até desmaiar".format(me.name, fighting.name.getName()));
      endif
      var hostiles := ListHostiles( me, 8, LH_FLAG_LOS);
      if (!hostiles[1])
         fighting := 0;
         SetOpponent(0);
         SetWarMode(0);
         return;
      else
         fighting := hostiles[1];
      endif
   endif

   if (fighting.npctemplate && !GetObjProperty(fighting, "guild"))
      if (!InGuildRect(guild, fighting))
         RunAwayFrom(fighting);
         wait_time := 0;
         if (Distance(me, fighting) >= 15)
            fighting := 0;
         endif
         return;
      endif
   endif

   var range := 1;
   var minrange := 0;

   if (!me.weapon)
      if (npccfgfile.AttackMaxRange)
         range := cint(npccfgfile.AttackMaxRange);
      endif

      if (npccfgfile.AttackMinRange)
         minrange := cint(npccfgfile.AttackMinRange);
      endif
   else
      var itemdesc := ReadConfigFile(":combat:itemdesc");
      var itemelem := itemdesc[me.weapon.objtype];
      if (itemelem.minrange)
         minrange := cint(itemelem.minrange);
      endif

      if (itemelem.maxrange)
          range := cint(itemelem.maxrange);
      endif
   endif

   var dist := CoordinateDistance(me.x, me.y, fighting.x, fighting.y);
   if (dist > range || !CheckLineOfSight(me, fighting))
      CalcPathAndMove(me, fighting, 275 - me.run_speed);
   elseif (dist < minrange)
      RunAwayFrom(fighting);
   endif

   if (!me.frozen && !me.paralyzed)
      SetObjProperty(me, "#Casting", 1);
      foreach ce in combatevents
         if (!TS_GetCooldown(me, ce.name))
            start_script(":ghaia:special/genericspecial" , array{me, ce});
         endif
         sleepms(2);
      endforeach
      EraseObjProperty(me, "#Casting");
   endif
   wait_time := 0;
endfunction

function PetFollow(character := 0)
   if (character)
      if ( character == me || character == fighting || !character.IsA(POLCLASS_MOBILE) )
         return;
      endif
      warning := 0;
      following := character;
      standing := 0;
      return;
   elseif (fighting || warning || !following)
      return;
   endif

   var dist := Distance(me, following);

   if( dist <= 2 )
      wait_time := 1;
   elseif( dist > 25 )
      following := 0;
      wait_time := 120;
   elseif ( dist > 4 )
      RunTowardLocation( following.x, following.y );
      wait_time := 0;
   else
      WalkTowardLocation( following.x, following.y );
      wait_time := 0;
   endif
endfunction

function SendToPrison()
   var prision := guild.getProp("prisions");
   if (!prision)
      return;
   endif
endfunction

function StoreWeapon(reverse := 0)

endfunction

function EatSomething()
   var random_food := CreateItemInBackpack(me, "banana");
   UseItem(random_food, me);
endfunction

function CanFight(me, mob)
   var hostiles := ListHostiles( me, 8, LH_FLAG_LOS);

   if (mob in hostiles)
      return 1;
   endif

   return 0;
endfunction

function TakeItem(ev)
   var privs := guild.GetProp(cstr(ev.source.serial));
   var user_subguilds := ev.source.guild.getProp("subguilds");
   if (!user_subguilds) user_subguilds := array{}; endif
   var is_leader := (ev.source.serial == guild_leader || guild.guildid in user_subguilds);
   if (!privs.above_guards && !is_leader)
      MoveItemToContainer(ev.item, ev.source.backpack);
      return;
   elseif(!ev.item.isA(POLCLASS_EQUIPMENT))
      MoveItemToContainer(ev.item, ev.source.backpack);
      return;
   elseif (!YesNo(ev.source, "Deseja equipar o npc com isso?"))
      MoveItemToContainer(ev.item, ev.source.backpack);
      return;
   endif

   var layer := ev.item.tile_layer;
   var layer_used := GetEquipmentByLayer(me, layer);
   if (layer_used)
      MoveItemToContainer(layer_used, me.backpack);
   endif

   EquipItem( me, ev.item );
endfunction

function PetMovement(what, move_mode)
   if (!CheckLosAt(me, what.x, what.y, what.z) || CanWalk("L", me.x, me.y, me.z, me.facing) == error) //se n¿o consegue correr direto
		var path := GetObjProperty(me, "path"); //procura se ja calculou o path
		var last_loc := GetObjProperty(me, "#enemy_last_loc"); //procura se ja calculou o path
		
      if (path == error || ( last_loc && !(what in ListMobilesNearLocation(last_loc.x, last_loc.y, last_loc.z, 3)) )) //se n¿o calculou
         var flags := FP_IGNORE_MOBILES;
         if ( cint(GetObjProperty(me, "ignoredoor")) || cint(GetObjProperty(me, "opendoor")) )
            flags := flags| FP_IGNORE_DOORS;
         endif
         path := FindPath(  me.x, me.y, me.z, what.x, what.y, what.z, me.realm, flags, 15); //calcula o path
         
         if (!path[1] || !path || path == error)
            sleepms(2);
            what := 0;
         else
            if (move_mode == 2)
               RunTowardLocation( path[1].x, path[1].y ); //anda na direcao
            else
               WalkTowardLocation( path[1].x, path[1].y ); //anda na direcao
            endif
				path.erase(1); //deleta a coordenada e vai pra proxima
            set_critical(1);
            SetObjProperty(me, "path", path);
            SetObjProperty(me, "#enemy_last_loc", array{what.x, what.y, what.z});
            set_critical(0);
         endif
		endif

      var coord := path[1]; //pega a primeira coordenada
      if (coord); 
         var coordtry := GetObjProperty(me, "#coordtry");
         if (coordtry != error && coordtry[1] != coord)
            SetObjProperty(me, "#coordtry", array{coord, ReadGameClock()+5 }); 
         endif
         if (move_mode == 2)
            RunTowardLocation( coord.x, coord.y ); //anda na direcao
         else
            WalkTowardLocation( coord.x, coord.y ); //anda na direcao
         endif
         sleepms(2);
         Opendoors(me); //tenta abrir possiveis portas
         if (CoordinateDistance(me.x, me.y, coord.x, coord.y) <= 1) //se chegou onde devia 
            path.erase(1); //deleta a coordenada e vai pra proxima
            if (path[1])
               SetObjProperty(me, "path", path);
            else
               EraseObjProperty(me, "path");
            endif
         else // se n¿o consegue chegar na coord 
            if ( coordtry[2] > ReadGameClock()) //se ta tentando chegar la a mais de 5 segundos
               EraseObjProperty(me, "path"); //deleta o path atual
               what := 0;
            endif
         endif
      else
         if (move_mode == 2)
            RunTowardLocation( what.x, what.y );
         else
            WalkTowardLocation( what.x, what.y );
         endif
         RunTowardLocation( what.x, what.y );
         sleepms(2);
      endif
   else
      EraseObjProperty(me, "path");
      EraseObjProperty(me, "#enemy_last_loc");
      if (move_mode == 2)
         RunTowardLocation( what.x, what.y );
      else
         WalkTowardLocation( what.x, what.y );
      endif
      sleepms(2);
	endif
endfunction

function PetGoTo(destiny, move_type)
   var flags := FP_IGNORE_MOBILES;
   if ( cint(GetObjProperty(me, "ignoredoor")) || cint(GetObjProperty(me, "opendoor")) )
      flags := flags| FP_IGNORE_DOORS;
   endif
   var path := FindPath(  me.x, me.y, me.z, destiny.x, destiny.y, destiny.z, me.realm, flags, 12); //calcula o path
   var sleepdelay := 275 - me.run_speed;//(CInt(GetDexterity(me)) * 1.5);
   foreach coord in path
      if (move_type == 1)
         WalkTowardLocation( coord.x, coord.y ); //anda na direcao
      else
         RunTowardLocation( coord.x, coord.y ); //anda na direcao
      endif
      OpenDoors(me);
      sleepms(sleepdelay);
   endforeach
endfunction

function Setup()
   var npc_cfg     := ReadConfigFile(":*:npcdesc")[me.my_template()];
   npccfgfile := npc_cfg;

   if (!GetObjProperty(me, "started"))
      var rndint := RandomInt(3);
      if (rndint == 2)
         me.objtype := me.objtype+1;
         me.graphic := me.graphic+1;
         me.trueobjtype := me.objtype+1;
         me.gender := 1;
      endif
      SetupColor(me);
      SetupEquip(me);
      SetupName(me);
      SetObjProperty(me, "DaysOfService", polcore().systime);
      SetObjProperty(me, "started", 1);
      SetupSpecials(me);
   endif

   var guildid := GetObjProperty(me, "guild");

   if (guildid)
      guild := FindGuild(guildid);
      if (!guild)
         ApplyRawDamage(me, 600);
      endif
   else
      sleep(5);
      Setup();
   endif

   if ( !me.backpack )
      var new_pack := CreateItemAtLocation(me.x, me.y, me.z, "backpack", 1);
      EquipItem(me, new_pack);
   endif

   guild_leader  := guild.getProp("leader");
   guild_laws    := guild.getProp("laws");
   guild_prison  := guild.getProp("prisions");
   guild_prisonl := guild.getProp("prision_leave");
   if (!guild_laws)
      guild_laws := array{};
   endif

   patrolling := GetObjProperty(me, "patrolling");
   fix_location := GetObjProperty(me, "fix_loc");

   var npc_list := listNPC(guild);
   var me_conf := npc_list[GetObjProperty(me, "conf_ref")];
   if (me_conf)
      myhabilities := me_conf.habs;
      if (!myhabilities)
         myhabilities := array{};
      endif
   endif
   custombehaviors := array{"CastAnimation"};

   me.facing := me.facing+1;
   me.cmdlevel := 2;
endfunction


//pega a lista de inimigos proximo, se tiver player perto e a tendencia for evil ele vira inimigo
function GetEnemiesNear(loc, range := 5, get_hidden := 0)
   // var enemies := GetConfigStringArray( npccfgfile, "enemy" );
   var hostiles := ListHostiles(me, 10);
   var myenemies := array{};

   foreach mobile in ListMobilesNearLocationEx( loc.x, loc.y, loc.z, range, LISTEX_FLAG_NORMAL|LISTEX_FLAG_HIDDEN)
      if ((mobile.hidden && !get_hidden || mobile == me))
         continue;
      elseif (mobile.guildid == guild.guildid)
         continue;
      endif
      
      if (mobile IN hostiles )
         myenemies.append(mobile);
      endif

      if (mobile.npctemplate)
         if (mobile.master || mobile.master in hostiles)
            myenemies.append(mobile);
         endif
         // if ( mobile.my_template() in enemies)
         //       myenemies.append(mobile);
         // endif
      elseif (me.alignment == 1)
         myenemies.append(mobile);
      endif
      sleepms(2);
   endforeach

   return myenemies;
endfunction    

function GetAlliesNear(loc, range := 5)
   var myallies := CheckifIsNotEnemy(me, ListMobilesNearLocationEx( loc.x, loc.y, loc.z, range, LISTEX_FLAG_NORMAL|LISTEX_FLAG_HIDDEN));

   return myallies;
endfunction