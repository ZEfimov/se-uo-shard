use uo;
use os;
use vitals;

include ":timedscripts:timedScripts";
include ":tn:cooldown";
include "include/damage";
include "include/shapes";
include ":ghaia:ghaia";
include ":ghaia:habs";
include "include/sysEvent";
include "include/utils";

var me;
var custombehaviors := array{};

program loko(params)
	var who := params[1];
	var event := params[2];
   me := who;
	//printtextabove(who, " "  + event); //apagar
	if (!who.opponent)
		return;
   elseif (GetCooldown(who, ""+event.name))
      return;
   endif

   if (event.chance != 100 )
      if (Randomint(100)+1 > event.chance)
         SetCooldown(who, ""+event.name, 2); 
         return;
      endif
   endif

   if ( event.hp_percent != 100)
      var maxhit := cdbl(AP_GetVitalMaximumValue(who, HITS)) * (cdbl(event.hp_percent)/100);
      if (cdbl(AP_GetVital(who, HITS)) > maxhit)
         SetCooldown(who, ""+event.name, 2); 
         return;
      endif
	endif

	if (event.dist > 0)
		if (CoordinateDistance(who.x, who.y, who.opponent.x, who.opponent.y) < event.dist)
			return;
		endif
	endif
	// if (event.onlybloodied) 
	// 	if ( !IsBloodied(who) )
	// 		return;
	// 	endif
	// endif

	//check distancia


	SetCooldown(who, event.name, event.cd); 
	//executa os states
	foreach state in (event.steps)
		EraseObjPRoperty(who, "noclosecombat");

		if (state.type == "Move")
			SetObjProperty(who, "noclosecombat", 1);
			var ev := struct;
			ev.type := EVID_COMBAT_MOVE;
			ev.x := state.x;
			ev.y := state.y;
			var loop := 1;
    			while (loop)	
				SendEvent(who, ev);
            			if (CoordinateDistance( who.x, who.y, state.x, state.y ) <= 1 )
					EraseObjPRoperty(who, "noclosecombat");
					loop := 0;
				else 
					loop := 1;
				endif
				sleepms(100);
    			endwhile

		elseif (state.type == "Pushback")
			var targ := selectOpponent(who, state.target, state.conedist);
			foreach t in targ
            sleepms(2);
            if (state.behaviour["Para frente"])
               if (state.behaviour["relacional"])
                  PushMobile(who, state.dist, 100, t);
               else
                  PushBack(t, state.dist, 100, 1);
               endif
            elseif (state.behaviour["Para trás"])
               PushBack(t, state.dist, 100);
            endif
			endforeach
		elseif (state.type == "Teleport")
         print(state);
			var targ := selectOpponent(who, state.target, state.conedist);
			foreach t in targ
            sleepms(2);
            if (!state.behaviour || state.behaviour["Teleportar X,Y,Z"])
               MoveObjectToLocation(t, state.x, state.y, state.z, who.realm, MOVEOBJECT_FORCELOCATION);
            elseif (state.behaviour["Teleportar no Alvo"])
               MoveObjectToLocation(t, who.opponent.x, who.opponent.y, who.opponent.z, who.opponent.realm, MOVEOBJECT_FORCELOCATION);
            elseif (state.behaviour["Teleportar no NPC"])
               MoveObjectToLocation(t, who.x, who.y, who.z, who.realm, MOVEOBJECT_FORCELOCATION);
            elseif (state.behaviour["+-X,Y,Z"])
               print(MoveObjectToLocation(t, t.x+cint(state.x), t.y+cint(state.y), t.z+cint(state.z), who.realm, MOVEOBJECT_FORCELOCATION));
            endif
			endforeach

			if (state.target == "Self")
				MoveObjectToLocation(who, state.x, state.y, state.z, who.realm, MOVEOBJECT_FORCELOCATION);
			elseif (state.target == "Opponent")
				MoveObjectToLocation(who.opponent, state.x, state.y, state.z, who.realm, MOVEOBJECT_FORCELOCATION);
			elseif (state.target == "All Opponents")
				var opponents := GetAllOpponents(who);
				foreach op in opponents
					MoveObjectToLocation(op, state.x, state.y, state.z, who.realm, MOVEOBJECT_FORCELOCATION);
				endforeach
			endif
         
		elseif (state.type == "TimedScript")
			var targ := selectOpponent(who, state.target, state.conedist);
			foreach t in targ
            sleepms(2);
            if (state.resist_test)
               if (rollResistDice(t, state.resist_test) > state.resist_diff)
                  SendSystemReport(t, "*resistido*");
                  continue;
               endif
            endif
				TS_StartTimer(t, state.timername, cint(state.timerduration), state.level);
			endforeach

		elseif (state.type == "Perform Action" )
			var targ := selectOpponent(who, state.target, state.conedist);

			foreach t in targ
            PlayAction(t, cint(state.id));
			endforeach

		elseif (state.type == "Text")
			var targ := selectOpponent(who, state.target, state.conedist);

			foreach t in targ
				PrintText(t, state.text, state.color);
			endforeach
		elseif (state.type == "Play Sound")
			PlaySoundEffect(who, state.id);
		elseif (state.type == "Delay")
			Sleep(state.delay);
		elseif (state.type == "Heal")
         HealFLS(who, state.healamt);
         RecalcVitals(who);
		elseif ( state.type == "Graphic Effect")
			var targ := selectOpponent(who, state.target, state.conedist);
			if (state.type == "Fixed Loc")
				if (state.graphictype == "Stationary")
					
				elseif (state.graphictype == "Moving")
					var startx := Cint(state.startx) + RandomInt(2 * state.startradius) - state.startradius;
					var starty :=  Cint(state.starty) + RandomInt(2 * state.startradius) - state.startradius;
					var endx := Cint(state.endx) + RandomInt(2 * state.endradius) - state.endradius;
					var endy := Cint(state.endy) + RandomInt(2 * state.endradius) - state.endradius;
               PlayMovingEffectXYZEx( startx, starty, cint(state.startz), endx, endy, Cint(state.endz), who.realm, cint(state.fxid), state.speed, state.loop, cint(state.color));
				endif
         elseif (state.target == "Cone in front")
            var points := GetConeCoordsInFront(who.x, who.y, who.facing, cint(state.conedist));
				foreach t in points
               if (state.fxid == "Electric")
                  LightningEffect(struct{ "x" := t[1], "y" := t[2], "z" := me.z, "realm" := me.realm}, 50);
               else
                  PlayStationaryEffectEx( t[1], t[2], who.z+2, who.realm, cint(state.fxid), state.speed, state.loops+20, cint(state.color));
               endif
               sleepms(2);
            endforeach
			else
				foreach t in targ
               if (state.graphictype == "Stationary")
                  if (state.fxid == "Lightning")
                     PlayLightningBoltEffect(t);
                  else
                     PlayObjectCenteredEffectEx(t, cint(state.fxid), state.speed, state.loops, cint(state.color));
                  endif
               elseif (state.graphictype == "Moving")
                  if (state.direction == "Mob->Player")
                     PlayMovingEffectEx(who, t, cint(state.fxid), state.speed, state.loops, cint(state.color));
                  else
                     PlayMovingEffectEx(t, who, cint(state.fxid), state.speed, state.loops, cint(state.color)); 
                  endif
               endif
               sleepms(2);
				endforeach
			endif
      elseif (state.type == "Play Cast Anim")
         if (!playCastAnimation(1))
            break;
         endif
		elseif (state.type == "Dmg")
         var targ := selectOpponent(who, state.target, state.conedist);

         var dmg := state.dmg;
         if (dmg["d"]) 
            dmg := RandomDiceRoll(state.dmg);
         else
            dmg := cint(state.dmg);
         endif

			foreach vital in (state.vitals)
				foreach t in targ
               sleepms(2);
               if (state.resist_test)
                  if (rollResistDice(t, state.resist_test) > state.resist_diff)
                     SendSystemReport(t, "*resistido*");
                     continue;
                  endif
               endif

					if (vital == "Hits")
						DamageFLS(t, dmg, state.dmgtype, who);
					elseif (vital == "Stam")
						AP_ConsumeVital(t, STAMINA, dmg);
					elseif (vital == "Mana")
						AP_ConsumeVital(t, MANA, dmg);
					endif
				endforeach
			endforeach
      elseif (state.type == "Set Cooldown")
         SetCooldown(who, state.prop, state.time);
		elseif (state.type == "Create Mine")
         var targ;
         var mineinfo := struct{
            difficulty := state.diff,
            type := state.mine_type,
            dice_dmg := state.dmg
         };

         for i := 1 to (state.amount)
            if (state.target["Random"])
               targ := randomPlace(me, 4);
            elseif (state.target["Frente"])
               targ := GetConeCoordsInFront(who.x, who.z, who.facing, 1).randomEntry();
            elseif (state.target["Costas"])
               var direct;
               if (who.facing >= 4)
                  direct := who.facing -4;
               else
                  direct := who.facing + 4;
               endif

               targ := GetConeCoordsInFront(who.x, who.z, direct, 1).randomEntry();
            endif
            if (!targ.z) targ.z := who.z; endif
            start_script(":magery:wands/spells/mina", array{who, mineinfo, targ});
         endfor
      elseif (state.type == "Metamorfose")
      elseif (state.type == "Hidden")
         GrantPrivilege(me, "runwhilestealth");
         me.enable("runwhilestealth");
         me.hidden := 1;
         me.stealthsteps := state.stealthsteps;
         if (state.attackhidden)
            GrantPrivilege(me, "hiddenattack");
            me.enable("hiddenattack");
         endif
         if (state.flee)
            ghaiaFlee(who.opponent, who);
         endif
      elseif (state.type == "Magicball")
         var targs := selectOpponent(who, state.target, state.conedist);
         foreach targ in targs
            var create_at := Splitwords(state.create_at);
            var pos;
            if (create_at.size() == 3)
               pos := array{who.x+cint(create_at[1]), who.y+cint(create_at[2]), who.z+cint(create_at[3])};
            else
               pos := array{who.x, who.y, who.z};
            endif
            var direction := targ;
            if (state.to_where == "Local")
               direction := GetFacing(who.x, who.y, targ.x, targ.y);
            endif
            var newball := CreateItemAtLocation(pos[1], pos[2], pos[3], 0xFFBE);
            newball.SetOwner(who);
            newball.SetDirection(direction);
            newball.SetDuration(state.duration);
            newball.SetType(state.ball_type);
            // newball.SetEffect(0x372A);
            newball.SetBallSound(state.sound, 0);
            newball.SetBallGraphic(state.graphic, state.color);
            if (state.subgraphic)
               newball.StoreBallGraphic(state.subgraphic, state.subcolor);
            endif
            newball.SetDmgInfo(struct{ "dice":= state.dmg_dice, "type" := state.dmg_type });
            sleepms(2);
         endforeach
      elseif (state.type == "Steal Player")
         var targs := selectOpponent(who, state.target, state.conedist);
         foreach targ in targs
            sleepms(2);
            if (state.onlybehind)
               if (!IsBehind(targ, who.x, who.y))
                  continue;
               endif
            endif
            var roll := rollAttrDice(who, DEXTERITY) + GetSkillBonus(who, FURTO);
            foreach item in EnumerateItemsInContainer(targ.backpack, ENUMERATE_ROOT_ONLY)
               var diff := 10 + CInt(item.amount * 0.3) + cint(item.weight/2);
               if (roll > diff)
                  MoveItemToContainer(item, who.backpack);
                  var user_percep := rollAttrDice(targ, WISDOM) + GetSkillBonus(targ, PERCEPCAO);
                  if (user_percep > roll)
                     SendSystemReport(who, "*pegou item da sua mochila*", SSM_FAIL, targ);
                  endif
                  break;
               endif
            endforeach
         endforeach
      elseif (state.type == "Spell Trilha")
         var targ := selectOpponent(who, state.target, state.conedist);
         var trilhainfo := struct{
            dice_roll := state.diff,
            dice_dmg := state.dice_dmg,
            type := state.trilha_type
         };
			foreach t in targ
            if (!t.z) t.z := who.z; endif
            start_script(":magery:wands/spells/caminho_fogo", array{who, trilhainfo, t});
            sleepms(2);
         endforeach
		elseif (state.type == "Summon Npcs") // Summonar NPC
	      var amt := 0;
         var tries := 0;
         var amount := state.amount;
         if (amount["d"]) 
            amount := RandomDiceRoll(amount);
         else
            amount := cint(amount);
         endif
         while (amt < amount)
            if (tries >= 20)
               break;
            endif
            var npc;
            if (state.x == 6 && state.y == 6 && state.z == 6)
               npc := CreateNpcFromTemplate( cstr(state.npctemplate), Cint(who.x) + RandomInt(2 * state.range) - state.range,
               Cint(who.y) + RandomInt(2 * state.range) - state.range, Cint(who.z));
            else
               npc := CreateNpcFromTemplate( cstr(state.npctemplate), Cint(state.x) + RandomInt(2 * state.range) - state.range,
               Cint(state.y) + RandomInt(2 * state.range) - state.range, Cint(state.z));
            endif


            if (npc != error)
               var duracaonpc := state.duracao;
               if (!duracaonpc)
                  duracaonpc := 120;
               endif
               TS_StartTimer(npc, "summon", duracaonpc);
               amt := amt + 1;

               if (state.walk_to && state.walk_to.size())
                  var coord;
                  if (state.walk_to[1] == 6 && state.walk_to[2] == 6 && state.walk_to[3] == 6 )
                     coord := struct{ "x" := who.x, "y" := who.y, "z" := who.z};
                  else
                     coord := struct{ "x" := state.walk_to[1], "y" := state.walk_to[2], "z" := state.walk_to[3]};
                  endif
                  ghaiaObjective(npc, coord, 2, 1);
               endif
            endif
            tries += 1;
            sleepms(2);
         endwhile

		endif
		sleepms(100);
	endforeach
endprogram

function selectOpponent(who, type, dist := 3)
   if (!dist) dist := 3; endif
   var targ := array{};
   if (type == "Self")
      targ.append(who);
   elseif (type == "Around Self")
      targ := GetEnemiesNear(who, 3);
   elseif (type == "Opponent")
      targ.append(who.opponent);
   elseif (type == "Around Opponent")
      targ := GetEnemiesNear(who.opponent, 3);
   elseif (type == "All Opponents")
      targ := GetEnemiesNear(who, 12);
   elseif (type == "Cone in front")
      var points := GetConeCoordsInFront(who.x, who.z, who.facing, dist);
      foreach p in points
         var mobs := ListMobilesNearLocation(p[1], p[2], who.z, 0);
         targ := targ + mobs;
         sleepms(2);
      endforeach
   elseif (type == "Random Opponent")
      targ := GetEnemiesNear(who, 12);
      targ := targ.randomEntry();
   endif

   return targ;
endfunction

function GetAllOpponents(who)
	var a := ListHostiles(who);
	var mobs := ListMobilesNearLocation(who.x, who.y, LIST_IGNORE_Z, 12, who.realm);

	foreach mobile in mobs
		if (mobile.serial != who.serial)
			if ( !(mobile in a) )
				if (mobile.acctname || mobile.script == ":ghaia:follower" )
					a.append(mobile);
				endif
			endif 
		endif
	endforeach

	return a;
endfunction

